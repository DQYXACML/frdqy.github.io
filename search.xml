<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s(1)-基本架构及部署</title>
      <link href="/2020/01/30/k8s-1-%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/01/30/k8s-1-%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>kubernetes是一个容器编排工具，其本质是集群，即组合多台主机的资源对外提供统一服务。在每台主机上安装相关程序，并使得这些程序实现通信，从而实现多个主机的协调。</p><a id="more"></a><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><p>k8s的集群内部主要分为三种网络模式，分别为节点网络、集群网络、pod网络。外部请求经由节点网络代理至集群网络，集群网络再代理至pod网络实现通信。</p><p>同一pod内：直接使用lo网卡即可通信</p><p>各pod之间通信：使用overlay Network方式实现叠加网络通信。overlay构建一个虚拟网段，实现各节点的主机内的pod处于同一个虚拟网段，这样就可以直接进行通信，不需要各种NAT转换。原理是利用隧道技术进行二层封装，主机网卡收到pod虚拟地址的报文时封装一层ip地址发送给另一台主机，另一台主机再解封装发现里面仍然是ip报文，根据ip判断是发送给自身虚拟pod的地址，从而实现各pod之间在同一虚拟网段中通信。</p><p>pod与service通信：通过iptables规则或者lvs规则进行通信。其规则由proxy生成。</p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>由上文可以知道，想要与pod通信需要先与service通信，而pod更新或者挂掉换新都会导致service规则的更新，这个过程需要通知master的API server进行事务处理。这里就有问题了，因为pod更新通知master那么master必然存储了大量的不必要的通知信息，这很占空间因此不可能存储在master本地，因此这里使用共享存储etcd。</p><p>etcd是键值存储的数据库系统，需要做成高可用集群，etcd通信一般使用https通信。etcd内部使用一个端口进行通信，外部使用另一个端口与master通信，这个过程都是https协议通信。</p><h4 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h4><p>在一个k8s集群中，将多个pod划分成不同的空间实现隔离效果，这个隔离是管理的隔离比如分成生成环境、开发环境等等，各个pod仍然可以正常通信不受影响。</p><h4 id="网络策略"><a href="#网络策略" class="headerlink" title="网络策略"></a>网络策略</h4><p>用于实现在网络层面上隔离各个名称空间，定义iptables规则来限制pod之间的访问。k8s虽然本身网络很复杂(三种网络)但是它自身不提供网络配置以及策略的解决方案，因此需要使用第三方插件如canel来实现网络配置和网络策略的设置。</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>kubernetes是一个有中心节点的集群，其架构为master/nodes模型。用户请求(启动容器等)通过API server发往master，master根据调度器(scheduler)分析各node节点资源，判断哪个适合完成用户请求的操作，接着将请求发给调度过的node上，node通过容器引擎(一般为docker)运行相关容器。</p><p><img src="/2020/01/30/k8s-1-%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/k8s%E6%9E%B6%E6%9E%84.jpg" alt></p><p>scheduler：工作在master的调度器。负责观测各node节点可供使用的CPU、RAM等资源，并根据用户申请所需要的资源量来判断将请求交给哪个node相应。调度时一般分成两步，第一步选出所有符合资源需求的node；第二步根据优选算法再挑选最符合的node进行调度。</p><p>controllers：控制器管理器。用于管理各控制器的健康状态。管理器自身基于master做冗余从而保证自身的健康。</p><p>pod：它是逻辑组件，是kubernetes的最小调度单位，有前端pod与后端pod等根据不同功用分配的类型。它是容器的封装，可以理解为docker中的多个容器共享一个网络名称空间实现的效果。pod内的多个容器除了共享网络名称空间外还共享存储卷。另外，虽然它可以组合多个容器，但是一般关联不大的容器不封装为一个pod，只有像日志记录容器和主服务容器可以建议封装在一个pod中。pod使用标签来实现不同pod的身份识别，从而可以统一控制一类pod，一般使用label selector来实现过滤。</p><p>replication controller：副本控制器，用于管理pod，可以实现pod调度。它也可以实现pod的版本滚动更新。常见的pod控制器有：Deployment(无状态)、StatefulSet(有状态)、Job(用于实现小功能，如删除数据)等。一般情况下不直接对pod进行调用而调用其控制器。</p><p>service：它是定义一系列pod的逻辑抽象，本质就是iptables规则或者lvs规则。它工作在一组pod之前，根据lvs实现负载均衡式的对pod的调度。考虑一种情况，当某个pod节点坏掉后需要新的pod替换，那么新的pod的ip地址、主机名等关键资源都将变动，那么如何才能让master无视这种变得来调用pod呢？service就是为解决此问题而提出的抽象概念，它通过label来识别不同的pod。service本身具有名称，可以根据集群内部的DNS pod实现解析，并且一旦service地址改变DNS会自动修改对应条目，使得pod客户端在下次申请资源时依旧正确连接service从而与后端pod进行交互。</p><p>node：物理机，通常成为Minion，主要运行多个pod。</p><p>kubelet：node的集群代理。工作在node节点，用于与master通信并接收执行各种任务的组件。它调用容器引擎如docker来管理容器。</p><p>proxy：node代理。负责随时与master的API server通信。因为每次node节点上的pod有变动时会主动通知API server生成一个事件，该事件会通知proxy创建新的service规则。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装一般有两种方式：</p><p>第一种方式是手动将k8s的master以及node节点的各个功能以守护进程的方式运行在主机上，这种方式需要全程手动参与，且要解决大量证书问题，很繁琐。</p><p>第二种方式是使用kubeadm部署，它将k8s本身也部署为pod，且各个master以及node只需要安装配置docker以及kubelet即可。前者是容器运行的必备引擎，后者是运行pod化容器的核心组件，这些pod都是静态pod。最后部署好flanner即可通信。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>节点网络：172.20.0.0/16</p><p>service网络：10.96.0.0/12</p><p>Pod网络：10.244.0.0/16，该网络为flannel默认网段</p><h4 id="配置master"><a href="#配置master" class="headerlink" title="配置master"></a>配置master</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置yum源，编辑/etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=kubernetes repo</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置docker-ce源，此处省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y docker-ce kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件/etc/sysconfig/kubelet，使得开启swap时不会出错</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--fail-swap-on=false"</span></span><br><span class="line"><span class="comment">#初始化init</span></span><br><span class="line">kubeadm init --pod-network=10.244.0.0/16 --service-cidr=10.96.0.0/12 --ignore-preflight-errors=Swap</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">上述命令会pull镜像到本地，可以先使用kubeadm config images pull预先拖取镜像</span><br><span class="line">安装成功后会提示建议执行的一系列指令，按照要求执行即可</span><br><span class="line">成功后最后一行会有一串命令用来使得别的node加入该k8s集群中，包括密钥认证等，需要保存好该指令</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载fanner镜像，从github上手册下载</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">执行上述命令后很快会显示create，但是并没有好，需要等待docker image有flannel镜像拉取成功并且名称空间中有对应节点才说明安装好</span><br><span class="line"><span class="comment">#查看kube-system名称空间节点</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h4 id="配置node"><a href="#配置node" class="headerlink" title="配置node"></a>配置node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将master的docker-ce.repo和kubernetes.repo复制过来</span></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y docker-ce kubelet kubeadm</span><br><span class="line"></span><br><span class="line"><span class="comment">#将master的/etc/sysconfig/kubelet配置文件复制过来</span></span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用之前保存的join命令加入k8s集群，需要指明--ignore-preflight-error=Swap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载fanner镜像，从github上手册下载</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">执行上述命令后很快会显示create，但是并没有好，需要等待docker image有flannel镜像拉取成功并且名称空间中有对应节点才说明安装好</span><br><span class="line"><span class="comment">#查看kube-system名称空间节点</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看状态，包括scheduler、controller、etcd</span></span><br><span class="line">kubectl get cs</span><br><span class="line"><span class="comment">#获取节点信息，显示详细信息</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"><span class="comment">#获取名称空间</span></span><br><span class="line">kubectl get ns</span><br><span class="line"><span class="comment">#查看pod信息，默认节点是default名称空间内的pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment">#列举所有service</span></span><br><span class="line">kubectl get services</span><br><span class="line"><span class="comment">#查看指定控制器</span></span><br><span class="line">kubectl get deployment</span><br><span class="line"><span class="comment">#查看指定标签</span></span><br><span class="line">kubectl get pods -l <span class="string">"release in (canary,beta,alpha)"</span></span><br><span class="line">kubectl get pods -l <span class="string">"release notin (canary,beta,alpha)"</span></span><br><span class="line">kubectl get pods -l release,app</span><br><span class="line">kubectl get pods -l release=stable,app</span><br><span class="line">kubectl get pods -l release!=stable,app</span><br><span class="line"></span><br><span class="line">--all-namespaces：显示所有名称空间</span><br><span class="line">-o wide：显示详细信息</span><br><span class="line">-l label1,laebl2：查看指定label的pod</span><br></pre></td></tr></table></figure><h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><p>创建并运行一个镜像，且创建指定pod控制器(deployment或者job)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--image=nginx<span class="comment">#使用指定镜像创建资源</span></span><br><span class="line">--replicas=5<span class="comment">#指定启动多少个pod资源</span></span><br><span class="line">--restart=Never<span class="comment">#容器结束不自动启动</span></span><br><span class="line">--port=80<span class="comment">#暴露哪个端口</span></span><br><span class="line">--dry-run=<span class="literal">true</span><span class="comment">#是否只执行命令不创建</span></span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交互式连入指定pod</span></span><br><span class="line">kubelet <span class="built_in">exec</span> -it pod_name -- /bin/sh</span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-n ns<span class="comment">#指明删除哪个名称空间下的资源</span></span><br><span class="line">-l name=label<span class="comment">#删除指定label的pod</span></span><br><span class="line">-f name.yaml<span class="comment">#删除指定资源清单定义的资源</span></span><br></pre></td></tr></table></figure><h4 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h4><p>调整指定deployment的pod个数，既可以增大也可以减小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas=5 deployment nginx-deploy</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#动态升级</span></span><br><span class="line">kubectl <span class="built_in">set</span> image deployment nginx-deploy nginx-deploy=docker_name/name:v2</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">第一个nginx-deploy表示控制器名称，即实例里第一命令创建的名称，第二个nginx-deploy表示容器名称</span><br><span class="line"><span class="comment">#查找指定容器对应详细信息，包括属于哪个deployment和镜像名称</span></span><br><span class="line">kubectl describe pods pods_name</span><br></pre></td></tr></table></figure><h4 id="rollout"><a href="#rollout" class="headerlink" title="rollout"></a>rollout</h4><p>回滚操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kuberctl rollout undo deployment nginx-deploy</span><br></pre></td></tr></table></figure><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><p>查看资源定义文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看某个资源如何定义，可以逐级查看</span></span><br><span class="line">kubectl explain pod.metadata</span><br></pre></td></tr></table></figure><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>从yaml文件或标准输入来加载资源对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据自定义的pod-demo.yaml来创建pod</span></span><br><span class="line">kubectl create -f pod-demo.yaml</span><br></pre></td></tr></table></figure><h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><p>显示一个或者多个资源对象的详细信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe 资源类型 资源名称</span><br></pre></td></tr></table></figure><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>查看容器的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs &lt;pod-name&gt;</span><br><span class="line"><span class="comment">#实时查看日志</span></span><br><span class="line">kubectl logs -f &lt;pod-name&gt;</span><br></pre></td></tr></table></figure><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><p>为资源打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl label &lt;type_name&gt; &lt;name&gt; KEY_1=VAL_1 KEY_2=VAL_2...</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">kubectl label pods pod-demo release=canary</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在master上创建一个pod镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx-deploy --image=nginx --replicas=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">默认使用deployment调度</span><br></pre></td></tr></table></figure><p>在master上创建一个service，需要指明是为哪个pod创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx-deploy --name=nginx --port=80 --target-port=80 --protocol=TCP</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">nginx-deploy就是上面创建的pod镜像</span><br><span class="line">--port指的是服务端口，即service_port；--target-port指的是容器端口，即pod_port</span><br><span class="line">创建好后其他pod即可访问该service名nginx来访问该service下的pod镜像</span><br><span class="line">注意直接以域名访问时需要用到CoreDNS来解析，必须创建一个pod客户端来访问，否则DNS检索时后缀补充会出问题</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看该service的详细信息，包括监听的标签，即关联的pod的标签名；还有关联pod的ip</span></span><br><span class="line">kubectl describe service nginx</span><br></pre></td></tr></table></figure><p>创建一个pod客户端来访问nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建名为client的pod镜像</span></span><br><span class="line">kubectl run client --image=busybox --replicas=1 -it --restart=Never</span><br></pre></td></tr></table></figure><p>删除nginx的pod后，会自动创建新的pod，自此简单的k8s已搭好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete nginx-xxx</span><br><span class="line"><span class="comment">#删除后查看发现已经重新创建pod，且名称后缀已经改变</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> kubectl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker详解</title>
      <link href="/2020/01/28/docker%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/28/docker%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>虚拟化技术可以实现将多台物理主机虚拟为一个逻辑主机或者将一台物理主机虚拟为多台逻辑主机，其中后者现在被广泛运用。虚拟化技术可以分为完全虚拟化和半虚拟化，其中完全虚拟化又分为硬件辅助虚拟化和软件辅助虚拟化。</p><a id="more"></a><h4 id="软件辅助全虚拟化"><a href="#软件辅助全虚拟化" class="headerlink" title="软件辅助全虚拟化"></a>软件辅助全虚拟化</h4><p>该虚拟化方式是将虚拟化管理器(VMM)运行在用户态中。当虚拟机里的程序需要执行系统调用时，CPU并不知道它是虚拟机的指令还是真正物理机的指令，因此需要VMM来实现对每条虚拟机指令的捕获和翻译，此时VMM充当一个中间人的角色，虚拟机通过VMM来调用真正的物理资源，而实际上是VMM来向物理机的内核申请使用物理资源。对于物理机内核来说，VMM只是一个用户空间的普通进程；对于虚拟机内核来说，它认为自己就是真正内核，这就是软件辅助虚拟化。这个过程由于需要VMM参与，导致其效率不高，现在逐渐被硬件辅助全虚拟化取代。</p><h4 id="硬件辅助全虚拟化"><a href="#硬件辅助全虚拟化" class="headerlink" title="硬件辅助全虚拟化"></a>硬件辅助全虚拟化</h4><p>该虚拟化是在CPU硬件层面支持虚拟化技术后实现的新技术。对于虚拟内核来说，只需要将标志位设置为虚拟状态，那么就可以直接在CPU上执行大部分指令，不需要VMM作转述。因为开启了虚拟化技术的CPU有两个新的执行状态，他们是Non-Root和Root。VMM运行在Root模式(装载在物理内核中，相当于本身就是物理内核)，虚拟机运行在Non-Root模式的Ring0状态，这就意味这它可以直接执行特权指令，不需要VMM转述，从而大大提高虚拟机的执行效率。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是虚拟化的一种方案，但它不是主机级别的虚拟化，而是应用级别的虚拟化。它将操作系统虚拟化，把物理上的操作系统虚拟为逻辑上的多个操作系统，不同的操作系统有自己的用户空间，用户空间相互隔离，彼此意识不到对方的存在，整个容器中只运行它本身一个进程。</p><h4 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h4><p>是内核实现的修改进程视图的机制，它实现了容器间资源的隔离。Namespaces包含种资源，分别是：Mount、UTS、IPC、PID、Network和User。每次创建并启动一个容器时，就指定了Namespaces的参数(通过clone()系统调用实现)，每个容器只能看到当前分配给他们的Namespaces内的内容。</p><table><thead><tr><th>namespace</th><th>系统调用参数</th><th>隔离内容</th></tr></thead><tbody><tr><td>UTS</td><td>CLONE_NEWUTS</td><td>主机名和域名</td></tr><tr><td>IPC</td><td>CLONE_NEWIPC</td><td>信号量、共享内存、消息队列等</td></tr><tr><td>PID</td><td>CLONE_NEWPID</td><td>进程编号</td></tr><tr><td>Network</td><td>CLONE_NEWNET</td><td>网络设备、端口、网络栈等</td></tr><tr><td>Mount</td><td>CLONE_NEWNS</td><td>文件系统挂载点</td></tr><tr><td>User</td><td>CLONE_NEWUSER</td><td>用户和组</td></tr></tbody></table><h4 id="Cgroup"><a href="#Cgroup" class="headerlink" title="Cgroup"></a>Cgroup</h4><p>cgroup，即Control group。该机制实现的是将系统资源分配到指定的内存中进程组上。和Namespaces类似，但是实现的目的是为了对各组进程进行统一的资源监控和限制(Namespces是为了实现隔离)。它将进程分组，将有限的资源对这些组进行分配。每个进程组可以再细分组，分配给该组的系统资源在组内共享。</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#extra仓库版本较老，使用镜像安装</span></span><br><span class="line"><span class="comment">#首先下载repo仓库进行本地制作，放在本地/etc/yum.repo.d/目录下</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#仓库中指向的仍然是docker官方，速度很慢，此处在vim中修改为清华镜像(全局替换)</span></span><br><span class="line">%s@https://download.docker.com/@https://mirrors.tuna.tsinghua.edu.cn/docker-ce/@</span><br><span class="line"><span class="comment">#更新本地repo缓存</span></span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment">#指向安装</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#若之前安装过extra仓库的docker，需要卸载如下包，否则会冲突导致docker-ce无法安装</span></span><br><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>docker配置文件为：/etc/docker/daemon.json，该文件初始并未创建，需要手动创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#编辑该文件，添加阿里云镜像加速，该链接在阿里云容器云上获取</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pjfb83d0.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如果docker已运行需要重载配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="image"><a href="#image" class="headerlink" title="image"></a>image</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker image COMMANDS</span><br><span class="line">build：根据Dockerfile创建一个镜像</span><br><span class="line"><span class="built_in">history</span>：显示image使用历史</span><br><span class="line">import：</span><br><span class="line">inspect：显示image的详细信息</span><br><span class="line">load：从标准输入或者归档文件创建一个image</span><br><span class="line">-i：指明输入文件</span><br><span class="line">ls：显示所有image</span><br><span class="line">prune：删除没有使用的image</span><br><span class="line">pull：从docker hub上拉去指定image</span><br><span class="line">push：将image推送到docker hub上，或指定的docker镜像服务器</span><br><span class="line">rm：删除指定镜像</span><br><span class="line">save：保存指定image到归档文件中</span><br><span class="line">-o：指明保存文件</span><br><span class="line">tag：创建一个image的tag标签</span><br></pre></td></tr></table></figure><h5 id="container"><a href="#container" class="headerlink" title="container"></a>container</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker container COMMANDS</span><br><span class="line">attach</span><br><span class="line">commit：将最上层的可写层创建为image的一层，相当于基于容器制作镜像</span><br><span class="line">cp：在本地文件系统和容器内的文件系统中复制文件</span><br><span class="line">create：根据image创建一个容器</span><br><span class="line">diff</span><br><span class="line"><span class="built_in">exec</span>：在容器中运行命令</span><br><span class="line"><span class="built_in">export</span></span><br><span class="line">inspect：显示容器的详细信息</span><br><span class="line"><span class="built_in">kill</span>：杀死一个运行的容器，相当于<span class="built_in">kill</span> -9</span><br><span class="line">logs：获取容器运行进程的日志</span><br><span class="line">ls：显示容器</span><br><span class="line">pause：暂停所有容器</span><br><span class="line">port</span><br><span class="line">prune：删除所有停止状态的容器</span><br><span class="line">rename：重命名容器</span><br><span class="line">restart：重启容器</span><br><span class="line">rm：删除容器</span><br><span class="line">run：在容器中运行命令，需要指明image</span><br><span class="line">-i：保持交互式连接</span><br><span class="line">-t：启动终端</span><br><span class="line">start：启动容器</span><br><span class="line">stats</span><br><span class="line">stop：停止运行的容器，相当于<span class="built_in">kill</span> -15</span><br><span class="line">top：基于资源消耗比率显示容器</span><br><span class="line">unpause：继续暂停的容器</span><br><span class="line">update</span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><h5 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h5><p>Docker镜像含有启动容器所需要的文件系统及其内容。因此，其用于创建并启动docker容器。</p><p>Docker镜像采用分层构建机制，最底层为bootfs，上层为rootfs</p><ul><li>bootfs：用于系统引导的文件系统，包括bootloader和kernel，容器启动完成后会被卸载以节约资源</li><li>rootfs：位于bootfs之上，表现为docker容器的根文件系统。在传统模式中系统启动时内核挂载rootfs时会首先将其挂载为只读模式，完成一系列自检操作后将其重新挂载为读写模式。而在docker中，rootfs由内核挂载为只读模式，而后通过联合挂载技术额外挂载一个可写层。因此由镜像创建容器时，实际就是在基础镜像层上添加一个可写的image层，所有的写操作都在此层。因此在删除容器时实际也是删除该可写image层，源镜像保持不变。</li></ul><p>一个完整的镜像是由多个镜像分层联合挂载而来。bootfs作为最底层在引导出用户空间的根文件系统后就自动卸载。之后有Base image基本镜像层，该层主要是封装各种操作系统；其次是各种应用程序层，比如vim编辑器层、nginx服务层等。这些多个镜像一层一层叠加形成完整的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从指定镜像仓库中拉取镜像</span></span><br><span class="line">docker pull &lt;registry&gt;[:&lt;port&gt;]/[&lt;namespace&gt;/]&lt;name&gt;:&lt;tag&gt;</span><br><span class="line">&lt;registry&gt;[:&lt;port&gt;]：指明仓库服务器和端口(默认443https)，如果是docker hub则可省略(一般都省略)</span><br><span class="line">&lt;namespace&gt;：指明用户空间(可以是用户名、组织名等)，如果是顶层仓库可以省略</span><br><span class="line">&lt;name&gt;:&lt;tag&gt;：仓库名和标签名</span><br></pre></td></tr></table></figure><h5 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h5><p>镜像的制作有三种途径：</p><p>基于容器的制作，即在<strong>运行</strong>的容器中使用commit命令将镜像最上层的可写层合并到原始镜像中变成新镜像；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建镜像</span></span><br><span class="line">docker commit [options] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line">[REPOSITORY[:TAG]]：指定仓库名和标签名，不指明则为none</span><br><span class="line">-p：在制作镜像时暂停容器</span><br><span class="line"></span><br><span class="line"><span class="comment">#打标签</span></span><br><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录docker仓库，阿里云比较快</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment">#push镜像，如果不是dockerhub需要指明服务器地址、仓库名等</span></span><br><span class="line">docker push IMAGE_NAME[:TAG]</span><br></pre></td></tr></table></figure><p>基于Dockerfile的build命令制作；</p><p>基于Docker Hub的automated build制作，它本质也是基于Dockerfile来制作，它需要监视联合github，每次用户对Dockerfile的修改先推送到github上，然后Docker Hub会不断监视Github是否发生改动，如果有改动就拉取过来基于Dockerfile进行镜像制作。</p><h5 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先登录Registry，默认不指定SERVER为docker hub</span></span><br><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line">-p password：指明密码</span><br><span class="line">-u username：指明用户名</span><br><span class="line">SERVER：指定Registry地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#给指定镜像打标签，注意username必须是顶层仓库名，如果不是顶层仓库还需要依次指明仓库名</span></span><br><span class="line">docker tag image username/repository:tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送，按照打标签的格式推上去即可</span></span><br><span class="line">docker push username/repository:tag</span><br></pre></td></tr></table></figure><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>docker网络通信主要有四种方式：bridge、host、none、container</p><table><thead><tr><th>模式</th><th>解释</th></tr></thead><tbody><tr><td>Bridge</td><td>使用虚拟网卡和虚拟交换机实现</td></tr><tr><td>Host</td><td>namespace不分配网络资源，公用物理主机网络资源</td></tr><tr><td>None</td><td>没有网卡，不能进行网络通信</td></tr><tr><td>Container</td><td>和已存在的运行的容器共享网络资源</td></tr></tbody></table><h5 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h5><p>该模式是docker的默认模式，它使用模拟网卡和模拟交换机实现。可以理解为将网卡分成两半即每个网卡都是成对出现的，一半在docker上，一半在软件模拟的交换机上(网卡名称一样)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟的虚拟交换机(有ip时也当作模拟网卡)，在物理机使用如下命令查看</span></span><br><span class="line"><span class="comment">#可以看出编号为3的docker0的设备即为虚拟交换机，编号为9的vethcf37621@if8的网卡设备为虚拟网卡，且该设备连接在docker0上</span></span><br><span class="line">ip link show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:b1:56:1d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:6c:8a:31:24 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">9: vethcf37621@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default </span><br><span class="line">    link/ether 66:17:df:67:22:31 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    </span><br><span class="line"><span class="comment">#查看docker容器的虚拟网卡</span></span><br><span class="line"><span class="comment">#其中eth0@if9表示的就是上述vethcf37621@if8的另一半虚拟网卡，相当于连接到docker0上(类似于一根网线)</span></span><br><span class="line">ip link show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">8: eth0@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure><p>另外，在bridge模式下，不仅容器间可以正常通信(处于同一个虚拟交换机上)，容器也可以同外部主机进行通信。实现方法是通过iptables的nat规则实现SNAT，使用如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables -t NAT -vnL</span><br><span class="line">...</span><br><span class="line">Chain POSTROUTING (policy ACCEPT 567 packets, 44852 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述条目标明从本机发出报文时，如果不是发往docker0网卡的且源地址为172.17网段的，都要做源地址转换，转换后与外界通信时使用的是物理机的网卡信息</span></span><br></pre></td></tr></table></figure><p>最后，既然本机的docker容器可以访问外网地址，那么外网地址是否可以访问本机呢，答案是肯定的。当本机启动一个进程后(监听在某个端口上)，这是会添加一条新的iptables规则，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行nginx的docker映射到本地80端口，前者为主机端口，后者为容器内端口，-d表示后台运行docker</span></span><br><span class="line">docker run -p 80:80 -d nginx</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">iptables -t nat -vnL</span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.17.0.2:80</span><br><span class="line">    </span><br><span class="line"><span class="comment">#可以看出，任何以目标端口为80的请求都会做DNAT，将其地址改为172.17.0.2，因此可以实现通信</span></span><br><span class="line"><span class="comment">#也可以使用如下命令查看端口映射</span></span><br><span class="line">docker port c6849e28cea7</span><br></pre></td></tr></table></figure><h5 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h5><p>该模式下，docker和物理主机共用网络资源，换句话说没有对docker容器进行namespace的网络资源隔离。通信的话就直接使用物理网卡进行通信即可。</p><h5 id="None"><a href="#None" class="headerlink" title="None"></a>None</h5><p>不具有网络功能，主要用于实现一些计算等不用网络的docker容器。</p><h5 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h5><p>其实和host很像。但是该模式并不是没有隔离网络资源，而是仅设置为该模式的两个共享网络资源，即共享的是分配的namespace的网络资源，而host是共享的物理主机的资源，根本不存在namespace概念(单指网络，其他资源依旧隔离)。可以理解为一台主机上的两各进程间通信，但是有一定隔离。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示nginx容器和infracon容器使用Container模式网络</span></span><br><span class="line">docker run --name nginx --network container:infracon -it busybox</span><br></pre></td></tr></table></figure><h5 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建虚拟交换机mybr1</span></span><br><span class="line">docker network create -d bridge --subnet <span class="string">"192.163.10.0/24"</span> --gateway <span class="string">"192.168.10.1"</span> mybr1</span><br><span class="line"><span class="comment">#运行docker时加入自定义的mybr1</span></span><br><span class="line">docker run -it --network mybr1 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#若想要不同虚拟交换机之间的docker能够通信，只需要开启物理机的核心转发即可</span></span><br><span class="line"><span class="comment">#注意，iptables会添加很多规则，若想实验可以先保存规则再删掉</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><h5 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h5><p>此处使用ip netns命令模拟网络名称空间的设定。此处只是将Net的namespace隔离开，其他五个namespace资源全部共享。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加网络名称空间ns1和ns2</span></span><br><span class="line">ip netns add ns1</span><br><span class="line">ip netns add ns2</span><br><span class="line"><span class="comment">#查看网络空间</span></span><br><span class="line">ip netns list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ns1和ns2内部的网卡，只能看到一个lo回环设备，无网卡</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ifconfig -a</span><br><span class="line"><span class="comment">#创建虚拟网卡对</span></span><br><span class="line">ip link add name veth1.1 <span class="built_in">type</span> veth peer name veth1.2</span><br><span class="line"><span class="comment">#查看创建的虚拟网卡对，可以从名字看出是成对的网卡</span></span><br><span class="line">ip link show</span><br><span class="line">24: veth1.2@veth1.1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 4e:20:59:46:17:81 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">25: veth1.1@veth1.2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether a2:a8:b7:cb:4d:8d brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line"><span class="comment">#将成对的两个网卡分别移动到不同的netns中</span></span><br><span class="line">ip link <span class="built_in">set</span> dev veth1.2 netns ns1</span><br><span class="line">ip link <span class="built_in">set</span> dev veth1.1 netns ns2</span><br><span class="line"><span class="comment">#激活物理机网卡veth1</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ifconfig veth1.1 192.168.163.120/24 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ifconfig veth1.2 192.168.163.121/24 up</span><br></pre></td></tr></table></figure><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><p>修改默认docker0桥地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改/etc/docker/daemon.json，只需要添加bip即可，其他会自动添加，多个项之间使用","隔开</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"bip"</span>: <span class="string">"192.168.163.2/24"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改docker服务器监听地址，默认是基于本机/var/run/docker.sock通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑/etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"hosts"</span>: [<span class="string">"tcp://0.0.0.0:2375"</span>,<span class="string">"unix:///var/run/docker.sock"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#另一台主机使用-H选项指明docker服务器地址</span></span><br><span class="line">docker -H IP_ADDR COMMANDS</span><br></pre></td></tr></table></figure><h4 id="存储卷"><a href="#存储卷" class="headerlink" title="存储卷"></a>存储卷</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>docker镜像由多个只读层叠加而成，启动容器时docker会加载只读镜像层并在镜像层顶部添加一个读写层，用户所有的对镜像的写操作都在此层中生效。如果运行中的容器修改了一个已存在的文件，那该文件将会从读写层下面的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写层中该文件的副本所隐藏，这就是所谓的<strong>写时复制</strong>机制。另外，用户在读写层对文件进行删除操作时，只是相当于在该文件上做了删除标记，此后在读写层该文件对用户不可见，在只读层该文件依然存在。</p><p>由上可知，docker容器在关闭后全部更改都会丢失，因此会存在容器间数据共享不便、删除容器数据丢失、不利于分布式容器集群管理等问题。因此，为解决以上问题提出了<strong>卷</strong>的概念。实际上卷是容器上的一个或多个目录，此目录与物理机上的某个目录存在绑定关系，这样即使容器删除后，其数据依然存在本地，下次再启动容器时该数据依然存在。</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>docker中有两种类型的卷，每种类型都在容器中存在一个挂载点，但其物理主机上的位置有所不同</p><ul><li>Bind mount volume：容器和物理机的目录都需要手动指定</li><li>Docker-managed volume：容器内的目录手动指定，物理机的目录由docker管理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker管理卷，指明容器内目录为/data</span></span><br><span class="line">docker run -it -v /data --name bbox1 busybox</span><br><span class="line"><span class="comment">#Bind挂载，指明物理机目录和容器内目录</span></span><br><span class="line">docker run -it -v HOSTDIR:VOLUMEDIR --name bbox2 busybox</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看挂载属性</span></span><br><span class="line">docker inspect -f &#123;&#123;.Mounts&#125;&#125; bbox1</span><br><span class="line">docker inspect -f &#123;&#123;.Mounts&#125;&#125; bbox2</span><br></pre></td></tr></table></figure><p>另外，可以实现用一个容器单独作为卷，其他容器绑定在该容器上。在实际使用中，使用一个专门做基础容器镜像的容器来代替此处自建的infracon，它只需要实现被其他容器关联即可，不需要启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --network container:infracon --volumes-from infracon -it busybox</span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>前文创建镜像时提到过dockerfile，它是一个文本描述文件，其内包含了一条条指令来描述如何构建一个镜像文件。编写dockerfile时，需要创建一个目录将dockerfile文件放入该目录中，之后dockerfile内指令需要的所有文件都放到该目录或者该目录的子目录中。.dockerignore文件可以指定哪些文件不需要被build进镜像中。</p><p>不同的关键字定义不同的指令功能，dockerfile本身对字符大小写不敏感，但是一般关键字默认使用全大写。</p><h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><p>FROM指令是dockerfile文件第一个非注释行，用于指明镜像文件的构建过程的基准镜像，后续的指令都运行于此基准镜像所提供的运行环境之上。默认情况下docker build时会在docker主机上查找指定的镜像文件，在其不存在时默认从docker hub上拉取镜像文件，也可以从指定的仓库拉取镜像文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">FROM &lt;repository&gt;[:&lt;tag&gt;]</span><br><span class="line">&lt;repository&gt;：基准镜像名称</span><br><span class="line">&lt;tag&gt;：基准镜像的标签，默认为latest</span><br><span class="line"><span class="comment">#另外一种语法</span></span><br><span class="line">FROM &lt;repository&gt;@&lt;digest&gt;</span><br><span class="line">&lt;digest&gt;：指明基准镜像的<span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h5 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h5><p>用来取代MAINTAINER关键字。它是用来为镜像添加元数据，如镜像名称、制作时间、作者等信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt;...</span><br></pre></td></tr></table></figure><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>用于将dockerfile目录下的文件复制到镜像文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">COPY &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">&lt;src&gt;：要复制的源文件或目录，支持使用通配符</span><br><span class="line">&lt;dest&gt;：目标路径，即正在创建的镜像文件系统路径；建议为&lt;dest&gt;使用绝对路径，否则使用关键字WORKDIR指明的路径</span><br><span class="line"><span class="comment">#另一种语法，用于路径中有空白字符</span></span><br><span class="line">COPY [<span class="string">"&lt;src&gt;"</span>...<span class="string">"&lt;dest&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">&lt;src&gt;必须是build上下文中的路径(即dockerfile文件所在的目录中的文件)，不能是其父目录中的文件</span><br><span class="line">如果&lt;src&gt;是目录，则其内部文件或子目录会被递归复制，但&lt;src&gt;目录自身不会被复制</span><br><span class="line">如果指定了多个&lt;src&gt;，或在&lt;src&gt;中使用通配符，则&lt;dest&gt;必须是一个目录且必须以/结尾指明是目录</span><br><span class="line">如果&lt;dest&gt;不存在，会自动创建(包括其父目录)</span><br></pre></td></tr></table></figure><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>与COPY类似，但是ADD支持tar文件打包和url文件联网下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line"><span class="comment">#另一种语法，用于路径中有空白字符</span></span><br><span class="line">ADD [<span class="string">"&lt;src&gt;"</span>...<span class="string">"&lt;dest&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">COPY有的特性ADD都有</span><br><span class="line">如果&lt;src&gt;为URL且&lt;dest&gt;不以/结尾，则&lt;src&gt;指定的文件将被下载并创建为&lt;dest&gt;；如果&lt;dest&gt;以/结尾，则保存至其目录下</span><br><span class="line">如果&lt;src&gt;是一个本地系统上的压缩格式的tar文件，其将会被展开成目录放在&lt;dest&gt;下；如果是网上下载的tar文件则不会展开</span><br></pre></td></tr></table></figure><h5 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h5><p>用于为dockerfile中所有的RUN、CMD、ENTRYPOINT、COPY、ADD指明工作目录，可以多次指定且只对该关键字后的指令有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">WORKDIR &lt;dirpath&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">WORKDIR可以出现多次，若其为相对路径则是相对上一个WORKDIR的相对路径</span><br><span class="line">WORKDIR可以调用由ENV指定定义的变量</span><br></pre></td></tr></table></figure><h5 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h5><p>用于在镜像中创建挂载卷，用来挂载物理主机或者其他容器的卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">VOLUME &lt;mountpoint&gt;</span><br><span class="line"><span class="comment">#另一种语法，用于路径中有空白字符</span></span><br><span class="line">VOLUME [<span class="string">"&lt;mountpoint&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">此处只能指定docker容器中的路径，不能手动指定物理主机的挂载路径，使用的是docker管理的挂载方式</span><br></pre></td></tr></table></figure><h5 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h5><p>用于为容器打开指定要监听的端口以实现与外部通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">EXPOSE &lt;port&gt;[/&lt;protocol&gt;] [port][/&lt;protocol&gt;]...</span><br><span class="line">&lt;protocol&gt;：指定传输层协议，默认为tcp协议</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">镜像并不会直接暴露出可暴露的端口，而是当run时使用-P选项才暴露所有设定的端口</span><br></pre></td></tr></table></figure><h5 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><p>用于为镜像定义所需要的环境变量，并可被dockerfile文件中定义于其后的其他指令(如ENV、ADD、COPY等)调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法，一次只能设置一个变量</span></span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt;</span><br><span class="line"><span class="comment">#另一种语法，一次可以设置多个变量，多个变量可以使用\续行来定义</span></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt; ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用格式</span></span><br><span class="line"><span class="variable">$var_name</span></span><br><span class="line"><span class="variable">$&#123;var_name&#125;</span></span><br></pre></td></tr></table></figure><h5 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><p>用于指定docker build过程中运行的程序，可以是多条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">RUN &lt;<span class="built_in">command</span>&gt; &amp;&amp; &lt;<span class="built_in">command</span>&gt;...</span><br><span class="line"><span class="comment">#另一种语法</span></span><br><span class="line">RUN [<span class="string">"&lt;executable&gt;"</span>,<span class="string">"&lt;param&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">RUN命令执行的一般是shell命令，其以<span class="string">"/bin/sh -c"</span>来执行这些命令</span><br><span class="line">定义多个RUN时会依次执行</span><br><span class="line">第一种语法格式默认使用shell来解释执行，因此其父进程为shell，则其id不为1，不能接收unix信号</span><br><span class="line">第二种语法格式默认使用内核<span class="built_in">exec</span>来执行，不支持shell特性如通配等，但可以接收unix信号，若想以shell执行可以使用如下命令</span><br><span class="line">RUN [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>,<span class="string">"&lt;executable&gt;"</span>,<span class="string">"&lt;param&gt;"</span>]</span><br></pre></td></tr></table></figure><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>类似于RUN，不过该关键字定义的命令运行在docker run过程中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">CMD &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment">#语法2</span></span><br><span class="line">CMD [<span class="string">"&lt;executable&gt;"</span>,<span class="string">"&lt;param&gt;"</span>]</span><br><span class="line"><span class="comment">#语法3</span></span><br><span class="line">CMD [<span class="string">"&lt;param1&gt;"</span>,<span class="string">"&lt;param2&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">同RUN</span><br><span class="line">该指令运行于镜像启动为容器时默认要执行的命令，其执行结束后容器也会终止，可以被run选项覆盖</span><br><span class="line">在dockerfile中可以定义多条CMD，但仅最后一条会生效</span><br><span class="line">第三种语法格式用于为ENTRYPOINT指令提供默认参数</span><br></pre></td></tr></table></figure><h5 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><p>类似于CMD指令的功能，用于为容器指定默认运行程序，从而使容器像一个单独的可执行程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ENTRYPOINT &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment">#语法2</span></span><br><span class="line">ENTRYPOINT [<span class="string">"&lt;executable&gt;"</span>,<span class="string">"&lt;param1&gt;"</span>,<span class="string">"&lt;param2&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">同CMD</span><br><span class="line">一般的例如CMD命令，在run执行时可以自己使用命令替换掉，但是ENTRYPOTIN不行，自己后写的命令只会被当作它的参数来运行</span><br><span class="line">同时定义CMD和ENTRYPOINT时，CMD会被当作ENTRYPOINT的参数</span><br></pre></td></tr></table></figure><h5 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h5><p>用于指定运行镜像时或运行dockerfile种任何RUN、CMD、ENTRYPOINT等指令指定的程序时的用户名或UID。默认情况下，container的运行身份为root用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">USER &lt;UID&gt;|&lt;UserName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">指明的用户需要在/etc/passwd中有该用户的信息</span><br><span class="line">root用户不需要上述条件，因为root用户属于内核</span><br></pre></td></tr></table></figure><h5 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h5><p>用于检查容器工作是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法，运行脚本检查</span></span><br><span class="line">HEALTHCHECK [options] CMD <span class="built_in">command</span></span><br><span class="line">options：</span><br><span class="line">--interval=DUARATION<span class="comment">#间隔时间，默认30s</span></span><br><span class="line">--timeout=DURATION<span class="comment">#超时时长，默认30s</span></span><br><span class="line">--start-period=DURATION<span class="comment">#run之后等待主进程启动的时间，默认0s</span></span><br><span class="line">--retries=N<span class="comment">#检查次数，默认3次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#健康检测状态返回值</span></span><br><span class="line">0：表示容器健康</span><br><span class="line">1：表示不健康</span><br><span class="line">2：保留位，暂不使用</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">通常健康检测时使用CMD配合命令检测，最后加个||<span class="built_in">exit</span> 1即可，如果正常则不会执行<span class="built_in">exit</span> 1，如果不正常会执行<span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><h5 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h5><p> 用于定义默认的shell环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">SHELL [<span class="string">"executable"</span>,<span class="string">"parameters"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">默认linux为：</span><br><span class="line">SHELL [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line">默认windows为：</span><br><span class="line">SHELL [<span class="string">"cmd"</span>,<span class="string">"/S"</span>,<span class="string">"/C"</span>]</span><br></pre></td></tr></table></figure><h5 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h5><p>用于定义变量，但指令只在build过程使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ARG &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">可以在build时使用--build-arg &lt;varname&gt;=&lt;value&gt;来设置</span><br></pre></td></tr></table></figure><h5 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h5><p>用于在dockerfile中定义一个触发器，当该镜像文件被别人作为基础镜像文件时会执行该指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ONBUILD &lt;INSTRUCTION&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">ONBUILD不能自我嵌套</span><br><span class="line">ONBUILD中最好不要使用ADD或COPY指令，因为无法判断另一个制作镜像的人是否有指定的文件路径</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>实现nginx配置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"><span class="keyword">ENV</span> NGX_DOC_ROOT=<span class="string">'/data/web/html/'</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> entrypoint.sh /bin/</span></span><br><span class="line"><span class="comment">#-g表示运行在前台，daemon off表示不使用守护进程运行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/sbin/nginx"</span>,<span class="string">"-g"</span>,<span class="string">"daemon off;"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/entrypoint.sh"</span>]</span></span><br><span class="line"><span class="comment">#上面两个组合起来相当于执行 /bin/entrypoint.sh /usr/sbin/nginx -g daemon off</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#entrypoint.sh</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cat &gt; /etc/nginx/conf.d/www.conf &lt;&lt; EOF</span><br><span class="line">server &#123;</span><br><span class="line">server_name $&#123;HOSTNAME&#125;;</span><br><span class="line">listen $&#123;IP:-<span class="number">0.0</span>.<span class="number">0.0</span>&#125;:$&#123;PORT:-<span class="number">80</span>&#125;;</span><br><span class="line">root $&#123;NGX_DOC_ROOT:-/usr/share/nginx/html&#125;;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#由于CMD定义的变成该脚本的参数，执行此命令就是将参数当作命令执行，从而使得nginx变成id为1的进程</span></span><br><span class="line">exec <span class="string">"$@"</span></span><br></pre></td></tr></table></figure><h4 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h4><p>Registry用于保存docker镜像，包括镜像的层次结构和元数据。用户可以自建Registry，也可以使用默认的Dockers hub</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li>Sponsor Register：第三方Registry，共客户和docker社区使用</li><li>Mirror Registry：第三方Registry，只让客户使用</li><li>Vendor Registry：由发布docker镜像的供应商提供的Registry</li><li>Private Registry：通过设有防火墙和额外的安全层的私有实体提供Registry</li></ul><h5 id="搭建私有Registry"><a href="#搭建私有Registry" class="headerlink" title="搭建私有Registry"></a>搭建私有Registry</h5><p>此处使用harbor来搭建私有Registry，它有良好的UI界面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装docker-compose，这是一个用于单机管理和运行多个docker容器的工具</span></span><br><span class="line">yum install -y docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处省略harbor下载和解压缩，一般将其解压缩到/usr/local/下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置harbor.conf</span></span><br><span class="line"><span class="comment">#设置ip或主机名</span></span><br><span class="line">hostname = 192.168.163.132</span><br><span class="line"><span class="comment">#访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span></span><br><span class="line">ui_url_protocol = http</span><br><span class="line"><span class="comment">#设置最大子进程数，一般小于等于cpu物理核心数</span></span><br><span class="line">max_job_workers = 3</span><br><span class="line"><span class="comment">#设置管理密码</span></span><br><span class="line">harbor_admin_password = Harbor12345</span><br><span class="line"><span class="comment">#配置相关数据库</span></span><br><span class="line">db_password = root123</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">本地搭建的私有Registry后会不允许你上传和下载操作，因为docker默认使用https协议，即使你私建CA也无法获取docker信任，因此在此处让docker忽略https安全选项，在/etc/docker/daemon.json中定义即可</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"insecure-registries"</span>: [<span class="string">"10.0.86.193"</span>]</span><br><span class="line">&#125;</span><br><span class="line">另外，如果需要远程登录docker服务器，那么还需要指定在unit file中的ExecStart处添加 –insecure-registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装，实际就是根据脚本执行docker-compose命令，命令配置文件就是docker-compose.yml</span></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动|停止服务</span></span><br><span class="line">docker-compose start|stop</span><br></pre></td></tr></table></figure><h4 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h4><p>默认docker不限制资源的使用，即docker可以使用物理机的所有资源。</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-m：限制容器可用最大物理内存大小</span><br><span class="line"><span class="comment">#注意，在容器中使用free命令不是真的swap空间大小</span></span><br><span class="line">--memory-swap：容器可以与磁盘交互的大小，但算法比较特殊，它的数值不代表真的swap大小</span><br><span class="line">--oom-kill-disable：设置<span class="literal">true</span>时表示禁止被OOM机制(内存不足)杀死</span><br><span class="line">--memory-swapiness：设置使用swap的倾向性，0~100，0表示能不用就不用(不是禁用)，100表示能用就用</span><br></pre></td></tr></table></figure><table><thead><tr><th>–memory-swap</th><th>–memory/-m</th><th>功能</th></tr></thead><tbody><tr><td>正数S</td><td>整数M</td><td>总大小为S，swap为S-M，物理内存为M</td></tr><tr><td>0</td><td>整数M</td><td>相当于未设置swap</td></tr><tr><td>unset</td><td>整数M</td><td>若主机(docker host)启用了swap，则容器可用swap=2*M</td></tr><tr><td>-1</td><td>整数M</td><td>同上，容器可使用最大至主机上的所有swap空间的swap资源</td></tr></tbody></table><h5 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--cpu-shares：指定cpu分配比率</span><br><span class="line">--cpu=&lt;value&gt;：指明cpu核心数使用，可以为小数</span><br></pre></td></tr></table></figure><h5 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h5><p>压测一般使用镜像来测试，在docker hub上搜索stress找一个即可，此处不进行演示。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix详解</title>
      <link href="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="监控对象"><a href="#监控对象" class="headerlink" title="监控对象"></a>监控对象</h4><p>主机、交换机、路由器等</p><a id="more"></a><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p>采样指的是周期性地获取某个关注指标相关的数据。</p><p>采样通道，即监控系统通过什么途径获取被监控主机的信息。一般有如下几种：</p><ul><li>ssh/telnet</li><li>agent/master，即在被监控主机上部署应用程序</li><li>IPMI，intel监控接口</li><li>SNMP，简单网络监控协议，通常用于交换机路由器等</li><li>JMX，java监控系统，主要用于JVM虚拟机的监控</li></ul><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>即监控获得的数据和数据的存储方式。</p><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><ul><li>历史数据，指每次采样的结果，保存时间周期较短</li><li>趋势数据，指聚合数据结果(最大值、最小值等)，保存时间周期较长</li></ul><h5 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h5><ul><li>关系型数据库：Mysql、Oracle等</li><li>RRD：轮询数据库，类似一个环形文件系统，保存指定量或者时长的数据后就直接覆盖之前数据继续存储</li><li>非关系型数据库：redis等</li></ul><h4 id="报警"><a href="#报警" class="headerlink" title="报警"></a>报警</h4><p>邮件、短信、微信、电铃等。只要能通过脚本实现即可。</p><h3 id="zabbix"><a href="#zabbix" class="headerlink" title="zabbix"></a>zabbix</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>数据采样：snmp、agent、impl、jmx</p><p>报警：支持步进式升级报警</p><p>数据存储：mysql</p><p>展示：php程序，支持绘图，滑动显示等</p><p>其他：支持监控模板定义，可适配多台主机；支持网络自动发现；支持分布式监控；支持基于API的二次开发</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/C:%5CUsers%5CFrdqy%5CDesktop%5C%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%5C%E5%B7%B2%E5%AE%8C%E6%88%90%5Cpicture%5Cjiagou.jpg" alt></p><p>Zabbix server：服务端监控程序(守护进程)，负责接收agent发送的报告信息；所有配置统计数据等均由其组织进行；监听在某个端口</p><p>Zabbix proxy：监控代理，一般用于分布式监控系统中。代理接收当前分布式环境中的数据后统一发送给server</p><p>Zabbix database：存储监控信息的数据库；也存储配置信息；常用Mysql</p><p>Zabbix web GUI：用于展示监控信息的web页面</p><p>Zabbix agentd：部署在被监控主机上的守护进程，负责收集其本地数据并发往server端或proxy端</p><p>Zabbix sender：命令行工具，用于在agent端测试能否向server端发送数据</p><p>Zabbix get：命令行工具，用于在server端向agent端拉取数据</p><h4 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h4><ul><li>Agent：客户端模式，可分为主动(active)和被动(passive)模式</li><li>SNMP：简单网络管理协议，主要有get、set、trap操作(agent向server主动通信)</li><li>IPMI：intel平台提供的智慧平台管理接口，用于监测物理特性(cpu温度等)，需要服务器提供硬件层面的接口</li><li>JMX：Java管理拓展，用于通过java自己的接口对java程序进行监控。在zabbix使用中，需要使用额外的程序包帮助实现</li></ul><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/%E6%9C%AF%E8%AF%AD.png" alt></p><p>Poller：server端向agent端索要数据的动作</p><p>host：要监控的网络设备，可由IP或DNS名称指定。</p><p>host group：主机组。即host的逻辑容器。包含主机和模板，但同一个组内的主机和模板不能互相连接；主机组通常在给用户或用户组指派监控权限时使用。</p><p>item：监控项。一个特定监控指标的相关数据，这些数据来自被监控对象。每个item由”key”标识。</p><p>application：应用。即一组item的集合。</p><p>trigger：触发器。即一个表达式，用于判断监控对象某特定item内所接收到的数据是否在合理范围内，超过合理范围时，触发器状态从”OK”转化为”Problem”，反之亦然。</p><p>event：事件。由触发器触发的事件。例如触发器状态转变、新的agent上线等。</p><p>action：动作。指对于特定事件的处理方式。通常由触发器触发某事件后执行某动作。</p><p>escalation：报警升级。发送警报或执行远程命令的自定义方案，如每隔5分钟发一次警报，共发送5次。</p><p>media：媒介。发送通知的手段或通道，如Email等。</p><p>notification：通知，通过选定的媒介向用户发送的有关某事件的信息。</p><p>remote command：远程命令。即预定义的命令，可在被监控主机处于某一特定条件下时自动执行。</p><p>template：模板。用于快速定义被监控主机的预设条目集合，通常包含item、trigger、graph、screen、application以及low-level discovery rule；模板可之间连接至单个主机。</p><p>web scenario：web场景。用于检测web站点可用性的一个或多个HTTP请求。</p><p>frontend：前端。Zabbix的web接口。</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>安装配置mysql；设置zabbix database</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装mariadb</span></span><br><span class="line">yum install mariadb-server -y</span><br><span class="line"><span class="comment">#编辑/etc/my.cnf，在[mysqld]字段下添加</span></span><br><span class="line"><span class="comment">#不进行域名反解和关闭单独表空间</span></span><br><span class="line">skip_name_resolve=ON</span><br><span class="line">innodb_file_per_table=ON</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line">create database zabbix charset <span class="string">'utf8'</span>;</span><br><span class="line"><span class="comment">#授权用户</span></span><br><span class="line">grant all on zabbix.* to <span class="string">'zbxuser'</span>@<span class="string">'%'</span> identified by <span class="string">'dqy751421'</span>;</span><br></pre></td></tr></table></figure><p>安装zabbix server程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zabbix</span><br></pre></td></tr></table></figure><p>导入zabbix数据库脚本，生成数据库文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -uzbxuser -pdqy751421 zabbix</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入/usr/share/zabbix-mysql目录下的三个文件创建数据表(上面已提前创建数据库)</span></span><br><span class="line">mysql -uzbxuser -pdqy751421 zabbix &lt; /usr/share/zabbix-mysql/schema.sql</span><br><span class="line">mysql -uzbxuser -pdqy751421 zabbix &lt; /usr/share/zabbix-mysql/images.sql</span><br><span class="line">mysql -uzbxuser -pdqy751421 zabbix &lt; /usr/share/zabbix-mysql/data.sql</span><br></pre></td></tr></table></figure><p>配置文件修改DB相关值即可启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DBHost=localhost<span class="comment">#指明数据库地址</span></span><br><span class="line">DBName=zabbix<span class="comment">#指明数据库名</span></span><br><span class="line">DBUser=zbxuser<span class="comment">#指明数据库用户</span></span><br><span class="line">DBPassword=dqy751421<span class="comment">#指明数据库密码</span></span><br><span class="line">DBPort=3306<span class="comment">#指明mysql数据库端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动，监听10051端口</span></span><br><span class="line">systemctl start zabbix-server</span><br></pre></td></tr></table></figure><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>配置文件：/etc/zabbix/zabbix_server.conf</p><p>Unit File：zabbix-server.service</p><h5 id="zabbix-server配置"><a href="#zabbix-server配置" class="headerlink" title="zabbix server配置"></a>zabbix server配置</h5><p>使用192.168.163.132作为server端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/zabbix/zabbix_server.conf</span></span><br><span class="line"><span class="comment">#注意初始时数据库相关配置都没有配置，需要手动指定</span></span><br><span class="line">ListenPort=10051<span class="comment">#server默认监听10051</span></span><br><span class="line">SourceIP<span class="comment">#在客户端定义的可采样的服务端地址</span></span><br><span class="line">LogType<span class="comment">#日志格式，包括syslog、file、console</span></span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_server.log<span class="comment">#日志文件(基于file存放)</span></span><br><span class="line">LogFileSize=0<span class="comment">#日志文件大小，超过后开始滚动(0标识禁止滚动)</span></span><br><span class="line">DebugLevel=3<span class="comment">#定义日志记录级别，默认为warnings</span></span><br><span class="line">DBHost=localhost<span class="comment">#指明数据库地址</span></span><br><span class="line">DBName=zabbix<span class="comment">#指明数据库名</span></span><br><span class="line">DBUser=zbxuser<span class="comment">#指明数据库用户</span></span><br><span class="line">DBPassword=dqy751421<span class="comment">#指明数据库密码</span></span><br><span class="line">DBPort=3306<span class="comment">#指明mysql数据库端口</span></span><br><span class="line">DBSocket=/tmp/mysql.sock<span class="comment">#指明mysql.sock路径</span></span><br></pre></td></tr></table></figure><h5 id="web配置"><a href="#web配置" class="headerlink" title="web配置"></a>web配置</h5><p>安装一些基本程序。用于测试的话可以与zabbix安装在一台主机上，不过推荐分开装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装php</span></span><br><span class="line">yum install -y httpd php php-mysql php-mbstring php-gd php-bcmath php-ldap php-xml</span><br><span class="line"><span class="comment">#安装web gui</span></span><br><span class="line">yum install -y zabbix40-web zabbix40-web-mysql</span><br><span class="line"><span class="comment">#配置时区，在/etc/httpd/conf.d/zabbix.conf设置</span></span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br><span class="line"><span class="comment">#启动httpd</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器输入如下地址进行安装zabbix</span></span><br><span class="line">http://192.168.163.132/zabbix/setup.php</span><br><span class="line"><span class="comment">#如果安装有问题，如某个参数填错了，需要在如下文件中修改</span></span><br><span class="line">/etc/zabbix/web/maintenance.inc.php</span><br><span class="line"><span class="comment">#在浏览器中直接finish启动，默认账号密码是admin、zabbix</span></span><br></pre></td></tr></table></figure><h5 id="zabbix-agent配置"><a href="#zabbix-agent配置" class="headerlink" title="zabbix agent配置"></a>zabbix agent配置</h5><p>使用192.168.163.135作为一个agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装agent</span></span><br><span class="line">yum install -y zabbix40-agent</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置/etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.163.132<span class="comment">#被动模式，指明允许来采样的服务器地址</span></span><br><span class="line">ListenPort=10050<span class="comment">#监听的端口</span></span><br><span class="line">ListenIP=0.0.0.0<span class="comment">#监听的地址</span></span><br><span class="line">StartAgent=3<span class="comment">#生成几个子进程来响应</span></span><br><span class="line">ServerActive=IP<span class="comment">#主动模式时将样本上交给哪个服务器</span></span><br><span class="line">Hostname=node1.dqy.com<span class="comment">#指明主机名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="监控配置"><a href="#监控配置" class="headerlink" title="监控配置"></a>监控配置</h4><p>配置顺序：host groups–&gt;host–&gt;applications–&gt;item–&gt;triggers(event)–&gt;action(conditions,operations)</p><p>通过condition定义监听哪个event，然后监听到就进行operation操作。operation包含remote command和alert</p><p>item可以生成简单的graph；多个graph构成screen；多个screen构成slide show</p><h5 id="设置host"><a href="#设置host" class="headerlink" title="设置host"></a>设置host</h5><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/new_host.png" alt></p><h5 id="设置item"><a href="#设置item" class="headerlink" title="设置item"></a>设置item</h5><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/item.png" alt></p><p>设置item时必须选择相应的key。所谓的key可以理解为一串指令的特征码。因为server想要获取agent的某些参数，肯定时agent执行某些命令的结果过滤而来的，而这个命令可能很长，因此使用key来定义一串命令。zabbix有自带的key(一般是系统运行的指标)，若需要自定义，只需在/etc/zabbix/zabbix_agentd.conf文件中的USER-DEFINED MONITORED PARAMETERS字段下添加即可。</p><p>另外，有的key可以传递参数，实际就是传给key对应的命令，类似脚本编程时用$传参。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在server端使用如下命令查看指定agent端对应的key的值，其中[]内即为参数</span></span><br><span class="line">zabbix_get -s 192.168.163.135 -k <span class="string">"net.if.in[ens33,packets]"</span></span><br></pre></td></tr></table></figure><h5 id="设置trigger"><a href="#设置trigger" class="headerlink" title="设置trigger"></a>设置trigger</h5><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/trigger1.png" alt></p><p>一个触发器由一个表达式构成，它定义了监控项所采取的数据的一个阈值，用于监控item的取值范围(表达式定义的是不合理区间，因此结果为真时说明有问题)。每一个触发器仅能关联至一个item，但可以为一个item同时使用多个触发器，从而实现不同级别的报警功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&lt;server&gt;:&lt;key&gt;.&lt;function&gt;(&lt;parameter&gt;)&#125;&lt;operator&gt;&lt;constant</span><br><span class="line">server：主机名</span><br><span class="line">key：主机上关系的相应监控项的key</span><br><span class="line">function：评估采集到的数据是否在合理范围内所用的函数，主要有：avg、count、change、date、dayofweek、delta、diff、iregexp、last、max、min、nodata、now、sum等</span><br><span class="line">parameter：函数参数。正常表示以秒为单位的数值，如果参数前面加#作为前缀，则表示最近几次的取值。如sum(300)表示300秒内的取值；sum(#10)表示最近10次取值之和。</span><br><span class="line">另外avg、count、last、min、max还支持使用第二个参数，用于完成时间限定；例如，max(1h,7d)表示1小时检测依次且将返回一周之前的最大值。</span><br><span class="line">对于last函数来说，last(0)表示last(#1)，即最后一次</span><br></pre></td></tr></table></figure><h5 id="设置action"><a href="#设置action" class="headerlink" title="设置action"></a>设置action</h5><p>action由condition和operation组成。在Configuration标签下的Actions标签进行编辑。</p><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/action1.png" alt></p><p>如上图，在Action标签中定义Condition，指明trigger后选择对应条目即可。</p><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/action2.png" alt></p><p>在上图Operation界面定义满足condition后的操作，可以有多个操作(动作可以由多个步骤组成)，通过step来定义各个操作的执行步骤。其中Default operation step duration表示默认默认操作步骤持续时间。下面的steps：1 -1表示当前步骤为第一步持续时长为1；2-2表示第二步持续时长为1；3-4表示第三步持续时长为2步(即由3、4两小步组成)；5-7表示第四步持续时长为3步(即由5、6、7三小步组成)。这种设置可以达到警报升级的作用。</p><ul><li><p>condition：触发此动作的条件，一般通过trigger触发</p></li><li><p>operation：触发条件满足时要采取的动作。包括send message和remote command。</p><ul><li><p>remote command包括：IPMI命令、custom script(常用)、ssh、telnet、global script</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用remote command之前还需要如下设置</span></span><br><span class="line"><span class="comment">#给在agent端给zabbix定义sudo规则，/etc/sudoers</span></span><br><span class="line">zabbix ALL=(ALL) ALL</span><br><span class="line"><span class="comment">#agent主机设置支持远程命令功能</span></span><br><span class="line">EnableRemoteCommands=1</span><br></pre></td></tr></table></figure></li></ul><p>#注意<br>  不支持active模式的agent；不支持代理模式、可以使用宏、命令长度不超过255字符、zabbix-server仅执行命令而不关心命令是否执行成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ send message：发送报警信息给关联的用户(一般是server主机上定义的用户)。发信息的信道可以使用脚本来发布(实现打电话、微信等)。具体步骤如下：</span><br><span class="line"></span><br><span class="line">  + 定义Administration的meda type，指明邮件服务器及发件人</span><br><span class="line">  + 在Administration的user中的media选项定义收件人、收件时间等</span><br></pre></td></tr></table></figure></li></ul><h5 id="设置报警媒介"><a href="#设置报警媒介" class="headerlink" title="设置报警媒介"></a>设置报警媒介</h5><p>在Administration标签的Media types标签可以设置报警媒介的信息。zabbix支持的报警媒介有：</p><ul><li><p>Email：邮件。通过设置的SMTP邮件服务器向指定用户发送报警信息</p></li><li><p>Script：脚本。自动调用指定脚本进行报警(脚本位置在配置文件中的AlertScriptsPath字段定义)。在定义脚本时可以使用参数，参数在设置时可以用宏指定。具体宏的介绍在下文。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用脚本时可以定义不同的参数，调用时使用宏来作为参数调用</span></span><br><span class="line"><span class="comment">#脚本默认放在server端的/var/lib/zabbixsrv/alertscripts目录下，若有新的脚本放入必须重启服务</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">to=<span class="variable">$1</span></span><br><span class="line">subject=<span class="variable">$2</span></span><br><span class="line">context=<span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$context</span>"</span> | mail -s <span class="string">"<span class="variable">$subject</span>"</span> <span class="string">"<span class="variable">$to</span>"</span></span><br></pre></td></tr></table></figure><ul><li>SMS、Jabber、Ez Texting：都是北美服务，此处不涉及</li></ul><p>设置好报警媒介后到Administration标签下的User标签定义用户的报警媒介，此处可以设置收件人。</p><h5 id="自定义图形"><a href="#自定义图形" class="headerlink" title="自定义图形"></a>自定义图形</h5><p>通常用于将多个监控项的图像结合到一起使用。在Configuration标签下的Hosts标签下选定hosts的graphs即可设置。</p><p>定义时相关属性如下：</p><ul><li>name：图像唯一名称</li><li>width、height：宽度和高度，单位为像素</li><li>graph type：图像类型，线状图(normal)、堆积面积图(stacked)、饼图(pie)、分离型饼图(exploded)</li><li>show legend：是否显示图例，即图像数据序列说明</li><li>show working time：是否高亮显示工作时间区域，不适用pie和exploded</li><li>show triggers：是否显示触发器，不适用pie和exploded</li><li>Y axis MIN value：Y轴最小刻度<ul><li>Calculated：自动计算</li><li>Fixed：固定值，不适用pie和exploded</li><li>Item：相关item的最近一次取值为其最小刻度</li></ul></li><li>Y axis MAX value：Y轴最大刻度，相关选项同上</li><li>Items：图形展示的数据列所来自的item，一个图形中可以同时展示多个item。item相关属性如下：<ul><li>Function：展示各种聚合数据<ul><li>min：仅展示最小值</li><li>avg：仅展示平均值</li><li>max：仅展示最大值</li><li>all：展示所有，即上述三种数据</li></ul></li><li>Draw stype：绘图风格，仅用于线状图<ul><li>Line：绘制为简单线条</li><li>Filled region：区域填充图，即面积图</li><li>Bold line：加粗线条</li><li>Dot：虚线图，以稀疏点组成</li><li>Dashed line：虚线图，以破折号组成</li></ul></li><li>Y axis side：Y轴显示的位置，可以为图形左侧或右侧</li><li>Colour：图形颜色</li></ul></li></ul><h5 id="定义screen"><a href="#定义screen" class="headerlink" title="定义screen"></a>定义screen</h5><p>screen即屏幕。屏幕用于集中展示多个数据源的相关信息，可实现快速浏览关注的信息。从根本上讲，screen就是一个图标，可以在创建时指定行数列数(即每行多少个图形，共多少行)，而后在每个格子中指定要展示的内容。</p><p>在Monitoring的Screens标签下创建，根据定义显示即可。map也差不多配置，这里不多说。</p><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><p>Macro，即一种预设的文本替换模式，可以理解为文本类型的变量。主要分为两类：</p><ul><li>内建：{MACRO_NAME}</li><li>自定义：{$MACRO_NAME}</li></ul><p>可以在三个级别使用：</p><ul><li>Global：全局宏。在Administration的General右侧的Macros选项中定义</li><li>template：模板宏。直接编辑相应主机或模板属性即可</li><li>Host：主机宏。在Configuration的Hosts标签下选定某个host后选择上方的Macros标签即可定义主机宏，该宏只对此主机使用。</li></ul><p>宏定义优先级：Host&gt;Template&gt;Global</p><p>具体宏参照官方文档：</p><p>[]: <a href="https://www.zabbix.com/documentation/4.0/manual/appendix/macros/supported_by_location" target="_blank" rel="noopener">https://www.zabbix.com/documentation/4.0/manual/appendix/macros/supported_by_location</a></p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>模板是一些列配置的集合，支持模板嵌套定义，用于快速部署和重复应用(链接)。具体配置和host一样，可以指定Application、host、trigger、item、graph、screen、discovery、web。具体过程和普通定义时一样，依次添加各种item和trigger即可。模板可以导出与导入。</p><h4 id="维护时间"><a href="#维护时间" class="headerlink" title="维护时间"></a>维护时间</h4><p>用于实现将某台服务器下线管理而不引起trigger报警。定义在Configuration的Maintenance中。在设置trigger时需要指定Maintenance status not in maintenance来实现在维护时间不触发触发器。</p><h4 id="自定义监控项"><a href="#自定义监控项" class="headerlink" title="自定义监控项"></a>自定义监控项</h4><p>实现用户自定义item key，从而实现特有数据指标的监控。需要定义在agent端且定义好后需要重启agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法,[*]表示可以接收任意个参数，且这些参数可以在command中使用$1-&gt;$9进行引用</span></span><br><span class="line"><span class="comment">#另外，如果在命令中需要使用$符号且key中有参数时，例如awk中打印某一字段时会使用$，那么就要使用$$来保留原来的$。</span></span><br><span class="line">UserParameter=&lt;key[*]&gt;,&lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑配置文件/etc/zabbix/zabbix_agentd.d/目录下新建一个配置文件即可</span></span><br><span class="line">UserParameter=os.memory.used,free -m | awk <span class="string">"/^Mem/&#123;print <span class="variable">$3</span>&#125;"</span></span><br><span class="line"><span class="comment">#重启zabbix-agentd，之后在服务端之间使用os.memory.used作为key即可</span></span><br><span class="line">systemctl restart zabbix-agentd</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例：实现监控mysql数据库的插入、查询、删除命令的使用次数，可能需要做词尾牟定“&gt;”</span></span><br><span class="line">UserParameter=Mysql.dm[*],mysql -h<span class="variable">$1</span> -u<span class="variable">$2</span> -p<span class="variable">$3</span> -e <span class="string">'SHOW GLOBAL STATUS'</span> | awk <span class="string">'/Com_$4\&gt;/&#123;print $$2&#125;'</span></span><br><span class="line"><span class="comment">#server端执行测试，测试前在agent的数据库需要用户授权访问</span></span><br><span class="line">zabbix-get -s 192.168.163.135 -p 10050 -k <span class="string">"Mysql.dml[192.168.163.132,root,dqy751421,select]"</span></span><br></pre></td></tr></table></figure><h4 id="网络发现"><a href="#网络发现" class="headerlink" title="网络发现"></a>网络发现</h4><p>zabbix基于http、icmp、ssh、ldap、tcp、snmp、telnet等协议扫描指定网络内主机。网络发现主要分为discovery和actions两个阶段，一旦主机被发现，如果想对其进行操作，需要由action来决定。</p><h5 id="Discovery"><a href="#Discovery" class="headerlink" title="Discovery"></a>Discovery</h5><p>zabbix会周期的扫描事先定义在网络发现规则中的网络地址范围，扫描的频率可以根据每个规则所定义的频率来设定。一旦有主机被发现就会触发Discovery的event事件。有如下八种事件：</p><table><thead><tr><th>事件</th><th>产生原因</th></tr></thead><tbody><tr><td>Service Up</td><td>服务上线</td></tr><tr><td>Service Down</td><td>服务离线</td></tr><tr><td>Host UP</td><td>主机上线(有服务)</td></tr><tr><td>Host Down</td><td>主机下线(无服务)</td></tr><tr><td>Service Discovered</td><td>服务被发现(第一次)</td></tr><tr><td>Service Lost</td><td>服务丢失</td></tr><tr><td>Host Discovered</td><td>主机被发现</td></tr><tr><td>Host Lost</td><td>主机丢失</td></tr></tbody></table><p>在Configuration的Discovery标签下进行网络主机发现的定义，如下所示</p><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/discovery.png" alt></p><p>Name：指明发现服务名称</p><p>IP range：定义扫描的ip段</p><p>Update interval：扫描间隔(不宜过短，会严重降低zabbix性能)</p><p>Checks：基于什么协议进行扫描</p><p>Device uniqueness criteria：指明基于ip地址来唯一确定主机</p><p><strong>注意</strong>：网络发现中添加主机时会自动创建interface，哪个检测成功就会创建相应的interface。如果某服务同时相应多个interface那么就会创建多个；如果同一种发现机制返回非唯一数据(多块网卡)，则第一个接口被默认识别，其他的被识别为额外接口；即便是某主机开始时只有agent接口，后来通过SNMP又发现它，同样会为其添加SNMP接口；不同的主机如果返回相同数据，则第一个主机被添加，余下的主机被当作第一个主机的额外接口。</p><h5 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h5><p>网络发现中的事件可以触发action，从而自动执行指定的操作。action如下：</p><table><thead><tr><th>Action</th><th>解释</th></tr></thead><tbody><tr><td>Send notifications</td><td>发送通知</td></tr><tr><td>Adding/removing hosts</td><td>添加/移除主机</td></tr><tr><td>Enabling/disabling hosts</td><td>启用/禁用主机</td></tr><tr><td>Adding hosts to a group</td><td>添加主机到组</td></tr><tr><td>Removing hosts from a group</td><td>从组中移除主机</td></tr><tr><td>Linking hosts to/unlinking from a template</td><td>链接/删除链接模板到主机</td></tr><tr><td>Executing remote scripts</td><td>执行远程脚本</td></tr></tbody></table><p>在配置Action时，切换Discovery条目进行配置。</p><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/discovery_action.png" alt></p><p>首先配置Conditions：需要指定Discovery rule为上面定义的Discovery的name；定义Discovery Status为某个event状态即可。</p><p>然后配置Operations：一般设置增加到某个组并连接到某个模板实现监控项的一键设置。</p><h4 id="自动注册"><a href="#自动注册" class="headerlink" title="自动注册"></a>自动注册</h4><p>用于减少zabbix-server端不断扫描造成的资源浪费，且不清楚哪些网段主机可能被添加到zabbix中时使用。该功能用于active模式的agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置agent的/etc/zabbix-agentd.conf</span></span><br><span class="line"><span class="comment">#配置agent端active模式下监听的server地址</span></span><br><span class="line">ServerActive=192.168.163.132</span><br><span class="line"><span class="comment">#被动模式地址也配置，因为有的item设置的是被动模式的监控项</span></span><br><span class="line">Server=192.168.163.132</span><br><span class="line"><span class="comment">#设置主机名</span></span><br><span class="line">Hostname=node2.dqy.com</span><br><span class="line"><span class="comment">#设置监听地址，此处不要设置为0.0.0.0，因为该ip会被填加到server识别的host的ip地址处</span></span><br><span class="line">ListenIP=192.168.163.136</span><br><span class="line"><span class="comment">#设置主机唯一标识(只用于auto registration)</span></span><br><span class="line">HostMetadata=artest</span><br></pre></td></tr></table></figure><p>该功能同样需要配置相关Action。在Server端配置Action时，切换Auto Registration条目进行配置。具体配置项目如下：</p><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/quto.png" alt></p><p>然后配置Operations，一般配置添加至某个hostgroup以及连接模板即可。需要注意的是模板里设置的item可能都是被动监控方式的，此处需要额外配置主动监控的item。</p><h4 id="LLD"><a href="#LLD" class="headerlink" title="LLD"></a>LLD</h4><p>底层发现，server端会向agent端请求一些数据，而server端根据这些数据来填充特定的item值。常见的item有：#IFNAME(网络接口名称)，#FSNAME(文件系统名称)</p><p>它主要是用于定义模板时获取不同agent端的不同的网卡接口、文件系统等信息。这些值存放在agent端的某些key当中，key可以通过zabbix的数据库查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select key_ from items where key_ like &#39;%discovery%&#39;;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/lld_discovery.png" alt></p><p>如上图所示，Name随意填写，Key要填写上面数据库命令查到的对应项(有很多，此处不一一列举)。注意，此处定义好后发现主机时会获取相应的key的值填到对应的item项中，如网卡信息填入#IFNAME中，文件系统信息填入#FSNAME中。这些变量都可以在定义host的item时使用，从而获取不同主机的不同信息。</p><h4 id="web监控"><a href="#web监控" class="headerlink" title="web监控"></a>web监控</h4><p>zabbix可以对web站点进行可用性检测，它可以检测获取的html页面中是否包含预设的字符串，也可以实现登录和点击，具体步骤如下：</p><ul><li>创建web监控需要先定义一个web scenarios(在configuration中选定host的web scenario即可定义)</li></ul><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/web1.png" alt></p><p>​    Name：唯一标识的scenario名称</p><p>​    Application：选择一个已存在的application，web scenario必须属于一个application</p><p>​    Update interval：web scenario的执行间隔</p><p>​    Agent：请求模仿的浏览器类型</p><p>​    Variables：用户自定义一些宏，如用户名密码之类</p><p>​    Attempt：执行多少次</p><ul><li>web方案包括一个或多个HTTP请求或步骤(step)，每个步骤的执行过程按照预先定义的顺序进行</li></ul><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/web_step.png" alt></p><p>​    Name：唯一的step名称</p><p>​    URL：请求的URL</p><p>​    Query fields：请求的数据库查询</p><p>​    Post fields：post请求的相关数据和值</p><p>​    Variables：定义变量</p><p>​    Required status codes：希望返回的状态码，一般为200</p><p>​    Required string：希望获取的字符串</p><p>​    TimeOut：请求的超时时长</p><ul><li>有的网站存在认证，需要手动提供</li></ul><p><img src="/2020/01/26/zabbix%E8%AF%A6%E8%A7%A3/web_auth.png" alt></p><p>​    HTTP authentication：认证方式</p><p>​    SSL：剩余ssl相关证书方面如密钥文件、证书文件等</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible详解</title>
      <link href="/2020/01/22/ansible%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/22/ansible%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>高度模块化的自动化运维工具，基于ssh协议实现了批量系统配置、批量程序部署、批量运行命令等功能。</p><a id="more"></a><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2020/01/22/ansible%E8%AF%A6%E8%A7%A3/ansible.jpg" alt></p><ul><li>Host inventory：定义管理主机的清单，包括ip、账号密码(基于密钥)等</li><li>Playbooks：定义每个主机扮演不同的角色，每个角色执行不同的命令，使用YAML格式定义</li><li>Core Modules：核心模块</li><li>Custom Modules：自定义模块</li><li>Plugins：用于通知及日志插件</li><li>Connection Plugins：基于ssh的连接主机的插件</li><li>Ansible：主控进程</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul><li><p>加载自己的配置文件，默认/etc/ansible/ansible.cfg；</p></li><li><p>查找对应的主机配置文件，找到要执行的主机或者组；</p></li><li><p>加载自己对应的模块文件，如command；</p></li><li><p>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器；</p></li><li><p>对应执行用户的家目录的.ansible/tmp/XXX/XXX.py文件；</p></li><li><p>给文件 +x 执行权限；</p></li><li><p>执行并返回结果；</p></li><li><p>删除临时.ansible/tmp/XXX/XXX.py文件，sleep 0退出。</p></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>ansible自身配置文件：/etc/ansible/ansible.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#各种默认选项</span></span><br><span class="line">[default]</span><br><span class="line">inventory = /etc/ansible/hosts      <span class="comment">#这个参数表示资源清单inventory文件的位置</span></span><br><span class="line">library = /usr/share/ansible        <span class="comment">#指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以</span></span><br><span class="line">forks = 5       <span class="comment">#并发连接数，默认为5</span></span><br><span class="line">sudo_user = root        <span class="comment">#设置默认执行命令的用户</span></span><br><span class="line">remote_port = 22        <span class="comment">#指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全</span></span><br><span class="line">host_key_checking = False       <span class="comment">#设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例</span></span><br><span class="line">timeout = 60        <span class="comment">#设置SSH连接的超时时间，单位为秒</span></span><br><span class="line">log_path = /var/<span class="built_in">log</span>/ansible.log     <span class="comment">#指定一个存储ansible日志的文件（默认不记录日志）</span></span><br><span class="line">module_name = <span class="built_in">command</span><span class="comment">#默认module为command</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#与权限提升有关</span></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become=True</span><br><span class="line">become_mothod=sudo<span class="comment">#升级方法</span></span><br><span class="line">become_user=root<span class="comment">#升级为哪个用户</span></span><br><span class="line">become_ask_pass=False<span class="comment">#升级时是否提供密码</span></span><br></pre></td></tr></table></figure><h3 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h3><p>因为ansible基于ssh控制各个主机，因此使用密钥验证的ssh登录会比较安全和方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一次回车确认，全部默认即可。该指令会在用户家目录下生成.ssh文件夹，里面包括私钥文件id_rsa和公钥文件id_rsa.pub。</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment">#将公钥复制到指定主机的~/.ssh/authorized_key文件中</span></span><br><span class="line">ssh-copy-id root@192.168.163.135</span><br><span class="line">ssh-copy-id root@192.168.163.136</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure><h3 id="ansible命令"><a href="#ansible命令" class="headerlink" title="ansible命令"></a>ansible命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [options]</span><br><span class="line">-m MODULE_NAME：指明调用模块名</span><br><span class="line">-a MODULE_ARGS：指明模块参数</span><br><span class="line">-C：不真实运行，模拟运行结果</span><br><span class="line">-f FORKS：定义每次对多少主机进行操作(默认5个)</span><br><span class="line">--list-hosts：根据&lt;host-pattern&gt;列出符合的主机</span><br><span class="line">-i INVENTORY：指明host配置文件(默认在/etc/ansible/hosts)</span><br><span class="line">--syntax-check：检测playbook的语法是否有错误</span><br><span class="line">-t TREE：将日志输出到指定文件</span><br><span class="line">--private-key=PRIVATE_KEY_FILE：指明用于连接认证的密钥文件</span><br><span class="line">-u REMOTE_USER：指明连接用户名(默认none)</span><br><span class="line">-c CONNECTION：指明ssh连接方式(默认smart)</span><br><span class="line">-s：远程执行命令时使用sudo命令</span><br><span class="line">-S：远程执行命令时使用su命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取帮助</span></span><br><span class="line">ansible-doc [options]</span><br><span class="line">-l：列出可用模块</span><br><span class="line">-s MODULE_NAME：显示指定模块的可设置选项，有“=”的选项是必须设置的</span><br></pre></td></tr></table></figure><h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><h4 id="ping模块"><a href="#ping模块" class="headerlink" title="ping模块"></a>ping模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主要用于主机连通性测试</span></span><br><span class="line">[root@www ~] ansible all -m ping </span><br><span class="line">192.168.163.136 | SUCCESS =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": false, </span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br><span class="line">192.168.163.135 | SUCCESS =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": false, </span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h4><p>用于创建用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="comment">#必选项，指定组的名称</span></span><br><span class="line">gid<span class="comment">#设置组的GID号，默认依次往后叠加</span></span><br><span class="line">state<span class="comment">#指定组的状态，默认为创建(present)，设置值absent则为删除</span></span><br><span class="line">system<span class="comment">#设置值为yes，表示创建为系统组，默认为no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加组</span></span><br><span class="line">ansible all -m group -a <span class="string">"name=mygrp"</span></span><br></pre></td></tr></table></figure><h4 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h4><p>用于管理和创建用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="comment">#必选项，指定用户名</span></span><br><span class="line">comment<span class="comment">#用户的描述信息</span></span><br><span class="line">createhome<span class="comment">#是否创建家目录</span></span><br><span class="line">force<span class="comment">#在使用state=absent时, 行为与userdel –force一致.</span></span><br><span class="line">group<span class="comment">#指定基本组</span></span><br><span class="line">groups<span class="comment">#指定附加组，如果指定为(groups=)表示删除所有组</span></span><br><span class="line">home<span class="comment">#指定用户家目录</span></span><br><span class="line">move_home<span class="comment">#如果设置为home=时, 试图将用户主目录移动到指定的目录</span></span><br><span class="line">non_unique<span class="comment">#该选项允许改变非唯一的用户ID值</span></span><br><span class="line">password<span class="comment">#指定用户密码</span></span><br><span class="line">remove<span class="comment">#在使用state=absent时, 行为是与userdel –remove一致</span></span><br><span class="line">shell<span class="comment">#指定默认shell</span></span><br><span class="line">state<span class="comment">#设置帐号状态，默认为present创建，指定值为absent表示删除</span></span><br><span class="line">system<span class="comment">#当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户</span></span><br><span class="line">uid<span class="comment">#指定用户的uid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">ansible all -m user -a <span class="string">"uid=5000 name=testuser state=present groups=mygrp shell=/bin/sh"</span></span><br></pre></td></tr></table></figure><h4 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h4><p>用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">src<span class="comment">#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制。</span></span><br><span class="line">content<span class="comment">#用于替换"src"，可以直接指定文件的内容，其将生成为目标文件的内容</span></span><br><span class="line">dest=<span class="comment">#必选项，将源文件复制到的远程主机的绝对路径</span></span><br><span class="line">backup<span class="comment">#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息</span></span><br><span class="line">directory_mode　　　　<span class="comment">#递归设定目录的权限，默认为系统默认权限</span></span><br><span class="line">force<span class="comment">#当目标主机包含该文件，但内容不同时，设为"yes"，表示强制覆盖；设为"no"，表示目标主机的目标位置不存在该文件才复制。默认为"yes"</span></span><br><span class="line">others<span class="comment">#所有的 file 模块中的选项可以在这里使用</span></span><br><span class="line">group<span class="comment">#复制后目标文件的属组</span></span><br><span class="line">owner<span class="comment">#复制后目标文件的属主</span></span><br><span class="line">mode<span class="comment">#复制后目标文件的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line">ansible all -m copy -a <span class="string">"src=/etc/fstab dest=/tmp/fstab.ansible mode=600"</span></span><br><span class="line"><span class="comment">#复制目录，若src的目录最后以"/"结尾，则只复制目录内的内容，而不复制目录本身</span></span><br><span class="line">ansible all -m copy -a <span class="string">"src=/etc/pam.d dest=/tmp/"</span></span><br><span class="line"><span class="comment">#使用content生成文件，默认不换行</span></span><br><span class="line">ansible all -m copy -a <span class="string">"content='hi there\n' dest=/tmp/hi.txt"</span></span><br></pre></td></tr></table></figure><h4 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h4><p>用于从远程主机复制文件到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dest=<span class="comment">#必选项，用来存放文件的目录</span></span><br><span class="line">src=<span class="comment">#必选项，在远程拉取的文件，并且必须是一个file，不能是目录</span></span><br></pre></td></tr></table></figure><h4 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h4><p>在远程主机执行命令，但是无法解析管道等shell特性的命令符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chdir</span><span class="comment">#在执行命令之前，先切换到该目录</span></span><br><span class="line">free_form=<span class="comment">#必选项，要执行的Linux指令，一般使用ansible的-a参数代替。</span></span><br><span class="line">creates<span class="comment">#一个文件名，当这个文件存在，则该命令不执行,可以用来做判断</span></span><br><span class="line">removes<span class="comment">#一个文件名，这个文件不存在，则该命令不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行ifconfig命令</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">"ifconfig"</span></span><br><span class="line"><span class="comment">#切换目录后创建目录</span></span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">"chdir=/var/tmp mkdir hi.dir"</span></span><br></pre></td></tr></table></figure><h4 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h4><p>在远程主机调用shell来执行命令(具体用法与command一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chdir</span><span class="comment">#在执行命令之前，先切换到该目录</span></span><br><span class="line">free_form=<span class="comment">#必选项，要执行的Linux指令，一般使用ansible的-a参数代替。</span></span><br><span class="line">creates<span class="comment">#一个文件名，当这个文件存在，则该命令不执行,可以用来做判断</span></span><br><span class="line">removes<span class="comment">#一个文件名，这个文件不存在，则该命令不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">ansible all -m shell -a <span class="string">"echo dqy751421 | passwd --stdin testuser"</span></span><br></pre></td></tr></table></figure><h4 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h4><p>主要用于设置文件属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="comment">#必选项，设置操作对象路径</span></span><br><span class="line">force<span class="comment">#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</span></span><br><span class="line">group<span class="comment">#定义文件或目录的属组</span></span><br><span class="line">owner<span class="comment">#定义文件或目录的属主</span></span><br><span class="line">mode<span class="comment">#定义文件或目录的权限</span></span><br><span class="line">src<span class="comment">#当state=link时指明需要连接的源文件</span></span><br><span class="line">recurse<span class="comment">#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况</span></span><br><span class="line">dest<span class="comment">#被链接到的路径，只应用于state=link的情况</span></span><br><span class="line">state<span class="comment">#状态，有以下选项：</span></span><br><span class="line">directory：如果目录不存在，就创建目录</span><br><span class="line">file：即使文件不存在，也不会被创建</span><br><span class="line">link：创建软链接</span><br><span class="line">hard：创建硬链接</span><br><span class="line">touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class="line">absent：删除目录、文件或者取消链接文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建目录</span></span><br><span class="line">ansible all -m file -a <span class="string">"path=/var/tmp/hello.dir state=directory"</span></span><br><span class="line"><span class="comment">#创建符号链接，将src的文件，创建成path指向的link文件</span></span><br><span class="line">ansible all -m file -a <span class="string">"src=/var/tmp/fstab.ansible path=/var/tmp/fstab.link state=link"</span></span><br></pre></td></tr></table></figure><h4 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h4><p>该模块适用于管理cron定时计划</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">day<span class="comment">#每天应该运行的工作( 1-31, *, */2, etc )</span></span><br><span class="line">hour<span class="comment">#小时 ( 0-23, , /2, )</span></span><br><span class="line">minute<span class="comment">#分钟( 0-59, , /2, )</span></span><br><span class="line">month<span class="comment">#月( 1-12, *, /2, )</span></span><br><span class="line">weekday<span class="comment">#周 ( 0-6 for Sunday-Saturday,, )</span></span><br><span class="line">job<span class="comment">#指明运行的命令是什么</span></span><br><span class="line">name<span class="comment">#定时任务描述</span></span><br><span class="line">reboot<span class="comment">#任务在重启时运行，不建议使用，建议使用special_time</span></span><br><span class="line">special_time<span class="comment">#特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）</span></span><br><span class="line">state<span class="comment">#指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务</span></span><br><span class="line">user<span class="comment">#以哪个用户的身份执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每3分钟同步一下时间</span></span><br><span class="line">ansible all -m cron -a <span class="string">"minute=*/3 job='/usr/sbin/ntpdate ntp1.aliyun.com' name=sync_time"</span></span><br></pre></td></tr></table></figure><h4 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h4><p>用于程序包安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="comment">#必选项，所安装的包的名称</span></span><br><span class="line">state<span class="comment">#present或者installed表示安装，latest表示安装最新的, absent或removed表示卸载软件。</span></span><br><span class="line">update_cache<span class="comment">#强制更新yum的缓存</span></span><br><span class="line">conf_file<span class="comment">#指定远程yum安装时所依赖的配置文件（安装本地已有的包）。</span></span><br><span class="line">disable_gpg_check<span class="comment">#是否禁止GPG checking，只用于presentor latest。</span></span><br><span class="line">disablerepo<span class="comment">#临时禁止使用yum库。只用于安装或更新时。</span></span><br><span class="line">enablerepo<span class="comment">#临时使用的yum库。只用于安装或更新时。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装nginx</span></span><br><span class="line">ansible all -m yum -a <span class="string">"name=nginx state=installed"</span></span><br></pre></td></tr></table></figure><h4 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h4><p>用于各种服务进程的管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="comment">#服务名称</span></span><br><span class="line">arguments<span class="comment">#命令行提供额外的参数</span></span><br><span class="line">enabled<span class="comment">#设置开机启动。</span></span><br><span class="line">runlevel<span class="comment">#开机启动的级别，一般不用指定。</span></span><br><span class="line">sleep<span class="comment">#在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)</span></span><br><span class="line">state<span class="comment">#有四种状态，分别为：started表示启动服务， stopped表示停止服务， restarted表示重启服务，reloaded表示重载配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">ansible all -m service -a <span class="string">"name=nginx state=started enabled=yes"</span></span><br></pre></td></tr></table></figure><h4 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h4><p>将本地脚本复制到远端服务器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free_form=<span class="comment">#必选项，要运行的脚本本地路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本实例</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ansible script"</span> &gt; /tmp/ansible.txt</span><br><span class="line">ansible all -m script -a <span class="string">"/tmp/test.sh"</span></span><br></pre></td></tr></table></figure><h4 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h4><p>可以获取系统变量，也就是facts。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 192.168.163.135 -m setup | less</span><br></pre></td></tr></table></figure><h4 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h4><p>基于模板方式生成一个文件复制到远程主机，主要用于生成模块化的配置文件。注意文件根据习惯一般以.j2结尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="comment">#指明模板文件</span></span><br><span class="line">dest=<span class="comment">#指明各主机上基于模板生成的文件</span></span><br><span class="line">owner<span class="comment">#定义属主</span></span><br><span class="line">group<span class="comment">#定义属组</span></span><br><span class="line">mode<span class="comment">#定义权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">ansible all -m template -a <span class="string">"src=/etc/httpd/httpd.conf.j2 dest=/etc/httpd/httpd.conf"</span></span><br><span class="line"><span class="comment">#j2文件</span></span><br><span class="line">listen &#123;&#123; http_port &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><p>是基于YAML设计的用于ansible管理远端主机的配置文件。根据其描述可以执行一些列任务，从而达到连续配置的效果。</p><h4 id="核心元素"><a href="#核心元素" class="headerlink" title="核心元素"></a>核心元素</h4><p>host：关联到的主机</p><p>task：任务列表，即host需要执行的动作</p><p>variables：执行任务时需要的变量</p><p>templates：包含了模板语法的文本文件</p><p>handlers：由特定条件触发的任务(通过notify触发)</p><h4 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h4><ul><li><p>Hosts：运行指定任务的目标主机</p></li><li><p>remoute_user：在远程主机上执行任务的用户</p></li><li><p>task：任务列表(模块+模块参数)</p><ul><li>action：module arguments</li><li>module：arguments</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tasks：</span></span><br><span class="line">　　<span class="string">–</span> <span class="attr">name:</span> <span class="string">TASK_NAME</span></span><br><span class="line">　　　<span class="attr">module:</span> <span class="string">arguments</span></span><br><span class="line">　　　<span class="attr">notify:</span> <span class="string">HANDLERS_NAME</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line">　　<span class="string">–</span> <span class="attr">name:</span> <span class="string">HANDLER_NAME</span></span><br><span class="line">　　　<span class="attr">module:</span> <span class="string">arguments</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>可以通过对不同的task定义不同的tag来实现只执行指定tag的任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行定义在first.yaml文件中拥有指定TAG_NAME的task</span></span><br><span class="line">ansible-playbook -t TAG_NAME first.yaml</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>可以使用系统自带变量和自定义变量。</p><ul><li>facts：可以直接使用的变量，需要在playbook中使用”“来引用变量。因为只有playbook会gather facts，这些facts通过setup模块可以查看。</li><li>自定义变量。在playbook中自定义变量后，通过命令行传参</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义配置文件forth.yaml</span></span><br><span class="line">- hosts: 192.168.163.135</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install package &#123;&#123;pkgname&#125;&#125;</span><br><span class="line">    yum: name=&#123;&#123;pkgname&#125;&#125; state=installed</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用安装varnish</span></span><br><span class="line">ansible-playbook -e pkgname=varnish</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过vars标签定义，执行复制操作</span></span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">  - pbvar: playbook variable</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy</span><br><span class="line">    copy: content=&#123;&#123; pbvar &#125;&#125; dest=/var/tmp/vars.txt</span><br></pre></td></tr></table></figure><ul><li><p>host inventory变量。可以在host主机清单文件中直接引用</p><ul><li><p>inventory自带的参数，用于host文件中定义连接目标主机时使用</p><ul><li>ansible_ssh_host</li><li>ansible_ssh_port</li><li>ansible_ssh_user</li><li>ansible_ssh_pass</li><li>ansible_sudo_pass</li></ul></li><li><p>向不同的主机传递不同的变量，格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP/HOSTNAMEvar1=value1 var2=value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例，表示向135这台主机可以传递http_port变量，其值为80</span></span><br><span class="line">192.168.163.135 http_port=80</span><br></pre></td></tr></table></figure></li><li><p>向组中的主机传递相同的变量，即一个组的主机共享变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[group:vars]</span><br><span class="line">var1=value1</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例，表示websrvs组拥有自定义变量http_port</span></span><br><span class="line">[websrvs:vars]</span><br><span class="line">http_port=8080</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>文本文件，基于Jinja2语法，使用template模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install nginx</span><br><span class="line">    yum: name=nginx stata=installed</span><br><span class="line">  - name: install core file</span><br><span class="line">    template: src=files/nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">    notify: restart nginx</span><br><span class="line">  - name: start nginx service</span><br><span class="line">    service: name=nginx state=started</span><br><span class="line">  handlers:</span><br><span class="line">  - name: restart nginx</span><br><span class="line">    service: name=nginx state=restarted</span><br><span class="line">    </span><br><span class="line"><span class="comment">#模板配置文件nginx.conf.j2</span></span><br><span class="line"><span class="comment">#facts内置变量</span></span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus &#125;&#125;</span><br><span class="line"><span class="comment">#host清单定义的变量</span></span><br><span class="line">listen &#123;&#123; http_port &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h4><h5 id="when"><a href="#when" class="headerlink" title="when"></a>when</h5><p>在task中使用，jinja2语法格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- name: install conf file to centos7</span><br><span class="line">  template: src=/files/nginx.c7.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  when: ansible_distribution_major_version == <span class="string">"7"</span></span><br><span class="line">- name: install conf file to centos6</span><br><span class="line">  template: src=/files/nginx.c6.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  when: ansible_distribution_major_version == <span class="string">"6"</span></span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>在tasks中使用。对迭代项的引用，固定变量名为item，且要在task中使用with_items给定要迭代的元素列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表</span></span><br><span class="line">tasks:</span><br><span class="line">- name: install some packages</span><br><span class="line">  yum: name=&#123;&#123; item &#125;&#125; state=installed</span><br><span class="line">  with_items:</span><br><span class="line">  - httpd</span><br><span class="line">  - php</span><br><span class="line">  - nginx</span><br><span class="line">  </span><br><span class="line"><span class="comment">#元组</span></span><br><span class="line">- name: add some users</span><br><span class="line">  user: name=&#123;&#123; item.name &#125;&#125; group=&#123;&#123; item.group &#125;&#125; state=present</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; name: <span class="string">'user11'</span>, group: <span class="string">'group11'</span> &#125;</span><br><span class="line">    - &#123; name: <span class="string">'user12'</span>, group: <span class="string">'group12'</span> &#125;</span><br><span class="line">    - &#123; name: <span class="string">'user13'</span>, group: <span class="string">'group13'</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>自包含的目录结构。role文件定义于/etc/ansible/roles/问价夹下。它将playbook原本的设置进行分片，即tasks只定义在tasks文件夹下，其他以此类推。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此时，nginx就是一个角色，即一个role</span></span><br><span class="line">mkdir /etc/ansible/roles/nginx/&#123;tasks,vars,templates,files&#125; -pv</span><br><span class="line"></span><br><span class="line">nginx/</span><br><span class="line">tasks/：至少包含一个名为main.yml的文件；其他文件需要在此文件中通过include进行包含</span><br><span class="line">vars/：至少包含一个名为main.yml的文件；其他文件需要在此文件中通过include进行包含</span><br><span class="line">templates/：所有模板文件</span><br><span class="line">files/：存放由copy或script模块等调用的文件</span><br><span class="line">handlers/：至少应该包含一个名为main.yml的文件；其他文件需要在此文件中通过include进行包含</span><br><span class="line">meta/：至少应该包含一个名为main.yml的文件；定义当前角色的特殊设定及其依赖关系；其他文件需要在此文件中通过include进行包含</span><br><span class="line">defaul/：设定默认变量时使用此目录的main.yml文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以在playbook中传递变量给角色</span></span><br><span class="line">- hosts:</span><br><span class="line">  remote_user:</span><br><span class="line">  roles:</span><br><span class="line">  - &#123; role: nginx, username: nginx &#125;<span class="comment">#调用角色nginx，传递变量username=nginx</span></span><br><span class="line">  - &#123; role: nginx, when: <span class="string">"ansible_distribution_major_version == '7'"</span> &#125; <span class="comment">#when条件判断</span></span><br></pre></td></tr></table></figure><h4 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试，只检测可能发生的改变，不真正执行操作</span></span><br><span class="line">ansible-playbook --check</span><br><span class="line"><span class="comment">#列出运行任务的主机</span></span><br><span class="line">ansible-playbook --list-hosts</span><br><span class="line"><span class="comment">#语法检测</span></span><br><span class="line">ansible-playbook --syntax-check first.yaml</span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">ansible-playbook all first.yaml</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>以role定义一个playbook。此处以配置nginx为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此时，nginx就是一个角色，即一个role</span></span><br><span class="line">mkdir /etc/ansible/roles/nginx/&#123;tasks,vars,templates,handles,files,meta,default&#125; -pv</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义tasks，直接在tasks目录下新建main.yml文件，内容直接写-name即可，不需要指明tasks标签</span></span><br><span class="line">- name: install nginx</span><br><span class="line">  yum: name=nginx state=installed</span><br><span class="line">  when: ansible_os_family == <span class="string">"RedHat"</span></span><br><span class="line">- name: install conf</span><br><span class="line">  template: src=vhost1.conf.j2 dest=/etc/nginx/conf.d/vhost1.conf</span><br><span class="line">  tags: conf</span><br><span class="line">  notify: restart nginx</span><br><span class="line">- name: start nginx</span><br><span class="line">  service: name=nginx state=started</span><br><span class="line">- name: install site home directory</span><br><span class="line">  file: path=&#123;&#123; ngxroot &#125;&#125; state=directory</span><br><span class="line">- name: install index page</span><br><span class="line">  copy: src=index.html dest=&#123;&#123; ngxroot &#125;&#125;/</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义template文件，以.j2结尾，此处为vhost1.conf.j2</span></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server-name &#123;&#123; ansible_fqdn &#125;&#125;;</span><br><span class="line">location / &#123;</span><br><span class="line">root <span class="string">"/ngxdata/vhost1"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义handlers的main.yml文件</span></span><br><span class="line">- name: restart nginx</span><br><span class="line">  service: name=nginx state=restarted</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量于vars/目录下的main.yml文件中，格式为字典格式</span></span><br><span class="line">ngxroot: /ngxdata/vhost1</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义index.html于files/目录下</span></span><br><span class="line">&lt;h1&gt;vhost1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在playbook中直接定义roles标签指明即可，此处命名为nginx.yaml</span></span><br><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">  - nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">ansible-playbook all nginx.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anxible </tag>
            
            <tag> 自动化 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dhcp、pxe、cobbler</title>
      <link href="/2020/01/21/hcp%E3%80%81pxe%E3%80%81cobbler/"/>
      <url>/2020/01/21/hcp%E3%80%81pxe%E3%80%81cobbler/</url>
      
        <content type="html"><![CDATA[<h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p>基于RARP协议实现动态申请IP地址。监听服务端的udp67，客户端的udp68。</p><a id="more"></a><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ul><li>客户端：dhcp discover，广播报文，发送自己的MAC地址</li><li>服务端：dhcp offer，广播报文，提供本地地址池的空闲的IP地址、掩码、网关等</li><li>客户端：dhcp request，广播报文，对第一个到达的dhcp offer报文予以回答，申请使用</li><li>服务端：dhcp ack，广播报文，同意客户端使用该报文，并通知局域网内所有主机</li></ul><h4 id="续租"><a href="#续租" class="headerlink" title="续租"></a>续租</h4><p>dhcp获得的ip地址有时间限制，因此每当有效时间到达一半时都要进行续租操作。</p><p>续租成功</p><ul><li>dhcp request</li><li>dhcp ack</li></ul><p>续租失败。失败后要继续广播discover发现报文请求新的IP地址。</p><ul><li>dhcp request</li><li>dhcp nak</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>/etc/dncp/dhcp.conf、/usr/share/doc/dhcp-4.2.5/dhcpd.conf.exampl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主机名</span></span><br><span class="line">option domain-name <span class="string">"example"</span>;</span><br><span class="line"><span class="comment">#dns服务器地址</span></span><br><span class="line">option domain-name-servers ns1.example.org;</span><br><span class="line"><span class="comment">#默认租约期限，单位为秒</span></span><br><span class="line">default-lease-time 43200;</span><br><span class="line"><span class="comment">#最长租约期限，单位为秒</span></span><br><span class="line">max-lease-time 86400;</span><br><span class="line"><span class="comment">#rsyslog相关的日志</span></span><br><span class="line"><span class="built_in">log</span>-facility local7;</span><br><span class="line"><span class="comment">#不同主机动态生成ip地址和网关等信息</span></span><br><span class="line">subnet 10.152.187.0 mask 255.255.255.0 &#123;</span><br><span class="line"><span class="comment">#定义地址范围</span></span><br><span class="line">range ip1~ip2;</span><br><span class="line"><span class="comment">#定义默认网关</span></span><br><span class="line">option routers 10.5.5.1;</span><br><span class="line"><span class="comment">#定义广播域地址</span></span><br><span class="line">option broadcast-address 10.5.5.31;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#不同主机固定设置不同选项。hostname只用来区别不同主机，命名随意</span></span><br><span class="line">host host_name &#123;</span><br><span class="line"><span class="comment">#指明主机的mac地址</span></span><br><span class="line">hardware ethernet mac_addr;</span><br><span class="line"><span class="comment">#固定所指明主机分配的ip地址，一般不为</span></span><br><span class="line">fixed-address ip_addr;</span><br><span class="line"><span class="comment">#指明当该主机请求dhcp时到server-name去加载filename指定的引导文件</span></span><br><span class="line">filename <span class="string">"pxelinux.0"</span>;</span><br><span class="line">server-name <span class="string">"FQDN"</span>;</span><br><span class="line"><span class="comment">#为tftp服务器地址</span></span><br><span class="line">next-server 192.168.163.131;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">若host和subnet同时生效那么以host为准(作用域越小越准确)</span><br></pre></td></tr></table></figure><h4 id="分配信息库"><a href="#分配信息库" class="headerlink" title="分配信息库"></a>分配信息库</h4><p>/var/lib/dhcp/dhcpd.leases</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#监控dhcp过程</span></span><br><span class="line">dhclient -d</span><br></pre></td></tr></table></figure><h3 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h3><p>preboot excution environment。主要依赖于dhcp、tftp、yum仓库实现。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>首先根据dhcp服务器获取IP地址、掩码、网关等信息，然后根据dhcp所指向的next-server和filename连接指定tftp服务器；向tftp服务器加载bootloader、kernel、initrd等文件；然后向与内核相关yum仓库(ftp、http、nfs等)获取rpm包。最后根据kickstart文件实现自定义安装。</p><h4 id="tftp"><a href="#tftp" class="headerlink" title="tftp"></a>tftp</h4><p>tftp用于被dhcp指向，它主要存储bootloader、kernel、initrd等信息。默认tftp服务器共享文件保存在/var/lib/tftpboot。此处使用192.168.163.131作tftp服务器。tftp默认工作在udp69端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装服务端和客户端，安装在地址为192.168.163.131的服务器上</span></span><br><span class="line">yum -y install tftp-server tftp</span><br></pre></td></tr></table></figure><h4 id="dhcp"><a href="#dhcp" class="headerlink" title="dhcp"></a>dhcp</h4><p>修改/etc/dhcp/dhcpd.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#网关指向安装tftp的服务器地址</span></span><br><span class="line">option routers 192.168.163.2;</span><br><span class="line"><span class="comment">#指明dns服务器</span></span><br><span class="line">optino domain-name-servers 192.168.163.2;</span><br><span class="line"><span class="comment">#默认租约期限，单位为秒</span></span><br><span class="line">default-lease-time 43200;</span><br><span class="line"><span class="comment">#最长租约期限，单位为秒</span></span><br><span class="line">max-lease-time 86400;</span><br><span class="line"><span class="comment">#指明网段地址和子网掩码</span></span><br><span class="line">subnet 192.168.163.0 netmask 255.255.255.0 &#123;</span><br><span class="line">range 192.168.163.100 192.168.163.200;</span><br><span class="line">filename <span class="string">"pexlinux.0"</span>;</span><br><span class="line"><span class="comment">#指向tftp服务器，且文件放在tftp服务器的/var/lib/tftpboot目录下</span></span><br><span class="line">next-server 192.168.163.131;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置yum仓库"><a href="#配置yum仓库" class="headerlink" title="配置yum仓库"></a>配置yum仓库</h4><p>yum仓库主要用于安装时解决各种依赖问题。yum仓库可以使用ftp协议指向，也可以使用http协议指向。这里使用http协议，将yum仓库搭建在http服务器上，目录为/centos/7/x86_64/。</p><h4 id="配置kickstart文件"><a href="#配置kickstart文件" class="headerlink" title="配置kickstart文件"></a>配置kickstart文件</h4><p>该文件用于自动配置装机流程，例如分区，装载网络文件系统等。此处复制一份本机的anaconda-ks.cfg文件即可，将其放在http服务器上(和yum仓库一起)的/var/www/html/kickstarts/目录下，其中要修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指向指定yum源</span></span><br><span class="line">url --url=<span class="string">"http://192.168.163.131/centos/7/x86_64/"</span></span><br></pre></td></tr></table></figure><h4 id="安装syslinux"><a href="#安装syslinux" class="headerlink" title="安装syslinux"></a>安装syslinux</h4><p>syslinux是一个小型的Linux操作系统，也可以看作是一个linux的引导器，可以简化安装Linux的过程。我们需要/usr/share/syslinux/目录下的几个文件来辅助安装linux。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y syslinux</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要copy的文件</span></span><br><span class="line"><span class="comment">#PXE启动引导程序(NBP)</span></span><br><span class="line">prelinux.0</span><br><span class="line"><span class="comment">#指定分区启动  如：chain.c32 hd0,1</span></span><br><span class="line">chain.c32</span><br><span class="line"><span class="comment">#图像基础框架</span></span><br><span class="line">vesamenu.32</span><br><span class="line"><span class="comment">#目录界面框架</span></span><br><span class="line">menu.c32</span><br><span class="line"><span class="comment">#内存作为磁盘用(initrd)，用于引导IMG镜像的文件</span></span><br><span class="line">memdisk</span><br></pre></td></tr></table></figure><h4 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h4><p>需要复制如下文件到tftp服务器的/var/lib/tftpboot/下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/syslinux/&#123;chain.c32,mboot.c32,menu.c32,prelinux.0&#125; /var/lib/tftpboot/</span><br><span class="line">cp /boot/&#123;initramfs-3.10.0-1062.el7.x86_64.img,vmlinuz-3.10.0-1062.el7.x86_64&#125; /var/lib/tftpboot/</span><br><span class="line">mkdir prelinux.cfg</span><br><span class="line"><span class="comment">#在prelinux.cfg目录下新建并编辑default文件，该文件为用户所看到的菜单选项</span></span><br><span class="line"><span class="comment">#启动读取tftp服务器文件时会首先执行pxelinux.0这个文件</span></span><br><span class="line"><span class="comment">#定义使用命令字符界面</span></span><br><span class="line">default menu.c32</span><br><span class="line"><span class="comment">#用户选择时间</span></span><br><span class="line">prompt 5</span><br><span class="line"><span class="comment">#超时时间</span></span><br><span class="line">timeout 30</span><br><span class="line"><span class="comment">#菜单项(全局菜单)</span></span><br><span class="line">MENU TITLE CentOS 7 PXE Menu</span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line">LABEL linux</span><br><span class="line"><span class="comment">#可选择的菜单项</span></span><br><span class="line">MENU LABEL Install Centos7 x86_64</span><br><span class="line"><span class="comment">#指明内核</span></span><br><span class="line">KERNEL vmlinuz-3.10.0-1062.el7.x86_64</span><br><span class="line"><span class="comment">#添加参数，其中安装源需要手动指定自己或者网上配置的repo，也要指定kickstart文件</span></span><br><span class="line"><span class="comment">#另外此处需要手动指定一个ip地址，虽然安装之前执行了dhcp，但那个ip是网卡的ip，对于内核来说还没有ip</span></span><br><span class="line">APPEND initrd=initramfs-3.10.0-1062.el7.x86_64.img ip=192.168.163.16 netmask=255.255.255.0 inst.repo=http://192.168.163.131/centos/7/x86_64 ks=http://192.168.163.131/kickstarts/centos7.cfg</span><br></pre></td></tr></table></figure><h3 id="Cobbler"><a href="#Cobbler" class="headerlink" title="Cobbler"></a>Cobbler</h3><p>pxe的二次封装。将多种系统的PXE安装通过软件结合起来，用户可以选择安装哪个。</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="/2020/01/21/hcp%E3%80%81pxe%E3%80%81cobbler/cobbler.jpg" alt></p><p>distribution(distro)：不同的发行版，包括内核、initrd等</p><p>profile：多个不同的kickstart配置文件</p><p>system：同一profile可以安装不同的系统(ip,掩码不同)</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装cobbler</span></span><br><span class="line">yum -y install cobbler</span><br><span class="line"><span class="comment">#安装dnsmasq，他是一个轻量化的dns和dhcp配置工具</span></span><br><span class="line">yum install -y dnsmasq</span><br><span class="line"><span class="comment">#启动tftp</span></span><br><span class="line">systemctl start tftp</span><br><span class="line"><span class="comment">#启动httpd</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"><span class="comment">#启动cobblerd服务</span></span><br><span class="line">systemctl start cobblerd</span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="配置文件目录"><a href="#配置文件目录" class="headerlink" title="配置文件目录"></a>配置文件目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/etc/cobbler/settings    <span class="comment">#cobbler主配置文件</span></span><br><span class="line">/etc/cobbler/dhcp.template    <span class="comment">#DHCP服务的配置模板</span></span><br><span class="line">/etc/cobbler/tftpd.template   <span class="comment">#tftp服务的配置模板</span></span><br><span class="line">/etc/cobbler/rsync.template   <span class="comment">#rsync服务的配置模板</span></span><br><span class="line">/etc/cobbler/iso    <span class="comment">#iso模板配置文件目录</span></span><br><span class="line">/etc/cobbler/pxe    <span class="comment">#pxe模板文件目录</span></span><br><span class="line">/etc/cobbler/power   <span class="comment">#电源的配置文件目录</span></span><br><span class="line">/etc/cobbler/users.conf   <span class="comment">#web服务授权配置文件</span></span><br><span class="line">/etc/cobbler/users.digest   <span class="comment">#web访问的用户名密码配置文件</span></span><br><span class="line">/etc/cobbler/dnsmasq.template   <span class="comment">#DNS服务的配置模板</span></span><br><span class="line">/etc/cobbler/modules.conf   <span class="comment">#Cobbler模块配置文件</span></span><br></pre></td></tr></table></figure><h5 id="数据目录"><a href="#数据目录" class="headerlink" title="数据目录"></a>数据目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/cobbler/config    <span class="comment">#配置文件</span></span><br><span class="line">/var/lib/cobbler/kickstarts    <span class="comment">#默认存放kickstart文件</span></span><br><span class="line">/var/lib/cobbler/loaders    <span class="comment">#存放的各种引导程序</span></span><br><span class="line">/var/www/cobbler     <span class="comment">#系统安装镜像目录</span></span><br><span class="line">/var/www/cobbler/ks_mirror    <span class="comment">#导入的系统镜像列表,cobbler distro文件目录</span></span><br><span class="line">/var/www/cobbler/images    <span class="comment">#导入的系统镜像启动文件</span></span><br><span class="line">/var/www/cobbler/repo_mirror    <span class="comment">#yum源存储目录</span></span><br></pre></td></tr></table></figure><h5 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a>日志目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/cobbler/install.log    <span class="comment">#客户端系统安装日志</span></span><br><span class="line">/var/<span class="built_in">log</span>/cobbler/cobbler.log    <span class="comment">#cobbler日志</span></span><br></pre></td></tr></table></figure><h4 id="检查问题"><a href="#检查问题" class="headerlink" title="检查问题"></a>检查问题</h4><p>cobbler运行前需要检查各种配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler check</span><br></pre></td></tr></table></figure><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>解决每个问题都需要重启服务来检测是否正确解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置server的值为本机可以连接外网的值，在/etc/cobbler/setting中</span></span><br><span class="line">server：192.168.163.131</span><br><span class="line"><span class="comment">#指明pxe的IP地址，一般为tftp的地址</span></span><br><span class="line">next_server：192.168.163.131</span><br><span class="line"><span class="comment">#在该/var/lib/cobbler/loaders目录下放引导文件，就是pxe的pxelinux.0，.32文件等；也可以联网下载</span></span><br><span class="line"><span class="comment">#也可以像pxe一样从syslinux中复制过来</span></span><br><span class="line">cobbler get-loaders</span><br><span class="line"><span class="comment">#安装rsync服务，主要用于同步各种rpm包</span></span><br><span class="line">yum install -y rsync</span><br><span class="line">systemctl start rsyncd</span><br><span class="line"><span class="comment">#安装pykickstart</span></span><br><span class="line">yum -y install pykickstart</span><br><span class="line"><span class="comment">#生成新的超级用户密码放在/etc/cobbler/setting文件中的default_password_crypted字段</span></span><br><span class="line"><span class="comment">#将下列命令生成的密码放到default_password_crypted字段</span></span><br><span class="line">openssl passwd -1 -salt <span class="string">'123456'</span> <span class="string">'frdqy'</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobbler sync</span><br></pre></td></tr></table></figure><h5 id="创建distro"><a href="#创建distro" class="headerlink" title="创建distro"></a>创建distro</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于定义发行版</span></span><br><span class="line">cobbler distro add [option]</span><br><span class="line">--kernel：内核</span><br><span class="line">--initrd：ramdisk</span><br><span class="line">--arch：平台</span><br><span class="line">--name：指定发行版名称</span><br><span class="line"><span class="comment">#导入光盘文件自动生成distro，path指明挂载路径，生成distro文件默认保存在/var/www/cobbler/下</span></span><br><span class="line"><span class="comment">#导入完成后会自动生成一个distro和profile文件，其中profile文件不能使用</span></span><br><span class="line">cobbler import --name=<span class="string">"Centos7"</span> --path=/media/cdrom</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成后可以使用如下命令查看</span></span><br><span class="line">cobbler distro list</span><br><span class="line">cobbler profile list</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看distro或者profile配置信息</span></span><br><span class="line">cobbler profile report --name=Centos7</span><br></pre></td></tr></table></figure><h5 id="修改ks文件"><a href="#修改ks文件" class="headerlink" title="修改ks文件"></a>修改ks文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kickstart文件默认保存在/var/lib/cobbler/kickstarts/sample_end.ks中</span></span><br><span class="line"><span class="comment">#需要修改如下信息</span></span><br><span class="line"><span class="comment">#指定repo仓库，是导入自动生成的</span></span><br><span class="line">url=<span class="string">"http://192.168.163.131/cobbler/ks_mirror/centos7/"</span></span><br></pre></td></tr></table></figure><h5 id="添加profile"><a href="#添加profile" class="headerlink" title="添加profile"></a>添加profile</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据kickstart配置指定distro的profile</span></span><br><span class="line">cobbler profile add --name=Centos7 --distro=Centos7 --kickstart=/var/lib/cobbler/kickstarts/sample_end.ks</span><br></pre></td></tr></table></figure><h5 id="修改default"><a href="#修改default" class="headerlink" title="修改default"></a>修改default</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录界面默认设置保存在/var/lib/tftpboot/pxelinux.cfg/default文件下</span></span><br><span class="line">DEFAULT vesamenu.c32</span><br><span class="line">PROMPT 0</span><br><span class="line">MENU TITLE Cobbler | http://cobbler.github.io/</span><br><span class="line">TIMEOUT 20</span><br><span class="line">TOTALTIMEOUT 6000</span><br><span class="line">ONTIMEOUT centos7-x86_64</span><br><span class="line"></span><br><span class="line">LABEL <span class="built_in">local</span></span><br><span class="line">MENU LABEL (<span class="built_in">local</span>)</span><br><span class="line">MENU DEFAULT</span><br><span class="line">LOCALBOOT -1</span><br><span class="line"></span><br><span class="line">LABEL centos7-Everything-x86_64</span><br><span class="line">kernel /images/centos7-Everything-x86_64/vmlinuz</span><br><span class="line">MENU LABEL centos7-Everything-x86_64</span><br><span class="line">append initrd=/images/centos7-Everything-x86_64/initrd.img ksdevice=bootif lang=  kssendmac text  ks=http://192.168.163.131/cblr/svc/op/ks/profile/centos7-Everything-x86_64</span><br><span class="line">ipappend 2</span><br><span class="line">LABEL centos7-x86_64</span><br><span class="line">kernel /images/centos7-x86_64/vmlinuz</span><br><span class="line">MENU LABEL centos7-x86_64</span><br><span class="line">append initrd=/images/centos7-x86_64/initrd.img ksdevice=bootif lang=  text net.ifnames=0 biosdevname=0 kssendmac  ks=http://192.168.163.131/cblr/svc/op/ks/profile/centos7-x86_64</span><br><span class="line">ipappend 2</span><br><span class="line">MENU end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> dhcp </tag>
            
            <tag> pxe </tag>
            
            <tag> cobbler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>varnish详解</title>
      <link href="/2020/01/20/varnish%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/20/varnish%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="有效性机制"><a href="#有效性机制" class="headerlink" title="有效性机制"></a>有效性机制</h4><h5 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h5><ul><li><p>expires：定义过期的绝对时间</p></li><li><p>Cache-Control：maxage=number，表示缓存number秒时间，是相对时长</p></li><li><p>Cache-Control：s-maxage=number，同上</p><a id="more"></a><h5 id="条件式请求"><a href="#条件式请求" class="headerlink" title="条件式请求"></a>条件式请求</h5></li><li><p>Last-Modified/If-Modified-Since，不基于固定时间来缓存，而是每次缓存客户端向上级服务器请求该资源的时间戳，如果没有改变，上级服务器返回304响应码即可。</p></li><li><p>Etag/If-None-Match，基于文件内容的校验码机制，其余同上</p></li></ul><p>通常将上述两种请求方式结合起来使用。第一次访问时客户端缓存在本地，同时设置过期时间，然后后续的请求都根据过期时间来判断是否需要向后端服务器请求。如果没有过期则直接本地缓存响应，如果过期了就使用条件式请求，如果服务器返回304则表示缓存仍未过期，此时重新设置过期时间；如果服务器返回200则表示缓存过期，同时将新的响应缓存下来，也同时设置过期时间。</p><h4 id="缓存相关报文首部"><a href="#缓存相关报文首部" class="headerlink" title="缓存相关报文首部"></a>缓存相关报文首部</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求报文</span></span><br><span class="line">cache-request-directive：</span><br><span class="line">no-cache：不用缓存内容响应</span><br><span class="line"></span><br><span class="line"><span class="comment">#响应报文，由缓存服务器发送给客户端的报文</span></span><br><span class="line">cache-response-directive：</span><br><span class="line">public：公共缓存可缓存(私有也可以)</span><br><span class="line">private：仅私有缓存可缓存</span><br><span class="line">no-cache：可缓存，但是响应给客户端之前要强制使用条件式请求判断</span><br><span class="line">no-store：不能存储响应于缓存中</span><br><span class="line">maxage：设置缓存相对时长</span><br></pre></td></tr></table></figure><h3 id="Varnish"><a href="#Varnish" class="headerlink" title="Varnish"></a>Varnish</h3><h4 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h4><p><img src="/2020/01/20/varnish%E8%AF%A6%E8%A7%A3/%E6%9E%B6%E6%9E%84.jpg" alt></p><p>主要由varnishd守护进程组成，它包含如下几个部分</p><ul><li>Manager process进程，即管理进程</li><li>Cache process进程，包含多种类型的线程如accept、worker、expiry、log/stats、storage</li></ul><p>shared memory log，用于统计缓存命中数据和记录日志的进程，有相关进程varnishlog、varnishncsa、varnishstat等</p><p>配置接口：VCL，即定义管理缓存相关设置时需要通过vcl complier编译成c语言，然后把c编译成共享模块，以供Cache进程调用。</p><h4 id="程序环境"><a href="#程序环境" class="headerlink" title="程序环境"></a>程序环境</h4><p>/etc/varnish/varnish.params：配置varnish服务进程的工作特性，例如监听的地址和端口，缓存机制</p><p>/etc/varnish/default.vcl：配置各Child/Cache线程的缓存工作策略</p><p>/usr/bin/varnishd：主程序</p><p>/usr/bin/varnishadm：命令行接口</p><p>/usr/bin/varnishhist等属于统计命中数据和记录日志的程序</p><p>/usr/bin/varnishtest：测试工具</p><p>/usr/sbin/varnish_reload_vcl：vcl配置文件重载程序</p><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p>varnish可以使用基于内存的缓存和磁盘文件缓存</p><ul><li>malloc[,size]：缓存保存在内存中，指明内存大小</li><li>file[,path[,size]]：缓存保存在文件中，指明文件路径和大小</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>varnish自身启动的配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/varnish/varnish.params</span></span><br><span class="line"><span class="comment">#启动服务时是否重载VCL配置文件</span></span><br><span class="line">RELOAD_VCL=1</span><br><span class="line"><span class="comment">#默认VCL配置文件</span></span><br><span class="line">VARNISH_VCL_CONF=/etc/varnish/default.vcl</span><br><span class="line"><span class="comment">#Varnish服务的监听端口，一般改为80</span></span><br><span class="line">VARNISH_LISTEN_PORT=80</span><br><span class="line"><span class="comment">#定义远程管理端口和地址</span></span><br><span class="line">VARNISH_ADMIN_LISTEN_ADDRESS=127.0.0.1</span><br><span class="line">VARNISH_ADMIN_LISTEN_PORT=6082</span><br><span class="line"><span class="comment">#上述管理接口远程连接时候需要的密钥文件(客户端和服务端必须一样才可以连接)</span></span><br><span class="line">VARNISH_SECRET_FILE=/etc/varnish/secret</span><br><span class="line"><span class="comment">#使用缓存类型，此处为内存缓存，大小为256M</span></span><br><span class="line">VARNISH_STORAGE=<span class="string">"malloc,256M"</span></span><br><span class="line"><span class="comment">#设置varnish进程的属主和属组</span></span><br><span class="line">VARNISH_USER=varnish</span><br><span class="line">VARNISH_GROUP=varnish</span><br><span class="line"><span class="comment">#运行时修改的参数(和缓存相关的参数都支持运行时修改，否则重启会导致缓存失效)，此处定义的是线程池</span></span><br><span class="line">DAEMON_OPTS=<span class="string">"-p thread_pool_min=5 -p thread_pool_max=500 -p thread_pool_timeout=300"</span></span><br><span class="line">thread_pool：线程池数量(不超过cpu物理核心数)</span><br><span class="line">thread_pool_min：每个线程池的最小线程数</span><br><span class="line">thread_pool_max：每个线程池的最大线程数</span><br><span class="line">thread_pool_timeout：空闲进程被销毁的超时时长</span><br><span class="line">thread_queue_limit：每个线程池的后援队列长度</span><br><span class="line">thread_pool_add_delay：创建线程时的等待时间(一般为0)</span><br><span class="line">thread_pool_destroy_delay：销毁线程时的等待时间(防止突然有大量请求)</span><br><span class="line">thread_pool_fail_delay：创建线程失败时隔多久再重试</span><br><span class="line">send_timeout：varnish发送给客户端的超时时长</span><br><span class="line">timeout_idle：varnish与客户端保持连接时长</span><br></pre></td></tr></table></figure><p>需要缓存的后端服务器相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/varnish/default.vcl</span></span><br><span class="line">backend default &#123;</span><br><span class="line"><span class="comment">#指明后端主机ip和端口</span></span><br><span class="line">.host = <span class="string">"ip_addr"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line"><span class="comment">#设置连接超时时长</span></span><br><span class="line">.connect_timeout = 0.5s</span><br><span class="line"><span class="comment">#设置最大连接数</span></span><br><span class="line">.max_connections = 50;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="varnishadm"><a href="#varnishadm" class="headerlink" title="varnishadm"></a>varnishadm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过定义在/etc/varnish/varnish.params的管理员ip和端口来进入命令行模式，需要指明密钥文件</span></span><br><span class="line">varnishadm -T 127.0.0.1:6082 -S /etc/varnish/secret</span><br><span class="line">vcl.load &lt;configname&gt; &lt;filename&gt;：将filename编译成配置文件configname</span><br><span class="line">vcl.use &lt;configname&gt;：使用configname配置文件</span><br><span class="line">param.show &lt;param&gt;：显示指定参数</span><br><span class="line">backend.list：列出反向代理的主机</span><br></pre></td></tr></table></figure><h4 id="VCL配置"><a href="#VCL配置" class="headerlink" title="VCL配置"></a>VCL配置</h4><h5 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h5><p>varnish的缓存管理策略。</p><p>vcl是“域”专有类型的配置语言(类似于iptables的hook)。所谓的“域”可以理解为：当用户请求达到缓存服务器时，缓存服务器会有很多的功能模块来对请求进行判断，比如是否需要缓存等；且每个模块都会指明该模块结束后下一个模块是什么，这些模块就叫做”域”，也叫做状态引擎。</p><p>VCL有多个状态引擎，状态之间存在相关性，但状态引擎彼此之间互相隔离；每个状态引擎可使用return(x)指明关联至哪一个下一级引擎；每个状态引擎对应vcl配置文件的一个配置段，以sub定义。</p><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>首先收到用户请求，在查本地缓存前先执行vcl_recv，可以执行一些预处理操作(很多规则在此处定义)。之后执行vcl_hash判断是否本地有缓存，此时有多种情况。如果缓存命中，则可以执行vcl_response，也可以执行vcl_pass到后端处理；如果缓存没命中，可以执行vcl_miss，然后可以直接后端处理或者调用vcl_pass后再到后端处理；如果不是可识别的协议，那么调用vcl_pipe直接传输给后端服务器进行响应。如果需要手动更改缓存项生效或者失效则使用vcl_purge之后会调用vcl_synth并构成响应报文执行vcl_deliver。</p><p>注意，有两个特殊的引擎：</p><ul><li>vcl_init：在所有请求处理之前都要执行的vcl代码；主要用于初始化VMODs</li><li>vcl_finl：所有请求都已经结束，在vcl配置被丢弃时调用；主要用于清理VMODs</li></ul><h5 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h5><ul><li><p>req.*：引用由客户端发给varnish的请求报文首部。</p><ul><li>req.http.Cookie：客户端的请求报文中Cookie的值</li><li>req.http.User-Agent：客户端浏览器信息</li><li>req.url：客户端请求的资源</li></ul></li><li><p>bereq.*：引用由varnish发给后端服务器的请求报文的首部。</p><ul><li>bereq.http.HEADERS(User-Agent、Referer等)</li><li>bereq.request：请求方法</li><li>bereq.url：请求的资源</li><li>bereq.proto：请求的协议版本</li><li>bereq.backend：指明要调用的后端主机</li></ul></li><li><p>beresp.*：引用由后端主机响应给varnish的响应报文的首部。</p><ul><li>beresp.http.HEADERS(User-Agent、Referer等)</li><li>beresp.status：响应的状态码</li><li>beresp.backend.name：后端服务器的主机名</li><li>beresp.ttl：后端服务器响应的内容跟的余下可缓存时长</li></ul></li><li><p>resp.*：引用由varnish响应给client的响应报文的首部。</p><ul><li>resp.proto：协议版本</li></ul></li><li><p>obj.*：引用存储在缓存空间中的缓存对象的属性；只读。</p><ul><li>obj.hits：此对象从缓存中命中的次数</li><li>obj.ttl：对象的ttl值</li><li>obj.grace：表示可以接受缓存过期多久，即过期在规定时间内仍然可用</li></ul></li><li><p>server.*：指明后端服务器的ip主机名</p><ul><li>server.ip</li><li>server.hostname</li></ul></li><li><p>client.*：指明客户端的ip</p><ul><li>client.ip</li></ul></li></ul><h5 id="变量定义域"><a href="#变量定义域" class="headerlink" title="变量定义域"></a>变量定义域</h5><p><img src="/2020/01/20/varnish%E8%AF%A6%E8%A7%A3/TIM%E5%9B%BE%E7%89%8720200120154142.png" alt></p><h5 id="缓存实例"><a href="#缓存实例" class="headerlink" title="缓存实例"></a>缓存实例</h5><p>强制对某类资源请求不检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义在vcl_recv中</span></span><br><span class="line"><span class="comment">#?i表示不区分大小写</span></span><br><span class="line">vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.url ~ <span class="string">"(?i)^/(login|admin)"</span>)&#123;</span><br><span class="line"><span class="built_in">return</span>(pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于特定类型的资源，例如公共的图片，取消其私有标识，并强行设定其可以由varnish缓存的时长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义于fetch中</span></span><br><span class="line">vcl_fetch &#123;</span><br><span class="line"><span class="comment">#判断是否是可公共缓存，一般有s-maxage标识则表示可公共缓存</span></span><br><span class="line"><span class="keyword">if</span> (beresp.http.Cache-Control !~ <span class="string">"s-maxage"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (bereq.url ~ <span class="string">"(?i)\.(jpg|png|gif|css|js|jpeg)$"</span>) &#123;</span><br><span class="line"><span class="built_in">unset</span> beresp.http.Set-Cookie;</span><br><span class="line"><span class="built_in">set</span> beresp.ttl=3600s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将真实的客户端ip传给后端服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原则放在任何地方都行，但由于要传客户端ip地址，需要放在recv下</span></span><br><span class="line">vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.restart == 0) &#123;</span><br><span class="line"><span class="keyword">if</span> (req.http.X-Fowarded-For) &#123;</span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = req.http.X-Forwarded-For + <span class="string">","</span> + client.ip;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">set</span> req.http.X-Forwarded-For = client.ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>purge实现缓存修剪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义访问控制</span></span><br><span class="line">acl purgers &#123;</span><br><span class="line"><span class="comment">#表示只允许下列规定的ip或网段执行purge</span></span><br><span class="line"><span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="string">"192.168.0.0"</span>/24;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#定义在recv中，且放在最前面</span></span><br><span class="line">vcl_recv &#123;</span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"PURGE"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!client.ip ~ purgers) &#123;</span><br><span class="line"><span class="built_in">return</span>(synth(403,<span class="string">"Purging not allowed for "</span> + client.ip));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span>(purge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#使用curl的-X选项请求页面即可使其缓存失效，用-I查看</span></span><br><span class="line">curl -X PURGE http://192.168.163.131/index.html</span><br><span class="line">curl -I PURGE http://192.168.163.131/index.html</span><br></pre></td></tr></table></figure><p>ban实现多文件缓存修剪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义访问控制</span></span><br><span class="line">acl baners &#123;</span><br><span class="line"><span class="comment">#表示只允许下列规定的ip或网段执行ban</span></span><br><span class="line"><span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="string">"192.168.0.0"</span>/24;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#手动在varnishadm命令行下执行</span></span><br><span class="line"><span class="comment">#禁止对所有.js结尾的文件的缓存</span></span><br><span class="line">ban req.url ~ .js$</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义在vcl_recv中</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"BAN"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!client.ip ~ baners) &#123;</span><br><span class="line"><span class="built_in">return</span>(synth(403,<span class="string">"baning not allowed for "</span> + client.ip));</span><br><span class="line">&#125;</span><br><span class="line">ban(<span class="string">"req.http.host == "</span> + req.http.host + <span class="string">"&amp;&amp; req.url == "</span> + req.url);</span><br><span class="line"><span class="built_in">return</span>(synth(200,<span class="string">"Ban added"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理实例"><a href="#代理实例" class="headerlink" title="代理实例"></a>代理实例</h5><p>代理多台后端主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入directors模块</span></span><br><span class="line">import directors;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义多台主机</span></span><br><span class="line">backend one &#123;</span><br><span class="line">.host = <span class="string">"localhost"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">&#125;</span><br><span class="line">backend two &#123;</span><br><span class="line">.host = <span class="string">"192.168.163.131"</span>;</span><br><span class="line">.port = <span class="string">"80"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在vcl_init中初始化多个主机为一组</span></span><br><span class="line">sub vcl_init &#123;</span><br><span class="line">new varnish = directors.round_robin();</span><br><span class="line">varnish.add_backend(one);</span><br><span class="line">varnish.add_backend(two);</span><br><span class="line"><span class="comment">#可以基于权重定义</span></span><br><span class="line">new varnish1 = directors.random();</span><br><span class="line">varnish1.add_backend(one,10);</span><br><span class="line">varnish1.add_backend(two,5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在vcl_recv中调用定义的组</span></span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="built_in">set</span> req.backend hint = varnish.backend();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于cookie绑定不同的主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以hash定义组</span></span><br><span class="line">sub vcl_init &#123;</span><br><span class="line">new h = directors.hash();</span><br><span class="line">h.add_backend(one,1);</span><br><span class="line">h.add_backend(two,1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#hash键设定为客户端的cookie</span></span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line"><span class="built_in">set</span> req.backend_hint = h.backend(req.http.cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="健康检测实例"><a href="#健康检测实例" class="headerlink" title="健康检测实例"></a>健康检测实例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义probe</span></span><br><span class="line">probe www_probe &#123;</span><br><span class="line"><span class="comment">#用于健康检测的页面，默认为“/”</span></span><br><span class="line">.url = <span class="string">"/index.html"</span>;</span><br><span class="line"><span class="comment">#定义多久检测一次</span></span><br><span class="line">.interval = 1s;</span><br><span class="line"><span class="comment">#定义响应超时时长</span></span><br><span class="line">.timeout = 1s;</span><br><span class="line"><span class="comment">#定义检测几次</span></span><br><span class="line">.window = 8;</span><br><span class="line"><span class="comment">#在定义的检测次数中检测需要成功多少次，即8此探测中成功5次则说明健康</span></span><br><span class="line">.threshold = 5;</span><br><span class="line"><span class="comment">#期望得到的响应码，默认为200</span></span><br><span class="line">.expected_response 200;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#在backend中调用</span></span><br><span class="line">backend one &#123;</span><br><span class="line">...</span><br><span class="line">.probe = www_probe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>varnishstat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">varnishstat</span><br><span class="line">-1：只显示1次</span><br><span class="line">-l：列出可以显示的所有字段列表</span><br><span class="line">-f filed：指定只显示哪个字段</span><br><span class="line"><span class="comment">#常用字段</span></span><br><span class="line">MAIN.cache_hit：缓存命中次数</span><br><span class="line">MAIN.client_req：收到的客户端请求数</span><br></pre></td></tr></table></figure><p>varnishtop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">varnishtop</span><br><span class="line">-1：只显示一次</span><br><span class="line">-i taglist：只显示有限个标签内容</span><br><span class="line">-x taglist：排除有限个标签的内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> varnish </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keepalived高可用集群</title>
      <link href="/2020/01/19/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
      <url>/2020/01/19/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h4><p>keepalived是高可用集群，可以结合nginx和lvs实现如健康检测、为集群所有节点生成ipvs规则(在配置文件中预先定义)、基于脚本调用接口进行脚本执行等功能。另外，在结合vrrp协议后，通过定义虚拟路由，可以实现冗余负载均衡器的功能，从而解决负载均衡器的单点故障问题。</p><a id="more"></a><h4 id="VRRP"><a href="#VRRP" class="headerlink" title="VRRP"></a>VRRP</h4><p>路由器使用VRRP功能后，会根据优先级确定自己在备份组中的角色。优先级高的路由器成为Master路由器，优先级低的成为Backup路由器。Master拥有对外服务的虚拟IP，提供各种网络功能，并定期发送VRRP报文(通过配置文件中指定的多播域发送)，通知备份组内的其他设备自己工作正常；Backup路由器只接收Master发来的报文信息，用来监控Master的运行状态。当Master失效时，Backup路由器进行选举，优先级高的Backup将成为新的Master。</p><p>在抢占方式下，当Backup路由器收到VRRP报文后，会将自己的优先级与报文中的优先级进行比较。如果大于通告报文中的优先级，则成为Master 路由器；否则将保持Backup状态。抢占后的路由会发送ARP请求自己的MAC地址并回答自己，由于ARP是广播类型，因此局域网内的所有主机都能收到新的路由的MAC地址，从而更新各自的信息。</p><p>在非抢占方式下，只要Master路由器没有出现故障，备份组中的路由器始终保持Master或Backup状态，Backup路由器即使随后被配置了更高的优先级也不会成为Master路由器。</p><p>如果Backup路由器的定时器超时后仍未收到Master路由器发送来的VRRP报文，则认为Master路由器已经无法正常工作，此时Backup路由器会认为自己是Master路由器，并对外发送VRRP报文。备份组内的路由器根据优先级选举出Master路由器，承担报文的转发功能。</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2020/01/19/keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/keepalived.jpg" alt></p><p>核心组件：vrrp stack、ipvs wrapper、checkers</p><p>控制组件：配置文件分析器</p><p>其他组件：IO复用器、内存管理组件</p><h3 id="配置前提"><a href="#配置前提" class="headerlink" title="配置前提"></a>配置前提</h3><ul><li>各节点时间必须同步</li><li>确保iptables及selinux清空与关闭</li><li>各节点之间可通过主机名互相通信(使用/etc/host实现)</li><li>各节点之间的root用户可以基于密钥认证的ssh服务完成互相通信</li><li>配置额各节点支持multicast多播通信</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> multicast on dev ens33</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install keepalived</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主配置文件：/etc/keepalived/keepalived.conf</p><p>主程序文件：/usr/sbin/keepalived</p><p>Unit File：keepalived.service</p><p>Unit File环境配置文件：/etc/sysconfig/keepalived</p><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ul><li>GLOBAL CONFIGURATION<ul><li>Global definitions</li><li>static routes</li></ul></li><li>VRRPD CONFIGURATION<ul><li>VRRP synchronization group：vrrp同步组</li><li>VRRP instance：vrrp服务器</li></ul></li><li>LVS CONFIGURATION<ul><li>Virtual server groups</li><li>Virtual servers：ipvs集群的vs和rs</li></ul></li></ul><h4 id="地址转换配置"><a href="#地址转换配置" class="headerlink" title="地址转换配置"></a>地址转换配置</h4><p>主要实现负载均衡器的冗余配置，一台挂了可以启动另一台(实现ip地址的转换)从而避免单点故障问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment">#配置邮件提醒</span></span><br><span class="line">   notification_email &#123;</span><br><span class="line">   root@localhost</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">#邮件发件人</span></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   <span class="comment">#邮件服务器地址</span></span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   <span class="comment">#定义虚拟主机名</span></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   <span class="comment">#定义vrrp协议的多播地址，用于定义虚拟主机的广播域</span></span><br><span class="line">   vrrp_mcast_group4 224.0.100.33</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#配置虚拟路由器</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"><span class="comment">#定义该虚拟主机是主(MASTER)还是备(BACKUP)，主只能有一个，其余都是备</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment">#定义网卡设备</span></span><br><span class="line">    interface eth0</span><br><span class="line">    <span class="comment">#定义虚拟路由器唯一标识</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment">#该虚拟主机优先级</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment">#vrrp通告间隔1s</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#认证，同一组内认证要一样</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#定义虚拟主机ip，用于与外部通信。可以指明设备和网卡别名，不设置则默认设置为网卡的辅助地址</span></span><br><span class="line">    <span class="comment">#IPADDR/MASK dev STRING label LABEL</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#定义工作模式为非抢占式</span></span><br><span class="line">    nopreempt</span><br><span class="line">    <span class="comment">#工作在抢占式，节点上线后出发新选举操作的延迟时长</span></span><br><span class="line">    preempt_delay 300</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lvs配置"><a href="#lvs配置" class="headerlink" title="lvs配置"></a>lvs配置</h4><p>使用DR模型。Director地址为172.16.0.99，两个RS地址为172.16.0.6、172.16.0.7(各自还需要设置别名172.16.0.99)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不需要使用ipvsadm生成规则，直接配置virtual_server字段即可</span></span><br><span class="line">virtual_server 172.16.0.99 80 &#123;</span><br><span class="line"><span class="comment">#每隔几秒检测一次</span></span><br><span class="line">delay_loop 1</span><br><span class="line"><span class="comment">#调度算法</span></span><br><span class="line">lb_algo wrr</span><br><span class="line"><span class="comment">#集群类型</span></span><br><span class="line">lb_kind DR</span><br><span class="line"><span class="comment">#协议</span></span><br><span class="line">protocol TCP</span><br><span class="line"><span class="comment">#错误页面服务器</span></span><br><span class="line">sorry_server ip:port</span><br><span class="line"><span class="comment">#定义RS</span></span><br><span class="line">read_server 172.16.0.6 80 &#123;</span><br><span class="line"><span class="comment">#定义权重</span></span><br><span class="line">weight 1</span><br><span class="line"><span class="comment">#定义健康检测方式</span></span><br><span class="line">HTTP_GET &#123;</span><br><span class="line"><span class="comment">#对指定url检测，根据path指定</span></span><br><span class="line">url &#123;</span><br><span class="line">path /</span><br><span class="line"><span class="comment">#只有响应码为200才正常</span></span><br><span class="line">status_code 200</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#重复检测几次</span></span><br><span class="line">nb_get_retry 3</span><br><span class="line"><span class="comment">#重试前延迟多久</span></span><br><span class="line">delay_before_retry 2</span><br><span class="line"><span class="comment">#连接超时时长</span></span><br><span class="line">connect_timeout 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">read_server 172.16.0.7 80 &#123;</span><br><span class="line"><span class="comment">#定义权重</span></span><br><span class="line">weight 1</span><br><span class="line"><span class="comment">#定义健康检测方式</span></span><br><span class="line">HTTP_GET &#123;</span><br><span class="line"><span class="comment">#对指定url检测，根据path指定</span></span><br><span class="line">url &#123;</span><br><span class="line">path /</span><br><span class="line"><span class="comment">#只有响应码为200才正常</span></span><br><span class="line">status_code 200</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#重复检测几次</span></span><br><span class="line">nb_get_retry 3</span><br><span class="line"><span class="comment">#重试前延迟多久</span></span><br><span class="line">delay_before_retry 2</span><br><span class="line"><span class="comment">#连接超时时长</span></span><br><span class="line">connect_timeout 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>nginx和keepalived实现单主高可用故障转移。</p><p>使用三台虚拟主机模拟三个RS，其ip地址分别为192.168.10.11、192.168.10.12、192.168.10.13；两台主机模拟两个冗余nginx反带服务器，使用keepalived实现单点故障冗余以及RS健康检测。</p><p>后端3个RS运行httpd，用虚拟主机实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/httpd/conf.d目录下新建配置文件vhost.conf</span></span><br><span class="line">&lt;VirtualHost 192.168.10.11:80&gt;</span><br><span class="line">ServerName 192.168.10.11</span><br><span class="line">DocumentRoot <span class="string">"/data/web/vhost1"</span></span><br><span class="line">&lt;Directory <span class="string">"/data/web/vhost1"</span>&gt;</span><br><span class="line">Options FollowSymLinks</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.10.12:80&gt;</span><br><span class="line">ServerName 192.168.10.12</span><br><span class="line">DocumentRoot <span class="string">"/data/web/vhost2"</span></span><br><span class="line">&lt;Directory <span class="string">"/data/web/vhost1"</span>&gt;</span><br><span class="line">Options FollowSymLinks</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.10.13:80&gt;</span><br><span class="line">ServerName 192.168.10.13</span><br><span class="line">DocumentRoot <span class="string">"/data/web/vhost3"</span></span><br><span class="line">&lt;Directory <span class="string">"/data/web/vhost1"</span>&gt;</span><br><span class="line">Options FollowSymLinks</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>接着，为了使keepalived结合nginx，用于检测nginx服务是否挂了，如果挂了就开启nginx，如果开启不了nginx就降低优先级让另一台nginx来抢占即可。这里需要使用脚本来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本一般定义在实例之外，方便调用</span></span><br><span class="line">vrrp_script &lt;SCRIPT_NAME&gt; &#123;</span><br><span class="line"><span class="comment">#脚本命令，脚本执行失败会执行下述命令</span></span><br><span class="line">script <span class="string">""</span></span><br><span class="line"><span class="comment">#间隔多久检测</span></span><br><span class="line">interval INT</span><br><span class="line"><span class="comment">#失败了，即上述命令返回值为1时权重减少多少</span></span><br><span class="line">weight -INT</span><br><span class="line"><span class="comment">#失败多少此后降低优先级</span></span><br><span class="line">fall INT</span><br><span class="line"><span class="comment">#成功多少次后恢复优先级</span></span><br><span class="line">rise INT</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#在vrrp_instance的track_script中根据脚本名调用脚本</span></span><br><span class="line">track_script &#123;</span><br><span class="line">SCRIPT_NAME</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测nginx是否正常工作的脚本</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line"><span class="comment">#killall -0表示查看nginx是否可以杀死，但不动手，从而检测nginx是否在运行(可以杀死说明在运行)</span></span><br><span class="line">script <span class="string">"killall -0 nginx &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">interval 1</span><br><span class="line">weight 5</span><br><span class="line">fall 2</span><br><span class="line">rise 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#根据/etc/keepalived/down文件是否存在来修改优先级，可以实现对某个主机下线做修复操作</span></span><br><span class="line">vrrp_script chk_down &#123;</span><br><span class="line"><span class="comment">#如果文件存在就降低优先级</span></span><br><span class="line">script <span class="string">"[[ -f /etc/keepalived/down ]] &amp;&amp; exit 1 || exit 0"</span></span><br><span class="line">interval 1</span><br><span class="line">weight -5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两台nginx主机上配置nginx负载均衡。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream websrvs &#123;</span><br><span class="line">server 192.168.10.11:80;</span><br><span class="line">server 192.168.10.12:80;</span><br><span class="line">server 192.168.10.13:80;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#在server的location中定义</span></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://websrvs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写通知脚本，实现keepalived状态发生变化时进行邮件通知以及启动nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">contact=<span class="string">'root@localhost'</span></span><br><span class="line"><span class="function"><span class="title">notify</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> mailsubject=<span class="string">"`hostname` to be <span class="variable">$1</span>, vip floating"</span></span><br><span class="line"><span class="built_in">local</span> maibody=<span class="string">"`date +%F %T`: vrrp tansition, `hostname` changed to be <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$mailbody</span>"</span> | mail -s <span class="string">"<span class="variable">$mailsubject</span>"</span> <span class="variable">$contact</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">master)</span><br><span class="line">systemctl start nginx</span><br><span class="line">notify master</span><br><span class="line">;;</span><br><span class="line">backup)</span><br><span class="line">systemctl start nginx</span><br><span class="line">notify backup</span><br><span class="line">;;</span><br><span class="line">fault)</span><br><span class="line">systemctl stop nginx</span><br><span class="line">notify fault</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: `basename <span class="variable">$0</span>` &#123;master|backup|fault&#125;"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上述脚本定义在vrrp_instance中执行，当keepalived的状态改变时会执行对应的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notify_master &#39;&#x2F;etc&#x2F;keeplived&#x2F;notify.sh master&#39;</span><br><span class="line">notify_backup&#39;&#x2F;etc&#x2F;keeplived&#x2F;notify.sh backup&#39;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>以上使用的是单主机的keepalived和nginx的调度，在整个调度中都会有一个主机处于空闲状态，浪费资源，因此可以使用双主调度。只需要再配置一个vrrp_instance即可，要注意两个主机唯一标识、认证以及优先级的设计，可以设计第一台的两个虚拟主机优先级一个是100，另一个是90；同理第二台主机分别是90和100(注意两台主机的100和对应的90是一组)，这样就可以实现没有空闲主机的情况，增加利用率。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> nginx </tag>
            
            <tag> keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVS四层负载均衡</title>
      <link href="/2020/01/17/LVS%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/01/17/LVS%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Cluster：计算机集合，为解决某个特定问题组合起来形成的单个系统</p><a id="more"></a><h4 id="系统扩展方式"><a href="#系统扩展方式" class="headerlink" title="系统扩展方式"></a>系统扩展方式</h4><p>Scale UP：向上扩展，即增加单个服务器容量</p><p>Scale OUT：向外扩展，即增加服务器数量(Cluster)</p><h4 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h4><p>由于使用负载均衡后，用户的请求会被负载均衡器分配到不同的后端服务器中，那么如何记录用户的会话身份就显得很重要。主要有如下三种方式：</p><ul><li>session sticky：每个用户绑定固定的后端服务器，可以根据源ip或者cookie来绑定</li><li>session replication：即将每个后端主机的session信息互相同步</li><li>session server：采用一个固定的session服务器专门保存会话信息</li></ul><h4 id="Linux-Cluster类型"><a href="#Linux-Cluster类型" class="headerlink" title="Linux Cluster类型"></a>Linux Cluster类型</h4><p>LB：Load Balanceing，负载均衡</p><p>HA：High Availability，高可用；A=MTBF/(MTBF+MTTR)。(平均无故障时间)/(平均无故障时间+平均修复时间)</p><p>HP：High performance，高性能</p><p>分布式存储：类似于集群概念。将客户端请求通过一个服务器分发给多个服务器，其中起分发功能的服务器叫做元数据服务器，它保存各个数据在数据服务器的位置，即只存储数据的元信息。数据服务器负责真正存储数据，且为了安全一份数据通常在两个不同的数据服务器之间做冗余。另外，如果用户请求一个大文件，且请求量很大，可以将该大文件切片并放在不同的数据服务器上，一次发给用户即可。该结构模型类似文件系统模型。</p><p>分布式计算：将一个单一大问题分隔成数个小问题来解决。例如处理100亿条日志，需要提取访问量前10的日志信息，则可以根据服务器数量，将总体分隔成多个部分进行分开计算，再整合，再计算，这就叫分布式计算。</p><h5 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h5><p>F5的Big-ip；Citrix的Netscaler；A10的A10</p><h5 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h5><p>传输层(DPORT)：</p><ul><li>lvs(Linux Virtual Server)</li><li>nginx(stream模块)</li><li>haproxy(mode tcp)</li></ul><p>应用层(自定义请求模型)：</p><ul><li>http：nginx、httpd、haproxy</li><li>fastcgi：nginx、httpd</li></ul><h3 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h3><p>Linux virtual server</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>它是工作在传输层的内核软件，也叫四层路由器。它根据请求报文的目标IP和目标协议及端口将其转发至某RealServer(RS)，根据调度算法来挑选RS。</p><p>VS：虚拟主机也叫Director，即用于调度分发客户端请求的服务器，也叫负载均衡器</p><p>RS：真实服务器，即用于处理客户端请求的服务器</p><p>ipvsadm：lvs的用户空间命令行工具，规则管理工具，用于管理集群服务及RS</p><p>ipvs：lvs工作于内核空间的INPUT上的一个框架</p><p>CIP：客户端的IP</p><p>VIP：VS用于响应客户端请求的IP</p><p>DIP：VS用于响应RS的IP</p><p>RIP：RS的IP</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><h5 id="lvs-nat"><a href="#lvs-nat" class="headerlink" title="lvs-nat"></a>lvs-nat</h5><p>修改请求报文的目标IP和端口，适用于多目标的DNAT</p><ul><li>RIP和DIP必须处于同一IP网络，且应该使用私网地址；RS网关指向DIP</li><li>请求报文和响应报文都必须经由Director转发；Director可能成为系统瓶颈</li><li>支持端口映射，可修改请求报文的目标PORT</li><li>VS即Director必须是Linux系统，RS可以是任何系统</li></ul><h5 id="lvs-dr"><a href="#lvs-dr" class="headerlink" title="lvs-dr"></a>lvs-dr</h5><p>不修改IP和端口，而修改MAC地址。即为请求报文重新生成一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是挑出的RS的RIP所在接口的MAC地址。</p><ul><li>确保前端路由器将目标IP为VIP的请求报文发往Director<ul><li>法一：在前端网关做静态绑定，但不灵活。</li><li>法二：在RS上使用arptables做MAC访问控制</li><li>法三：在RS上修改内核参数以限制arp通告及应答级别(arp_announce、arp_ignore)<ul><li>arp_announce：默认0，表示在接入网络时把本机所有接口的所有信息向每个接口上的网络进行通告；1表示尽量避免向非直连网络进行通告；2表示避免向非本网络通告。</li><li>arp_ignore：默认0，表示可使用本地任意接口上配置的任意地址进行响应；1表示尽在请求的目标ip配置在本地主机的接收请求报文的接口上时才给予响应。</li></ul></li></ul></li><li>RS的RIP可以使用私网地址，也可使用公网地址；RIP与DIP在同一IP网络；RIP网关不能指向DIP，以确保响应报文不经由Director</li><li>RS跟Director在同一物理网络(同一交换机，不能隔路由器)</li><li>请求报文要经由Director，但响应报文不能经由Director，而是经由RS直接发往client</li><li>不支持端口映射</li></ul><h5 id="lvs-tun"><a href="#lvs-tun" class="headerlink" title="lvs-tun"></a>lvs-tun</h5><p>隧道概念，不修改请求报文的IP首部(源IP为CIP，目标IP为VIP)，而是在原有请求的IP报文之外新加一个IP首部(源IP为DIP，目标IP为RIP)，之后将报文发往挑选出的RS，最后RS直接响应给客户端(源IP为VIP，目标IP为CIP)。但会引起超出MTU的问题。</p><ul><li>DIP、VIP、RIP都是公网地址</li><li>RS的网关不能指向DIP</li><li>请求报文要经由Director，但响应报文不能经由Director</li><li>不支持端口映射</li><li>RS的OS得支持隧道功能</li></ul><h5 id="lvs-fullnat"><a href="#lvs-fullnat" class="headerlink" title="lvs-fullnat"></a>lvs-fullnat</h5><p>不同于nat，它修改目标IP和源IP(CIP修改为DIP，VIP修改为RIP)</p><ul><li>VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络；因此，RIP的网关不会指向DIP</li><li>RS收到的请求报文源IP是DIP，因此只需响应给DIP；但Director还要将其发往Client</li><li>请求和响应报文都经由Director</li><li>支持端口映射</li><li>此模型默认不支持</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>lvs-nat、lvs-fullnat的请求都经过Director，区别在于nat模型中，RIP的网关要指向DIP；而fullnat的RIP和DIP未必在同一IP网络，但他们要能通信。且nat进修改请求报文的目标ip，而fullnat修改请求报文的源ip和目标ip。</p><p>lvs-dr、lvs-tun的请求报文都经过Director，响应报文都由RS直接发往Client。区别在于dr模型通过封装新的MAC首部实现，通过MAC转发；而tun模型通过在原有的IP报文之外再封装新的IP实现转发，支持远距离通信。</p><h4 id="调度方法"><a href="#调度方法" class="headerlink" title="调度方法"></a>调度方法</h4><p>根据调度时是否考虑各RS当前的负载状态，可分为静态方法和动态方法两种。</p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>仅根据算法本身进行调度。</p><ul><li>RR：roundrobin，轮询</li><li>WRR：weighted RR，加权轮询，即将RS虚拟出多个，把个数作为权重</li><li>SH：Source Hashing，实现session sticky，源ip地址hash；在Director内存中维护一张hash表，客户端IP和RS的IP一一对应。(第一次请求时使用WRR并记录源地址hash和对应RS的IP)。缺点是当RS挂掉时对应的客户端的session也会丢失。</li><li>DH：Destination Hashing，目标地址hash，将发往同一个目标地址的请求始终转发至第一次挑中的RS，典型使用场景是正向代理缓存场景中的负载均衡。</li></ul><h5 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h5><p>主要根据每个RS当前的负载状态进行调度，负载一样再考虑算法本身。负载值(overhead)</p><ul><li>LC：least connection，最少连接<ul><li>overhead=activeconns*256+inactiveconns</li></ul></li><li>WLC：weighted LC，加权最少连接<ul><li>overhead=(activeconns*256+inactiveconns)/weight</li></ul></li><li>SED：shortest Expection Delay，最短期望延迟<ul><li>overhead=(activeconns+1)*256/weight</li></ul></li><li>NQ：Never Queue</li><li>LBLC：Locality-Based LC，动态DH算法</li><li>LBLCR：LBLC with Replication，带复制功能的LBLC</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Director安装</span></span><br><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure><h4 id="管理集群"><a href="#管理集群" class="headerlink" title="管理集群"></a>管理集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增、改</span></span><br><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]]</span><br><span class="line"><span class="comment">#删</span></span><br><span class="line">ipvsadm -D -t|u|f service-address</span><br><span class="line">service-address：</span><br><span class="line">-t：TCP协议端口，VIP:TCP_PORT</span><br><span class="line">-u：UDP协议端口，VIP:UDP_PORT</span><br><span class="line">-f：firewall MARK，是一个数字</span><br><span class="line">[-s scheduler]：指定集群调度算法，默认为WLC</span><br></pre></td></tr></table></figure><h4 id="管理集群的RS"><a href="#管理集群的RS" class="headerlink" title="管理集群的RS"></a>管理集群的RS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增、改</span></span><br><span class="line">ipvsadm -a|e -t|u|f service-address [-g|i|m] [-w weight]</span><br><span class="line"><span class="comment">#删</span></span><br><span class="line">ipvsadm -d -t|u|f service-address -r server-address</span><br><span class="line">server-address：</span><br><span class="line">rip[:port]</span><br><span class="line">-g：gateway，dr类型</span><br><span class="line">-i：ipip，tun类型</span><br><span class="line">-m：masquerade，nat类型</span><br></pre></td></tr></table></figure><h4 id="删除和查看"><a href="#删除和查看" class="headerlink" title="删除和查看"></a>删除和查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除</span></span><br><span class="line">ipvsadm -C</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">ipvsadm -L|l [options]</span><br><span class="line">--numeric,-n：数字格式ip地址和端口</span><br><span class="line">--exact；精确显示</span><br><span class="line">--connection,-c：查看具体连接信息，即哪些请求被转发到哪些RS</span><br><span class="line">--stats：统计数据</span><br><span class="line">conns：连接数</span><br><span class="line">InPkts：入栈报文数量</span><br><span class="line">OutPkts：出栈报文数量</span><br><span class="line">InBytes：入栈字节数</span><br><span class="line">OutBytes：出栈字节数</span><br><span class="line">--rate：速率数据</span><br><span class="line">CPS：每秒建立的连接数</span><br><span class="line">InPPS：每秒入栈报文数</span><br><span class="line">OutPPS：每秒出栈报文数</span><br><span class="line">InBPS：每秒入栈字节数</span><br><span class="line">OutBPS：每秒出栈字节数</span><br></pre></td></tr></table></figure><h4 id="保存和重载"><a href="#保存和重载" class="headerlink" title="保存和重载"></a>保存和重载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存</span></span><br><span class="line">ipvsadm -S &gt; /etc/sysconfig/ipvsadm</span><br><span class="line">ipvsadm-save &gt; /etc/sysconfig/ipvsadm</span><br><span class="line"><span class="comment">#重载</span></span><br><span class="line">ipvsadm -R &lt; /etc/sysconfig/ipvsadm</span><br><span class="line">ipvsadm-restore &lt; /etc/sysconfig/ipvsadm</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="NAT集群"><a href="#NAT集群" class="headerlink" title="NAT集群"></a>NAT集群</h5><p>使用nat模型实现集群。一台Director(两块网卡，一个VIP，一个DIP)，两台RS。</p><p>首先配置RS1、RS2，他们ip地址分别为192.168.163.11、192.168.163.12，网关地址为192.168.163.254，该网关地址也是Director的DIP。Director的VIP为一个外网地址(注意Director必须开启核心转发功能)。由此外网主机就可以通过Director的VIP地址访问两台RS.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建集群</span></span><br><span class="line">ipvsadm -A -t VIP_address:port -s rr</span><br><span class="line"><span class="comment">#创建集群上的rule</span></span><br><span class="line">ipvsadm -a -t VIP_address:port -r 192.168.163.11 -m</span><br><span class="line">ipvsadm -a -t VIP_address:port -r 192.168.163.12 -m</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改集群调度算法为wrr(加权rr)</span></span><br><span class="line">ipvsadm -E -t VIP_address:port -s wrr</span><br><span class="line"><span class="comment">#修改rule权重</span></span><br><span class="line">ipvsadm -e -t VIP_address:port -r 192.168.163.11 -m -w 2</span><br><span class="line">ipvsadm -e -t VIP_address:port -r 192.168.163.12 -m -w 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一条rule</span></span><br><span class="line">ipvsadm -d -t VIP_address:port -r 192.168.163.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，port根据具体服务选择，比如web服务一般是80端口，telnet就设置23端口即可。不同的端口相互隔离。</span></span><br></pre></td></tr></table></figure><h5 id="DR集群"><a href="#DR集群" class="headerlink" title="DR集群"></a>DR集群</h5><p>使用dr模型实现集群。一台Director(一块网卡，只要VIP)，两台RS。RS和Director在同一网段(网关一样)。</p><p>Directory地址设置为172.16.0.99(VIP)，不需要DIP地址。</p><p>两台RS地址设置分别为172.168.0.7(RIP)、172.168.0.8(RIP)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内核参数，/proc/sys/net/ipv4/conf/</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置RS的另一个ip地址，设置在lo的别名上</span></span><br><span class="line">ifconfig lo:0 172.16.0.99 netmask 255.255.255.255 broadcast 172.16.0.99 up</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置RS的路由条目</span></span><br><span class="line"><span class="comment">#因为需要由RS直接将结果反回给Client，所以设置路由条目，将目的ip为VIP的全部转发经由lo:0来转发，这样发送给Clent的源ip就是VIP，与用户请求的目的IP一样</span></span><br><span class="line">route add -host 172.168.0.99 dev lo:0</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置Director的ip别名</span></span><br><span class="line"><span class="comment">#因为我们设置的VIP是172.16.0.99，即外网Client通过VIP访问，我们需要在与外界通信的物理网卡上配置别名，ip地址改为VIP。</span></span><br><span class="line"><span class="comment">#此处broadcast只是将本网段的广播全都转发给172.16.0.99，正常的ARP仍可以响应</span></span><br><span class="line">ifconfig ens33:0 172.16.0.99 netmask 255.255.255.255 broadcast 172.16.0.99 up</span><br><span class="line"></span><br><span class="line"><span class="comment">#Director添加集群</span></span><br><span class="line">ipvsadm -A -t 172.168.0.99:80 -s rr</span><br><span class="line"><span class="comment">#创建集群上的rule</span></span><br><span class="line">ipvsadm -a -t 172.168.0.99:80 -r 172.168.0.7 -m</span><br><span class="line">ipvsadm -a -t 172.168.0.99:80 -r 172.168.0.8 -m</span><br></pre></td></tr></table></figure><h5 id="防火墙标记"><a href="#防火墙标记" class="headerlink" title="防火墙标记"></a>防火墙标记</h5><p>使用iptables在请求进入Director的Prerouting时加不同的防火墙标记，当请求经由input链时按照lvs根据防火墙标记设计的规则就可以实现对不同的端口的访问全部绑定一起进行调度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将80和443端口进行iptables打包</span></span><br><span class="line">iptables -t mangle -A PREROUTING -d 172.16.0.99 -p tcp -m multiport --dports 80,443 -j MARK --<span class="built_in">set</span>-mark 3</span><br><span class="line"><span class="comment">#根据mark添加集群</span></span><br><span class="line">ipvsadm -A -f 3 -s rr</span><br><span class="line"><span class="comment">#添加RS</span></span><br><span class="line">ipvsadm -a -f 3 -r 172.16.0.7 -g</span><br><span class="line">ipvsadm -a -f 3 -r 172.16.0.8 -g</span><br></pre></td></tr></table></figure><h5 id="会话保持-1"><a href="#会话保持-1" class="headerlink" title="会话保持"></a>会话保持</h5><p>使用ipvsadm的-p选项实现调度算法之上的会话绑定。即客户端第一次访问时仍然按照选定的算法来调度，但是同一客户端之后的访问都会被绑定到第一次调度的主机上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在上面基础上修改集群，默认360s</span></span><br><span class="line">ipvsadm -E -f 3 -s rr -p</span><br></pre></td></tr></table></figure><h5 id="全端口绑定"><a href="#全端口绑定" class="headerlink" title="全端口绑定"></a>全端口绑定</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口设0表示全端口转发，且此时必须设置-p选项</span></span><br><span class="line">ipvsadm -A -t 172.16.0.99:0 -s rr -p</span><br><span class="line">ipvsadm -a -t 172.16.0.99:0 -r 172.16.0.7 -g</span><br><span class="line">ipvsadm -a -t 172.16.0.99:0 -r 172.16.0.8 -g</span><br></pre></td></tr></table></figure><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ul><li>Director存在单点故障问题(SPoF)，解决方法使用高可用集群实现。<ul><li>keepalived，它既可以冗余Director也可以检测RS的生命状态</li><li>heartbeat/corosync</li></ul></li><li>某RS不可用，Director仍然会调度请求该RS，可以通过网络层(ping)、传输层(端口探测)、应用层检测(请求某关键资源)<ul><li>keeplived</li><li>ldirectord</li></ul></li></ul><h4 id="Idirectord"><a href="#Idirectord" class="headerlink" title="Idirectord"></a>Idirectord</h4><p>工作在Director主机上，对后端主机进行健康检测并修改Director的规则。启用ldirectord后，会根据配置文件需要检测的RS自动添加Director的规则条目，对无法访问的将自动删除。</p><p>由于ldirectord不在官方仓库和epel仓库中，因此要使用rpm安装。</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#超时时长</span></span><br><span class="line">checktimeout=time</span><br><span class="line"><span class="comment">#每隔多久检测一次</span></span><br><span class="line">checkinterval=time</span><br><span class="line"><span class="comment">#所有RS全挂使用什么来处理请求</span></span><br><span class="line">fallback=127.0.0.1:80</span><br><span class="line"><span class="comment">#是否自动重载配置文件</span></span><br><span class="line">autoreload=yes</span><br><span class="line"><span class="comment">#日志文件</span></span><br><span class="line">logfile=<span class="string">""</span></span><br><span class="line"><span class="comment">#通知邮箱</span></span><br><span class="line">emailalert=<span class="string">""</span></span><br><span class="line"><span class="comment">#通知频率</span></span><br><span class="line">emailalertfreq=<span class="string">""</span></span><br><span class="line"><span class="comment">#定义VIP，也可以根据防火墙标签定义</span></span><br><span class="line">virtual VIP_ADDRESS:PORT</span><br><span class="line"><span class="comment">#定义RIP</span></span><br><span class="line"><span class="built_in">read</span>=RIP:PORT gate(dr模型)</span><br><span class="line"><span class="comment">#指明该集群应用层协议</span></span><br><span class="line">service=http</span><br><span class="line"><span class="comment">#指明检测主页</span></span><br><span class="line">request=<span class="string">"index.html"</span></span><br><span class="line"><span class="comment">#请求主页包含关键字</span></span><br><span class="line">receive=<span class="string">"Test Page"</span></span><br><span class="line"><span class="comment">#向指定虚拟主机发送请求</span></span><br><span class="line">virtualhost=www.x.y.z</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lvs </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx详解</title>
      <link href="/2020/01/15/nginx%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/15/nginx%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="事件驱动模型"><a href="#事件驱动模型" class="headerlink" title="事件驱动模型"></a>事件驱动模型</h3><p>事件驱动指当用户进程发起磁盘io时，该进程告诉内核一个回调接口，即内核加载磁盘数据到内核空间后会通知发起该动作的进程。随后，进程接收到回调信号后，参与数据从内核空间到进程空间的过程。在Linux中，事件驱动的系统调用叫做epoll，由libevent包提供。</p><a id="more"></a><h3 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h3><p><img src="/2020/01/15/nginx%E8%AF%A6%E8%A7%A3/nginx.jpg" alt></p><p>nginx基于master-worker模型，即一个主控进程master生成多个子进程worker来处理用户请求。其中master负责加载和分析配置文件、管理worker进程和平滑升级。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>异步、事件驱动、非阻塞</p><p>并发请求：epoll</p><p>文件io：sendfile，mmap</p><p>模块化：支持动态装载和卸载，包括core module、http modules、mail modules和stream modules(传输层代理，即4层代理)</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>静态web服务器资源</li><li>结合FastCGI协议实现反代动态资源请求</li><li>http/https协议的反向代理</li><li>imap4/pop3协议的反向代理</li><li>tcp/udp的反向代理</li></ul><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>主程序文件：/usr/sbin/nginx</p><p>unit file：nginx.service</p><p>配置文件：/etc/nginx/nginx.conf、/etc/nginx/conf.d/*.conf、fastcgi、mimetypes等</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum makecache</span><br><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件后使用如下命令检查和重载配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="运行必备"><a href="#运行必备" class="headerlink" title="运行必备"></a>运行必备</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用用户名，也可用组名</span></span><br><span class="line">user user [group];</span><br><span class="line"><span class="comment">#指定nginx进程路径</span></span><br><span class="line">pid /path;</span><br><span class="line"><span class="comment">#指明包含其他配置文件路径</span></span><br><span class="line">include file | mask;</span><br><span class="line"><span class="comment">#指明动态装载的模块</span></span><br><span class="line">load_module file;</span><br></pre></td></tr></table></figure><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#worker进程数量，通常小于等于cpu的物理核心数</span></span><br><span class="line">worker_process number | auto;</span><br><span class="line"><span class="comment">#将cpu与nginx进程绑定，主要用于专机专用</span></span><br><span class="line">worker_cpu_affinity cpumask | auto;</span><br><span class="line"><span class="comment">#指定worker进程的nice值[-20,19]</span></span><br><span class="line">worker_priority number;</span><br><span class="line"><span class="comment">#所有的worker进程所能打开的文件数量上限</span></span><br><span class="line">worker_rlimit_nofile</span><br></pre></td></tr></table></figure><h4 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否以守护进程的方式运行nginx，通常设置在centos6上，因为7已经编程systemd管理</span></span><br><span class="line">daemon on | off;</span><br><span class="line"><span class="comment">#是否以master/worker模型运行nginx；默认为on</span></span><br><span class="line">master_process on | off;</span><br><span class="line"><span class="comment">#错误日志路径和日志级别，自我管理，不使用rsyslog</span></span><br><span class="line">error_log file [level];</span><br></pre></td></tr></table></figure><h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">放在events段中</span><br><span class="line"><span class="comment">#每个worker进程能够打开的最大进程并发数</span></span><br><span class="line">worker_connections number;</span><br><span class="line"><span class="comment">#指明并发连接请求的处理方法</span></span><br><span class="line">use method;</span><br><span class="line"><span class="comment">#处理连接请求的方法；on表示各worker轮流处理，off表示各个请求到达会通知所有worker</span></span><br><span class="line">accept_mutex on | off;</span><br></pre></td></tr></table></figure><h4 id="http相关"><a href="#http相关" class="headerlink" title="http相关"></a>http相关</h4><h5 id="套接字配置"><a href="#套接字配置" class="headerlink" title="套接字配置"></a>套接字配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置虚拟主机</span></span><br><span class="line">server&#123;</span><br><span class="line">listen address[:port]|port;</span><br><span class="line">default_server：设定为默认主机</span><br><span class="line">ssl：限制只能通过ssl连接提供服务，即通过https</span><br><span class="line">backlog=number：后援队列长度</span><br><span class="line">rcvbuf=size：接收缓冲区大小</span><br><span class="line">sndbuf=size：发送缓冲区大小</span><br><span class="line">server_name SERVER_NAME;</span><br><span class="line">指明虚拟主机的名称，可以跟多个由空白字符分隔的字符串</span><br><span class="line">支持*通配任意字符长度、支持~起始的字符做正则表达式模式匹配</span><br><span class="line">匹配机制：首先是字符串精确匹配，然后是左侧匹配，然后是右侧匹配，最后是正则匹配</span><br><span class="line"><span class="comment">#设置root就说明是正向服务器</span></span><br><span class="line">root /path;</span><br><span class="line"><span class="comment">#设置proxy_pass说明是反向代理服务器，此时root无效</span></span><br><span class="line">proxy_pass http://ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在keep_alive模式下是否启用nodelay选项，用于处理用户请求资源过小时是否组合多个资源发送</span></span><br><span class="line">tcp_nodelay on | off;</span><br><span class="line"><span class="comment">#在sendfile模式下是否启用nopush选项。用于一次性将整个file(包括头部)放在一个packet中发送过去。</span></span><br><span class="line">tcp_nopush on | off;</span><br><span class="line"><span class="comment">#动态资源是否直接在内存空间发送而不经过用户空间</span></span><br><span class="line">sendfile on | off;</span><br></pre></td></tr></table></figure><h5 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置web路径映射，用于指定本地文件系统上的资源路径；可以用在http、server、location、if in location</span></span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据不同的url进行更详细的设置。nginx会根据用户请求的url来检查定义的所有location，并找出最佳匹配应用。</span></span><br><span class="line">location [ = | ~ | ~* |^~ ] url &#123;...&#125;</span><br><span class="line">=：对url精确匹配</span><br><span class="line">~：对url正则匹配，区分字符大小写</span><br><span class="line">~*：对url正则匹配，不区分字符大小写</span><br><span class="line">^~：对url左半部分做匹配检查，不区分字符大小写</span><br><span class="line">不带符号：匹配起始于此url的所有url</span><br><span class="line">优先级：=、^~、~、~/~*、不带符号</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义路径别名，仅用于location</span></span><br><span class="line"><span class="built_in">alias</span> path;</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">location中使用root指令和<span class="built_in">alias</span>指令的意义不同，root给定的路径相当于location中url左侧的/；而<span class="built_in">alias</span>相当于右侧/。</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置默认资源，定义于http、server、location</span></span><br><span class="line">index file...;</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义特定错误码的错误页</span></span><br><span class="line">error_page code... [=[response]] url;</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">try_files file... url;</span><br></pre></td></tr></table></figure><h5 id="客户端请求配置"><a href="#客户端请求配置" class="headerlink" title="客户端请求配置"></a>客户端请求配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设定保持连接的超时时长，0表示禁止长连接，默认为75s</span></span><br><span class="line">keepalive_timeout time;</span><br><span class="line"><span class="comment">#一次长连接上所允许请求的最大资源数，默认为100</span></span><br><span class="line">keepalive_requests number;</span><br><span class="line"><span class="comment">#对哪种浏览器禁用长连接</span></span><br><span class="line">keepalive_disable none | browser...;</span><br><span class="line"><span class="comment">#向客户端发送响应报文的超时时长，当客户端突然断线时，服务器会重复写，这就是两次重复写的间隔时长</span></span><br><span class="line">send_timeout time</span><br><span class="line"><span class="comment">#用于接收客户端请求报文的body部分的缓冲区大小；默认为16k，超出此大小时将其暂存到client_body_temp_path指令所定义的位置</span></span><br><span class="line">client_body_buffer_size size;</span><br><span class="line"><span class="comment">#设定用于存储客户端请求报文的body部分的临时存储路径及其子目录结构和数量</span></span><br><span class="line">client_body_temp_path [level1 [level2 [level3]]];</span><br><span class="line">client_body_temp_path path /var/tmp/client_body 2 1 1</span><br><span class="line">1：表示用一位16进制数表示一级子目录</span><br><span class="line">2：表示用2位16进制文件表示二级子目录</span><br><span class="line">2：表示用2位16进制文件表示三级子目录</span><br></pre></td></tr></table></figure><h5 id="客户端限制配置"><a href="#客户端限制配置" class="headerlink" title="客户端限制配置"></a>客户端限制配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#限制响应给客户端的传输速率，0表示无限制，单位bytes/second</span></span><br><span class="line">limit_rate rate;</span><br><span class="line"><span class="comment">#限制对指定的请求方法之外的其他方法</span></span><br><span class="line">limit_except method...&#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id="文件操作优化"><a href="#文件操作优化" class="headerlink" title="文件操作优化"></a>文件操作优化</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否启用异步io功能</span></span><br><span class="line">aio on | off | threads[=pool];</span><br><span class="line"><span class="comment">#是否启用O_DIRECT标记</span></span><br><span class="line">directio size | off;</span><br><span class="line"><span class="comment">#是否打开nginx缓存功能，可以缓存文件描述符、文件大小、最后一次修改时间、打开的目录结构、没有找到或者没有权限访问的文件的相关信息</span></span><br><span class="line">open_file_cache off | max=N [inactive=time];</span><br><span class="line">max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现缓存管理</span><br><span class="line">inactive=time：缓存项的非活动时长，小于此处时间未被命中或者命中次数少于open_file_cache_min_use指定的次数的缓存项即为非活动项。</span><br><span class="line"><span class="comment">#缓存有效性检查频率，默认60s</span></span><br><span class="line">open_file_cache_valid time;</span><br><span class="line"><span class="comment">#在open_file_cache指令的inactive指定时长内，至少被命中多少次的可以被归为活动项</span></span><br><span class="line">open_file_cache_min_uses number;</span><br><span class="line"><span class="comment">#是否缓存查找时发生错误的文件信息</span></span><br><span class="line">open_file_cache_errors on | off;</span><br></pre></td></tr></table></figure><h3 id="重要模块"><a href="#重要模块" class="headerlink" title="重要模块"></a>重要模块</h3><h4 id="访问控制模块"><a href="#访问控制模块" class="headerlink" title="访问控制模块"></a>访问控制模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现基于ip的访问控制</span></span><br><span class="line">ngx_http_access_module</span><br><span class="line">allow address | CIDR | unix | all;</span><br><span class="line">deny address | CIDR | unix | all;</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现基于用户的访问控制，使用basic机制进行用户认证</span></span><br><span class="line">ngx_http_auth_basic_module模块</span><br><span class="line">auth_basic string | off;</span><br><span class="line">auth_basic_user_file file;</span><br><span class="line">location /admin/ &#123;</span><br><span class="line"><span class="built_in">alias</span> /webapps/app1/data;</span><br><span class="line">auth_basic <span class="string">"Admin Area"</span>;</span><br><span class="line">auth_basic_user_file /etc/nginx/.ngxpasswd;</span><br><span class="line"><span class="comment">#密码使用htpasswd命令实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态输出模块"><a href="#状态输出模块" class="headerlink" title="状态输出模块"></a>状态输出模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于输出nginx的基本状态信息</span></span><br><span class="line">ngx_http_stub_status_module</span><br><span class="line">location /basic_status&#123;</span><br><span class="line">stub_satus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于输出日志</span></span><br><span class="line">ngx_http_log_module</span><br><span class="line">log_format name string...</span><br><span class="line">access_log path [format [buffer=size] [gzip[=level]] [flush=time] [<span class="keyword">if</span>=condition]];</span><br><span class="line"><span class="comment">#可以在location中设置不记录指定页面的日志</span></span><br><span class="line">access_log off;</span><br><span class="line">open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];</span><br><span class="line">open_log_file_cache off;</span><br><span class="line">max：缓存的最大文件描述符数量</span><br><span class="line">min_uses：在inactive指定的时长内访问大于等于此值被当作活动想</span><br><span class="line">inactive：非活动时长</span><br><span class="line">valid：验证是否为活动项的时间间隔</span><br></pre></td></tr></table></figure><h4 id="压缩模块"><a href="#压缩模块" class="headerlink" title="压缩模块"></a>压缩模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gzip压缩</span></span><br><span class="line">ngx_http_gzip_module</span><br><span class="line">gzip on | off;</span><br><span class="line"><span class="comment">#压缩比</span></span><br><span class="line">gzip_comp_level level;</span><br><span class="line"><span class="comment">#哪些浏览器不压缩，需要禁止</span></span><br><span class="line">gzip_disable regex...;</span><br><span class="line"><span class="comment">#允许压缩的最小长度</span></span><br><span class="line">gzip_min_length length;</span><br><span class="line"><span class="comment">#支持实现压缩功能时为其配置的缓冲区数量和每个缓冲区的大小</span></span><br><span class="line">gzip_buffers number size;</span><br><span class="line"><span class="comment">#作为代理服务器接收到被代理服务器的响应报文时，在何种条件下启用压缩功能</span></span><br><span class="line">gzip_proxied off | expired | no-cache | no-store</span><br><span class="line">off：不启用</span><br><span class="line"><span class="comment">#压缩过滤器，只对指定mime压缩</span></span><br><span class="line">gzip_types mime-type;</span><br></pre></td></tr></table></figure><h4 id="https模块"><a href="#https模块" class="headerlink" title="https模块"></a>https模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https配置，只能配置在一个ip上，监听tcp/443端口</span></span><br><span class="line">ngx_http_ssl_module</span><br><span class="line">ssl on | off;</span><br><span class="line"><span class="comment">#当前虚拟主机使用的PEM格式证书</span></span><br><span class="line">ssl_certificate file;</span><br><span class="line"><span class="comment">#当前主机上与其证书相匹配的私钥</span></span><br><span class="line">ssl_certificate_key file;</span><br><span class="line"><span class="comment">#ssl协议版本</span></span><br><span class="line">ssl_protocols [TLSv1.2];</span><br><span class="line"><span class="comment">#ssl会话缓存</span></span><br><span class="line">ssl_session_cache off | nono | [<span class="built_in">builtin</span>[:size]] [shared:name:size];</span><br><span class="line"><span class="built_in">builtin</span>[:size]：使用openssl内建的缓存，此缓存为每worker进程私有</span><br><span class="line">[shared:name:size]：在各worker之间使用一个共享的缓存</span><br><span class="line"><span class="comment">#客户端一侧连接可以服用ssl cache中缓存的ssl有效时长</span></span><br><span class="line">ssl_session_timeout time;</span><br></pre></td></tr></table></figure><h4 id="rewrite模块"><a href="#rewrite模块" class="headerlink" title="rewrite模块"></a>rewrite模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rewrite模块，主要是对请求的url进行替换</span></span><br><span class="line">ngx_http_rewrite_module</span><br><span class="line"><span class="comment">#将客户端请求根据regex匹配后进行修改/重定向</span></span><br><span class="line">rewrite regex replacement [flag]</span><br><span class="line">flag：</span><br><span class="line">last：在服务器端实现，匹配修改后再从头开始匹配所有的rewrite</span><br><span class="line"><span class="built_in">break</span>：在服务器端实现，匹配修改后直接跳到rewrite后开始执行</span><br><span class="line">redirect：在客户端实现，服务器收到请求后匹配到将修改后的url发给客户端的浏览器，由其再次访问，返回的是302状态码</span><br><span class="line">permanent：同上，但是返回的是301状态码</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line"><span class="comment">#将对png的请求全部换为jpg请求</span></span><br><span class="line">rewrite /(.*)\.png$ /<span class="variable">$1</span>.jpg</span><br><span class="line"><span class="comment">#所有请求改成https请求</span></span><br><span class="line">rewrite /(.*)$ https://www.dqy.io/<span class="variable">$1</span></span><br><span class="line"><span class="comment">#不处理，直接返回状态码或URL给客户端</span></span><br><span class="line"><span class="built_in">return</span> code [text];</span><br><span class="line"><span class="built_in">return</span> code URL;</span><br><span class="line"><span class="built_in">return</span> URL;</span><br><span class="line"><span class="comment">#是否将重写记录日志中</span></span><br><span class="line">rewrite_log on | off;</span><br><span class="line"><span class="comment">#引入一个新的配置，条件满足时执行，server、location中定义</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;...&#125;</span><br><span class="line">比较操作符：</span><br><span class="line">==</span><br><span class="line">!=</span><br><span class="line">~：正则匹配，区分大小写</span><br><span class="line">~*：不区分大小写的正则匹配</span><br><span class="line">!~：不匹配，区分大小写</span><br><span class="line">!~*：不匹配，不区分大小写</span><br><span class="line">-e,!-e：文件是否存在</span><br><span class="line">-f,!-f：是否是文件</span><br><span class="line">-d,!-d：是否是目录</span><br><span class="line">-x,!-x：是否可执行</span><br></pre></td></tr></table></figure><h4 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引用相关模块，可以防盗链</span></span><br><span class="line">ngx_http_referer_module</span><br><span class="line">valid_referers none | blocked | server_name | string...</span><br><span class="line">none：请求报文没有首部</span><br><span class="line">blocked：请求报文的referer首部没有值，可能别防火墙删除</span><br><span class="line">server_names：可以指定主机名</span><br><span class="line">arbitrary_string：直接字符串，可以使用*通配</span><br><span class="line">regular expression：正则表达式匹配，使用~开头</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">valid_referers none block server_names *.dqy.com *.frdqy.com ~\.dqy\.;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line"><span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="proxy模块"><a href="#proxy模块" class="headerlink" title="proxy模块"></a>proxy模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy_pass URL</span></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location /url&#123;</span><br><span class="line"><span class="comment">#此处路径不带url，即指明ip地址和端口后不加额外的路径符号时，将location的url附加在路径后</span></span><br><span class="line">proxy_pass http://host[:port];</span><br><span class="line"><span class="comment">#此处指明了URL，那么会将下面的url替换为location的url</span></span><br><span class="line">porxy_pass http://host[:port]/url</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#若location的url是正则匹配或者在if语句中使用proxy，那么proxy不能指定到具体的url</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#proxy_set_header field value</span></span><br><span class="line">设定发往后端主机的请求报文的请求首部的值，可以实现将客户端真正IP作为首部值发给后端服务器</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment">#上下实现同样功能，通常使用下文的方式</span></span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#缓存相关</span></span><br><span class="line"><span class="comment">#定义缓存路径</span></span><br><span class="line">proxy_cache_path /data/nginx/cache levels=1:1:1 keys_zone=pcache:10m max_size=2g</span><br><span class="line">levels：子目录分层，<span class="string">"1代表一个子目录"</span></span><br><span class="line">keys_zone：定义缓冲区名称</span><br><span class="line">max_size：定义缓冲区大小</span><br><span class="line"><span class="comment">#在server中调用缓存</span></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#指明使用的缓冲区名称</span></span><br><span class="line">proxy_cache pcache;</span><br><span class="line"><span class="comment">#指明请求的哪些当作hash的键</span></span><br><span class="line">proxy_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line"><span class="comment">#指明对哪些请求方法进行缓存</span></span><br><span class="line">proxy_cache_methods GET HEAD;</span><br><span class="line"><span class="comment">#指明缓存内容在规定时间内(默认10min)被访问多少次不会被剔除缓存</span></span><br><span class="line">proxy_cache_min_uses 1;</span><br><span class="line"><span class="comment">#指定状态码的网页缓存多少时间</span></span><br><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#定义连接超时时长，默认60s，最长75s</span></span><br><span class="line">proxy_connect_timeout time;</span><br><span class="line"><span class="comment">#定义从后端服务器传送数据到代理服务器的超时时长</span></span><br><span class="line">proxy_read_timeout time;</span><br><span class="line"><span class="comment">#代理服务器向后端服务器发请求的超时时长(后端太忙不回应)</span></span><br><span class="line">proxy_send_timeout time;</span><br></pre></td></tr></table></figure><h4 id="fastcgi模块"><a href="#fastcgi模块" class="headerlink" title="fastcgi模块"></a>fastcgi模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要用于fastcgi协议的反代，和proxy相似</span></span><br><span class="line">fastcgi_pass ip:port;</span><br><span class="line"><span class="comment">#指明默认主页</span></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line"><span class="comment">#指明nginx反带给后端服务器的参数，其中SCRIPT_FILENAME要指明后端的Docunmentroot地址，使得url能够拼在路径后找到真正的资源位置</span></span><br><span class="line">fastcgi_param SCRIPT_FILENAME /date/apps/<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">include fastcgi_params;</span><br><span class="line"><span class="comment">#缓存内容与proxy相似，只是名字换成fastcgi</span></span><br><span class="line"><span class="comment">#保持连接，默认nginx反带fpm服务器后会自动断开</span></span><br><span class="line">fastcgi_keep_conn on | off;</span><br></pre></td></tr></table></figure><h4 id="upstream模块"><a href="#upstream模块" class="headerlink" title="upstream模块"></a>upstream模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于定义一组服务器，即将多个相同功能的服务器定义成一个组，从而实现负载均衡。</span></span><br><span class="line"><span class="comment">#定义在http上下文中</span></span><br><span class="line"><span class="comment">#不加weight默认为1，为轮询，修改后自动为加权轮询</span></span><br><span class="line">upstream websrvs &#123;</span><br><span class="line">server 192.168.10.11:80 weight=2;</span><br><span class="line">server 192.168.10.12:80;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#在server中的location中定义，其中反代时使用定义的upstream定义的名称</span></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://websrvs</span><br><span class="line">&#125;</span><br><span class="line">server参数：</span><br><span class="line"><span class="comment">#最大失败次数，为0不检测</span></span><br><span class="line">max_fails=number;</span><br><span class="line"><span class="comment">#多长时间后端主机不响应认为后端主机挂了</span></span><br><span class="line">fail_timeout=time;</span><br><span class="line"><span class="comment">#最大并发连接数</span></span><br><span class="line">max_conns=number;</span><br><span class="line"><span class="comment">#后端服务器全挂后使用backup标记的server响应</span></span><br><span class="line">backup;</span><br><span class="line"><span class="comment">#将某台服务器停止，用于灰度发布(更新)</span></span><br><span class="line">down;</span><br><span class="line"><span class="comment">#基于用户ip地址绑定后端服务器，类似于lvs的SH算法</span></span><br><span class="line">ip_hash;</span><br><span class="line"><span class="comment">#同上</span></span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote</span>;</span><br><span class="line"><span class="comment">#将客户端请求的url当作键来绑定某个后端服务器</span></span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$request_uri</span></span><br><span class="line"><span class="comment">#注意，这里hash算法可以采用一致性hash算法，即hash key [consistent]。首先根据权重将后端主机分为多个虚拟主机，然后用后端虚拟主机的ip对2^32取模，结果将会是后端主机分散在一个圆上(0~2^32-1)。然后将请求的url的hash值对2^32取模，这样它也会落在之前的圆上，然后顺时针取离其取模值最近的一台虚拟主机进行处理，这就是一致性hash算法。</span></span><br><span class="line"><span class="comment">#指明nginx的每个worker保持多少个连接</span></span><br><span class="line">keepalive 32;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间、日志、sudo</title>
      <link href="/2020/01/14/%E6%97%B6%E9%97%B4%E3%80%81%E6%97%A5%E5%BF%97%E3%80%81sudo/"/>
      <url>/2020/01/14/%E6%97%B6%E9%97%B4%E3%80%81%E6%97%A5%E5%BF%97%E3%80%81sudo/</url>
      
        <content type="html"><![CDATA[<h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>chronyc是基于NTP(网络时间协议)的实现。</p><a id="more"></a><p>配置文件：/etc/chrony.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置本机为时间服务器，允许某网段主机同步</span></span><br><span class="line">allow 192.168.0.0/16</span><br><span class="line"><span class="comment">#设置本机向谁同步时间，server和iburst为关键字</span></span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line"><span class="comment">#日志文件</span></span><br><span class="line">logdir /var/<span class="built_in">log</span>/chrony</span><br><span class="line"><span class="comment">#自身作为ntp服务器时，即使自己没有同步到网络ntp服务器，也向请求的客户端同步时间</span></span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br></pre></td></tr></table></figure><p>chronyc命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chronyc</span><br><span class="line">sources：查看ntp服务</span><br><span class="line">activity：查看ntp服务是否在线</span><br></pre></td></tr></table></figure><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><h4 id="rsyslog"><a href="#rsyslog" class="headerlink" title="rsyslog"></a>rsyslog</h4><p>支持C/S架构，也支持单机运行。</p><p>配置文件：/etc/rsyslog.conf，/etc/rsyslog.d/*.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rsyslog.conf格式</span></span><br><span class="line">主要由MODULES、GLOBAL、RULES组成</span><br><span class="line">MODULES：管理模块加载</span><br><span class="line"><span class="variable">$ModLoad</span> imudp：udp输入模块，用于配置成日志服务器</span><br><span class="line"><span class="variable">$UDPServerRun</span> port：指明开启哪个端口接收输入</span><br><span class="line"><span class="variable">$ModLoad</span> imtcp：tcp输入模块，用于配置成日志服务器</span><br><span class="line"><span class="variable">$UDPServerRun</span> port：指明开启哪个端口接收输入</span><br><span class="line"></span><br><span class="line">RULES：日志规则，用于指定哪个设施(facility)的什么级别(priority)的日志记录在哪(target)</span><br><span class="line">facility.prioritytarget</span><br><span class="line">target：</span><br><span class="line">文件：将日志记录于指定文件中。通常位于/var/<span class="built_in">log</span>目录下，<span class="string">"-"</span>表示异步写入</span><br><span class="line">用户：将日志通知指定用户，即发送给指定用户的终端</span><br><span class="line">日志服务器：@host，把日志送往指定的服务器地址</span><br><span class="line">host：日志服务器地址，监听在tcp或udp协议的514端口</span><br><span class="line">管道：通过管道传送给其他进程</span><br></pre></td></tr></table></figure><h4 id="facility"><a href="#facility" class="headerlink" title="facility"></a>facility</h4><p>设施，从功能或程序上对日志收集进行分类，常见的分类有如下几个：</p><p>auth、authpriv、cron、daemon、kern、lpr、mail、mark、news、security、user、loacl0-7，syslog等</p><h4 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h4><p>日志级别。主要要分为(从左-&gt;右级别一次提高)：</p><p>debug、info、notice、warn、err、crit、alert、emerg(panic)</p><p>指定级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*：所有级别</span><br><span class="line">none：没有级别</span><br><span class="line">priority：此级别和高于此级别的所有级别</span><br><span class="line">&#x3D;priority：仅此级别</span><br></pre></td></tr></table></figure><h4 id="日志保存至数据库"><a href="#日志保存至数据库" class="headerlink" title="日志保存至数据库"></a>日志保存至数据库</h4><p>安装syslog-mysql模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install syslog-mysql -y</span><br></pre></td></tr></table></figure><p>导入该模块自带的sql语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &lt; /usr/share/doc/rsyslog-8.24.0/mysql-createDB.sql</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON Syslog.* TO &#39;rsyslog&#39;@&#39;192.168.%.%&#39; IDENTIFIED BY &#39;dqy751421&#39;;</span><br></pre></td></tr></table></figure><p>配置rsyslog使用ommysql模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件保存在/etc/rsyslog.conf</span></span><br><span class="line"><span class="comment">#MOUDLES</span></span><br><span class="line"><span class="variable">$ModLoad</span> ommysql</span><br><span class="line"><span class="comment">#RULES</span></span><br><span class="line">facility.priority:ommysql:DBHOST,DB,DBUSER,DBUSERPASS</span><br><span class="line">DBHOST：数据库地址</span><br><span class="line">DB：数据库名称</span><br><span class="line">DBUSER：数据库用户名</span><br><span class="line">DBUSERPASS：数据库用户密码</span><br></pre></td></tr></table></figure><h3 id="SUDO权限"><a href="#SUDO权限" class="headerlink" title="SUDO权限"></a>SUDO权限</h3><p>能够让获得权限的用户以另外一个用户的身份运行指定命令</p><p>授权文件：/etc/sudoers</p><p>编辑命令：visudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#授权项</span></span><br><span class="line">who<span class="built_in">where</span>=(whom)commands</span><br><span class="line">%group<span class="built_in">where</span>=(whom)commands</span><br><span class="line">who：用户名</span><br><span class="line"><span class="built_in">where</span>：限制哪台主机</span><br><span class="line">whom：以谁的身份</span><br><span class="line">%group：以哪个组的身份</span><br><span class="line">commands：可以执行的命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">使用组来限制时必须是基本组，不能是附加组</span><br><span class="line">使用newgrp命令可临时切换组</span><br><span class="line">在命令处加！可以实现排除某些命令，如：!/bin/su，即排除su命令</span><br><span class="line">命令必须全路径</span><br><span class="line">可以指定哪些命令要密码哪些命令不要密码，在命令前加PASSWD或NOPASSWD即可</span><br></pre></td></tr></table></figure><h4 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo [option]</span><br><span class="line">-k：清空当前保存的用户密码</span><br><span class="line">-l：列出当前用户可以执行哪些命令</span><br></pre></td></tr></table></figure><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在配置文件中可以定义别名，注意别名必须全大写，且命令必须全路径</span></span><br><span class="line">User_Alias：用户别名</span><br><span class="line">Cmnd_Alias：命令别名</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">User_Alias USERADMIN=frdqy</span><br><span class="line">Cmnd_Alias NETADMINCMD=/usr/sbin/ip</span><br><span class="line"></span><br><span class="line">USERADMINALL=(ALL)NETADMINCMD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chronyc </tag>
            
            <tag> sudo </tag>
            
            <tag> rsyslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables详解</title>
      <link href="/2020/01/14/Iptables/"/>
      <url>/2020/01/14/Iptables/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>防火墙即Firewall是一种隔离工具，它工作在主机或网络边缘，对于进出本主机或本网络的报文根据事先定义的检查规则作匹配检测，对于能够被规则匹配到的报文作出相应处理的组件。</p><a id="more"></a><p>根据作用域不同主要分为主机防火墙和网络防火墙。</p><p>规则链/钩子/hook：这是一种用于实现检查功能的机制。主要分为如下五种：</p><p>prerouting：进主机路由前</p><p>input：进本机用户空间前</p><p>output：从本地用户空间出来后</p><p>forward：不是发往本机而是需要转发时</p><p>postrouting：转发后，出网卡前</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><h5 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h5><p>一条规则由规则匹配条件和处理动作组成。</p><p>匹配条件：基本匹配条件、扩展匹配条件(由扩展模块定义)</p><p>处理动作：基本处理动作、扩展处理动作(由扩展模块定义)、自定义处理动作</p><h5 id="规则定义原则"><a href="#规则定义原则" class="headerlink" title="规则定义原则"></a>规则定义原则</h5><p>同一类原则，控制范围小的(严格的)放在前面；不同类原则，访问频繁的放在前面。</p><h4 id="链"><a href="#链" class="headerlink" title="链"></a>链</h4><p>链主要分为内置链和自定义链。内置链就是上文的五个链；自定义链可以实现更灵活的管理机制</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2020/01/14/Iptables/iptables.jpg" alt></p><p>filter：过滤，防火墙</p><p>nat：地址转换，用于修改源ip或目标ip</p><p>mangle：拆解报文，作出修改再封装(ttl、防火墙标记等)</p><p>raw：关闭nat表上启用的连接追踪功能，即将连接记录在内存中</p><h4 id="功能-链表"><a href="#功能-链表" class="headerlink" title="功能-链表"></a>功能-链表</h4><p>每个功能只能在特定的规则链上生效(<strong>生效优先级从上到下</strong>)。</p><p>raw：PREROUTING、OUTPUT</p><p>mangle：PREROUTING、INPUT、FORWARD、OUTPUT、POSTROUTING</p><p>nat：PREROUTING、INPUT、OUTPUT、POSTROUTING</p><p>filter：INPUT、FORWARD、OUTPUT</p><h4 id="报文流向"><a href="#报文流向" class="headerlink" title="报文流向"></a>报文流向</h4><p>流入本机：PREROUTING、INPUT</p><p>由本机流出：OUTPUT、POSTROUTING</p><p>转发：PREROUTING、FORWARD、POSTROUTING</p><h3 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h3><p>高度模块化。由诸多扩展模块实现其检查条件或处理动作的定义。模块文件存放在/usr/lib64/xtables/目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t table] COMMAND chain [-m matchname [per-match-options]] -j targetname [per-target-options]</span><br><span class="line">-t table：raw、mangle、nat、[filter](默认为filter)</span><br><span class="line">COMMAND：</span><br><span class="line">链管理：</span><br><span class="line">-N：自定义一条新的规则链</span><br><span class="line">-x：删除自定义的规则链</span><br><span class="line">-P：设置默认策略(ACCEPT、DROP、REJECT)</span><br><span class="line">-E：重命名自定义链(引用计数器不为0的自定义链不能被重命名或删除)</span><br><span class="line">规则管理：</span><br><span class="line">-A：追加</span><br><span class="line">-I：插入，要指明位置，省略时表示第一条</span><br><span class="line">-D：删除</span><br><span class="line">指明规则序号</span><br><span class="line">指明规则本身</span><br><span class="line">-R：替换指定链上的指定规则</span><br><span class="line">-F：清空指定规则链</span><br><span class="line">-Z：置零</span><br><span class="line">查看：</span><br><span class="line">-L：列出链上所有规则(L必须放在下列选项的最后)</span><br><span class="line">-n：以数字格式显示地址和端口号，不进行反解</span><br><span class="line">-v：显示详细信息</span><br><span class="line">-x：显示计数器结果的精确值</span><br><span class="line">--line-numbers：显示规则序号</span><br></pre></td></tr></table></figure><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><h5 id="基本匹配条件"><a href="#基本匹配条件" class="headerlink" title="基本匹配条件"></a>基本匹配条件</h5><p>无需加载任何模块，由iptables自行提供。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-s：指明检查的源地址或网段，所有地址为0.0.0.0</span><br><span class="line">-d：指明检查的目的地址或网段，所有地址为0.0.0.0</span><br><span class="line">-p：指明协议，包括tcp、udp、udplite、icmp、icmpv6、all等</span><br><span class="line">-i：指明数据报文流入的接口，只用于PREROUTING、INPUT、FORWARD</span><br><span class="line">-o：指明数据报文流出的接口，只用于FORWARD、OUTPUT、POSTROUTING</span><br><span class="line">-j：指明匹配后如何处理，包括ACCEPT、DROP、REJECT</span><br></pre></td></tr></table></figure><h5 id="扩展匹配条件"><a href="#扩展匹配条件" class="headerlink" title="扩展匹配条件"></a>扩展匹配条件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-m match_name per_option：使用特定模块和模块对应选项</span><br></pre></td></tr></table></figure><h6 id="隐式扩展"><a href="#隐式扩展" class="headerlink" title="隐式扩展"></a>隐式扩展</h6><p>使用-p选项指明了特定的协议时，不需再使用-m选项指明扩展模块。因为每个协议在/usr/lib64/xtables/目录下都有对应的可加载模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tcp:</span><br><span class="line">[!] --sport port[:prot]：匹配报文的源端口，可以是范围</span><br><span class="line">[!] --dport port[:prot]：匹配报文的目的端口，可以是范围</span><br><span class="line">[!] --tcp-flags mask comp：mask表示要检查的标记位(逗号隔开)、comp表示标记位为1；</span><br><span class="line">[!] --syn：匹配第一次握手</span><br><span class="line">icmp：</span><br><span class="line">[!] --icmp-type num：指明icmp类型</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例，允许ssh22端口连接</span></span><br><span class="line">iptables -A INPUT -d 192.168.163.131 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -s 192.168.163.131 -p tcp --sport 22 -j ACCEPT</span><br><span class="line"><span class="comment">#允许本地ping别的主机，发送是8，响应是0</span></span><br><span class="line">iptables -A INPUT -d 192.168.163.131 -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -s 192.168.163.131 -p icmp --icmp-type 8 -j ACCEPT</span><br></pre></td></tr></table></figure><h6 id="显式扩展"><a href="#显式扩展" class="headerlink" title="显式扩展"></a>显式扩展</h6><p>必须使用-m选项指明要调用的扩展模块的扩展机制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">multiport：以离散的方式开放多个端口</span><br><span class="line">[!] --sports port[,port]：指定多个源端口</span><br><span class="line">[!] --dports port[,port]：指定多个目的端口</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -I INPUT -d 192.168.163.131 -p tcp -m muliport --dports 22,80,139,445,3306 -j ACCEPT </span><br><span class="line"></span><br><span class="line">iprange：以连续地址快的方式来指明多IP地址匹配条件</span><br><span class="line">[!] --src-range from[-to]：指明源地址范围</span><br><span class="line">[!] --dst-range from[-to]：指明目的地址范围</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -I INPUT -d 192.168.163.131 -p tcp -m multiport -dports 22,80,139,445,3306 -m iprange --src-range 192.168.163.100-192.168.163.130 -j REJECT</span><br><span class="line"></span><br><span class="line">time：以时间来控制数据包</span><br><span class="line">--timestart hh:mm[:ss]</span><br><span class="line">--timestop hh:mm[:ss]</span><br><span class="line">[!] --weekdays day[,day...]</span><br><span class="line">[!] --monthdays day[,day...]</span><br><span class="line">--datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]</span><br><span class="line">--datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]</span><br><span class="line">--kerneltz：使用内核配置的时区而非默认的UTC</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -R INPUT 3 -d 192.168.163.131 -p tcp --dport 23 -m iprange 192.168.163.100-192.168.163.130 -m time --timestart 10:00:00 --timestop 16:00:00 --weekdays 1,2,3,4,5 --kerneltz -j ACCEPT</span><br><span class="line"></span><br><span class="line">string：根据二进制流检查(明文编码才可以检查)</span><br><span class="line">--algo &#123;bm|kmp&#125;：指定匹配算法，必须指定</span><br><span class="line">[!] --string pattern：指定要匹配的字符串</span><br><span class="line">[!] --hex-string pattern：指定要匹配的十六进制字符串</span><br><span class="line">--from offset：指定起始偏移</span><br><span class="line">--to offset：指定结束偏移</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -I OUTPUT -m string --algo bm --string <span class="string">"dqy"</span> -j REJECT</span><br><span class="line"></span><br><span class="line">connlimit：限制同一ip的最大并发连接数</span><br><span class="line">--connlimit-upto n：限制连接数小于n</span><br><span class="line">--connlimit-above n：限制连接数大于n</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -R INPUT 2 -d 192.168.163.131 -s 192.168.163.0/24 -p tcp -dport 3306 -m connlimit --connlimit-upto 3 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="built_in">limit</span>：用于限制报文发包速率(令牌桶算法)</span><br><span class="line">--<span class="built_in">limit</span> rate/&#123;second|minute|day...&#125;：指明连接速率</span><br><span class="line">    --<span class="built_in">limit</span>-burst：指明令牌数量</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -I INPUT 6 -d 192.168.163.131 -p icmp --icmp-type 8 -m <span class="built_in">limit</span> --<span class="built_in">limit</span>-burst 8 --<span class="built_in">limit</span> 20/minute -j ACCEPT</span><br><span class="line">iptables -I INPUT 6 -d 192.168.163.131 -p icmp --icmp-type 0 -j ACCEPT</span><br><span class="line"><span class="comment">#可以使用-syn和limit来控制建立新请求的速度</span></span><br><span class="line"></span><br><span class="line">state：连接追踪，用于查看报文状态</span><br><span class="line">[!] --state state(NEW(缓存中没有)、ESTABLISHED、UNTRACKED(raw表关闭追踪)、RELATED(与某个ESTABLISHED有关)、INVALID(无法识别))</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -A INPUT -d 192.168.163.131 -p tcp -m multiport --dports 21:23,80,139,445,3306 -m state --state NEW -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">该方法可以大大简化规则的编写。首先INPUT链第一条允许状态为ESTABLISED通过，OUTPUT链第一条允许ESTABLISHED通过。其余的之后再写即可。</span><br><span class="line">另外，由于ftp连接时需要2个端口，因此要用到RELATED状态，即在INPUT里设置一条关于tcp协议的RELATED状态放行即可。使用该方法前需要先装载内核模块nf_conntrack_ftp即可。(使用modprobe安装)</span><br><span class="line"><span class="comment">#追踪配置文件</span></span><br><span class="line"><span class="comment">#追踪到的连接</span></span><br><span class="line">/proc/net/nf_conntrack</span><br><span class="line"><span class="comment">#调整可记录的连接数最大值</span></span><br><span class="line">/proc/sys/net/nf_conntrack_max</span><br><span class="line"><span class="comment">#超时时长，存放各类协议的超时</span></span><br><span class="line">/proc/sys/net/netfilter/*timeout*</span><br></pre></td></tr></table></figure><h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h4><h5 id="基本处理动作"><a href="#基本处理动作" class="headerlink" title="基本处理动作"></a>基本处理动作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ACCEPT：接收</span><br><span class="line">DROP：直接丢弃</span><br></pre></td></tr></table></figure><h5 id="扩展处理动作"><a href="#扩展处理动作" class="headerlink" title="扩展处理动作"></a>扩展处理动作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REJECT：接收后返回拒绝消息</span><br><span class="line">--reject-with <span class="built_in">type</span>：指明拒绝类型</span><br><span class="line"></span><br><span class="line">LOG：记录日志</span><br><span class="line">--<span class="built_in">log</span>-level：指明日志等级</span><br><span class="line">--<span class="built_in">log</span>-prefix：指明日志名称(区别信息)</span><br><span class="line"></span><br><span class="line">RETURN：返回链调用，一般在自定义链中使用</span><br></pre></td></tr></table></figure><h5 id="用户自定义链"><a href="#用户自定义链" class="headerlink" title="用户自定义链"></a>用户自定义链</h5><p>自定义链必须要被已有的链引用才能生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先新建一个rule</span></span><br><span class="line">iptables -N new_rules</span><br><span class="line"><span class="comment">#然后在new_rule中写相关的规则</span></span><br><span class="line">iptables -A new_rules -d 192.168.163.131 -p icmp -j REJECT</span><br><span class="line"><span class="comment">#最后在已有的链中调用(此处在INPUT中调用)，只要在动作指明新建的规则名即可</span></span><br><span class="line">iptables -I INPUT 5 -d 192.168.163.131 -p icmp -j new_rules</span><br></pre></td></tr></table></figure><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-save &gt; /path</span><br></pre></td></tr></table></figure><h4 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables-restore &lt; /path</span><br><span class="line">-n：不清楚原有规则</span><br><span class="line">-t：仅分析不提交</span><br></pre></td></tr></table></figure><h3 id="规则优化思路"><a href="#规则优化思路" class="headerlink" title="规则优化思路"></a>规则优化思路</h3><p>使用自定义链管理特定应用的相关规则，模块化规则管理</p><ul><li>优先放行双向状态皆为ESTABLISHED的报文</li><li>服务于不同类别的功能的规则，匹配到报文可能性更大的放在前面</li><li>服务于同一类别的功能的规则，匹配条件较严格的放在前面</li><li>设置默认策略，即白名单机制<ul><li>不要使用iptables -P设置默认策略</li><li>建议在规则最后定义策略作为默认策略</li></ul></li></ul><h3 id="nat转换"><a href="#nat转换" class="headerlink" title="nat转换"></a>nat转换</h3><p>nat转换主要用于隐藏客户端主机或者服务器主机，也用于解决ipv4地址数量问题。</p><p>snat：隐藏客户端访问外网，规则要定义在POSTROUTING上</p><p>dnat：隐藏服务端，接收客户端访问，规则要定义在PREROUTING上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SNAT，用于静态ip，不能限制端口的开放</span></span><br><span class="line">SNAT</span><br><span class="line">--to-source [ipaddr[-ipaddr]]：指明将虚地址转换为哪个公有地址，可以是范围(根据NAT服务器网卡决定)</span><br><span class="line">--random：随机转换一个地址</span><br><span class="line">--persistent：固定转换地址</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.163.0/24 -j SNAT --to-source 172.16.0.6</span><br><span class="line"></span><br><span class="line"><span class="comment">#MASQUERADE，用于动态ip</span></span><br><span class="line">MASQUERADE：当外网地址不固定时，使用此target，但会消耗很多资源</span><br><span class="line"></span><br><span class="line"><span class="comment">#DNAT，只开放有限端口</span></span><br><span class="line">DNAT</span><br><span class="line">--to-destination [ipaddr[-ipaddr]][:port[-port]]：指明将公网ip转为哪个虚ip</span><br><span class="line">--random：随机转换一个地址</span><br><span class="line">--persistent：固定转换地址</span><br><span class="line"><span class="comment">#举例，NAT_IP为nat服务器的网卡ip</span></span><br><span class="line">iptables -t nat -A PREROUTING -d NAT_IP -p tcp --dport 80 -j DNAT --to-destination 192.168.163.131:80</span><br><span class="line"></span><br><span class="line"><span class="comment">#REDIRECT，用于单个主机的端口映射</span></span><br><span class="line">--to-ports port[-port]</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">iptables -A PREROUTING -t nat -d 192.168.163.131 -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储共享</title>
      <link href="/2020/01/12/%E5%AD%98%E5%82%A8%E5%85%B1%E4%BA%AB/"/>
      <url>/2020/01/12/%E5%AD%98%E5%82%A8%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="存储概念"><a href="#存储概念" class="headerlink" title="存储概念"></a>存储概念</h3><p>DAS：Direct Attached Storage</p><p>接口类型：”block”</p><a id="more"></a><p>特点：存储设备直连服务器</p><p>设备：SATA、SAS、IDE、SCSI、USB</p><p>NAS：Network Attached Storage</p><p>接口类型：”file”</p><p>特点：将存储功能从服务器分离，通过网络协议来存取数据</p><p>协议：CIFS、NFS</p><p>SAN：Storage Area Network</p><p>接口类型：”block”</p><p>特点：与NAS类似，但是每个每个存储阵列都有自己的文件管理系统</p><p>协议：ISCIS、FCSAN、FCOE</p><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>文件传输协议。连接主要有两种，一种是命令连接，用于客户端和服务器保持通话，传输命令，一般服务器监听21号端口；一种是数据连接，用于传输数据，一般服务器监听20号端口。但是现在ftp不是固定20号传输数据，会在通话时告诉客户端自己开了哪个端口，在那个端口进行数据传输。</p><h4 id="PAM"><a href="#PAM" class="headerlink" title="PAM"></a>PAM</h4><p>用于实现认证的第三方库，是一个高度模块化的文件。其配置文件在/etc/pam.d/目录下。每个用到pam的程序都有对应的配置文件。</p><h4 id="vsftpd"><a href="#vsftpd" class="headerlink" title="vsftpd"></a>vsftpd</h4><p>它是一个ftp的服务端程序，是轻量级的安全的ftp程序。</p><p>路径映射：用户家目录。vsftpd以ftp用户的身份运行进程，默认用户即为ftp用户，匿名用户的默认路径即为ftp用户的家目录/var/ftp。</p><p>注意：用户通过ftp登录后的权限取决于两个方面。第一是文件系统的权限，即ftp文件在服务器上的属主或属主权限。第二个是ftp服务器开放的权限。用户的权限是这两个权限的交集。</p><h5 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h5><p>匿名用户：anonymous，其实就是ftp用户，它的登录目录为/var/ftp</p><p>系统用户：系统上拥有的用户，在/etc/vsftpd/ftpusers下定义用户名，在/etc/pam.d/vsftpd下定义了pam模块使用passwd和shadow来验证系统用户的登录。以系统用户身份登录后默认目录为其家目录。</p><p>虚拟用户：不是系统用户，可以定义在mysql数据库或普通文本文件中，相应的需要修改pam模块来验证。</p><h5 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h5><p>standalone：独立守护进程；由服务进程自行监听套接字，用于访问比较繁忙的服务</p><p>transient：瞬时守护进程；由systemd代为监听套接字，有请求就启动服务进程</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主程序在/usr/sbin/vsftpd</span></span><br><span class="line"><span class="comment">#主配置文件在/etc/vsftpd/vsftpd.conf</span></span><br><span class="line"><span class="comment">#数据根目录在/var/ftp</span></span><br><span class="line"><span class="comment">#systemd管理单元在/usr/lib/systemd/system/vsftpd.service</span></span><br></pre></td></tr></table></figure><h6 id="匿名用户"><a href="#匿名用户" class="headerlink" title="匿名用户"></a>匿名用户</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/vsftpd/vsftpd.conf</span></span><br><span class="line"><span class="comment">#是否启用匿名账号，默认YES</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line"><span class="comment">#是否可以上传文件，默认NO</span></span><br><span class="line">anon_upload_enable=NO</span><br><span class="line"><span class="comment">#是否可以创建目录，默认NO</span></span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line"><span class="comment">#是否可以删除文件或目录，默认NO</span></span><br><span class="line">anon_other_write_enable=NO</span><br><span class="line"><span class="comment">#是否全局只读，默认YES</span></span><br><span class="line">anon_world_readable_only=YES</span><br><span class="line"><span class="comment">#设置匿名优先级</span></span><br><span class="line">anon_umask=077</span><br></pre></td></tr></table></figure><h6 id="系统用户"><a href="#系统用户" class="headerlink" title="系统用户"></a>系统用户</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/vsftpd/vsftpd.conf</span></span><br><span class="line"><span class="comment">#是否启用系统本地用户，默认YES</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="comment">#本地用户是否具有写权限，默认YES</span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="comment">#设置本地用户上传文件的掩码(666-022=644)</span></span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="comment">#辅助配置文件/etc/vsftpd/ftpusers，黑名单</span></span><br><span class="line">列在此文件中的用户均禁止访问ftp服务</span><br><span class="line"><span class="comment">#禁锢所有本地用户于其家目录中；需要事先去除用户对家目录的写权限</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="comment">#禁锢列表中的用户于其家目录中；需要事先去除用户对家目录的写权限</span></span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义白名单和黑名单，文件列表定义在/etc/vsftpd/user_list中</span></span><br><span class="line">userlist_enable=YES</span><br><span class="line"><span class="comment">#NO表示白名单，YES表示黑名单</span></span><br><span class="line">userlist_deny=NO|YES</span><br></pre></td></tr></table></figure><h6 id="日志传输"><a href="#日志传输" class="headerlink" title="日志传输"></a>日志传输</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否启用日志</span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br></pre></td></tr></table></figure><h6 id="并发连接"><a href="#并发连接" class="headerlink" title="并发连接"></a>并发连接</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置最大并发连接数</span></span><br><span class="line">max_clients=2000</span><br><span class="line"><span class="comment">#单ip最大连接数</span></span><br><span class="line">max_per_ip=50</span><br></pre></td></tr></table></figure><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>网络文件系统。监听tcp2049端口。</p><p>其实NFS也像ext一样，是内核中的一个模块，通过VFS统一接口后挂载到用户层调用。但是用户在访问nfs系统时，通过内核后直接走套接字连接一台服务器，最终访问的是服务器上的文件系统，该文件系统可以是ext、xfs等任意文件系统。这个过程有一个问题，因为内核通过用户id来分辨用户，但此时服务器和客户端本地假如出现相同的id的用户，那就会出现访问控制问题。因此，需要使用统一的认证服务来确保不论是服务器还是本地用户都进行统一认证，即使用一个统一的认证数据库，这样就不会出现用户冲突的问题。常见的认证服务有：ldap、nls等。</p><h4 id="辅助类服务"><a href="#辅助类服务" class="headerlink" title="辅助类服务"></a>辅助类服务</h4><p>rpc.mountd：用于检查连接的主机ip是否允许连接</p><p>rpc.lock：用于防止同时读写的冲突</p><p>rpc.statd：保存每个连接的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">dnf install -y nfs-utils</span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件存放在/etc/exports和/etc/exports.d目录下</span></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">/pathclients1(export_option) clients2(export_option)</span><br><span class="line">clients:</span><br><span class="line">single host：ipv4、ipv6、fqnd</span><br><span class="line">network：ip/mask</span><br><span class="line">wildcards：主机名通配，例如：*.top</span><br><span class="line">netgroups：NIS域内的主机组，例如：@group_name</span><br><span class="line">anonymous：使用*通配所有主机</span><br><span class="line">General options：</span><br><span class="line">ro：只读</span><br><span class="line">rw：读写</span><br><span class="line">sync：同步</span><br><span class="line">async：异步</span><br><span class="line">secure：客户端端口小于1024</span><br><span class="line">User ID Mapping：</span><br><span class="line">anonuid=user_id：设置映射用户id</span><br><span class="line">anongid=group_id：设置映射用户组id</span><br><span class="line">root_squash：压缩root用户，一般映射为nfsnobody</span><br><span class="line">no_root_squash：不压缩root用户</span><br><span class="line">all_squash：压缩所有用户</span><br><span class="line">anonuld and anongld：将压缩的用户映射为此处指定的用户</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line"><span class="comment">#在192.168.163.132配置如下条目并重启nfs服务</span></span><br><span class="line">/etc/192.168.163.131(rw,all_squash)</span><br><span class="line">systemctl restart nfs</span><br><span class="line"><span class="comment">#在192.168.163.131主机上使用如下命令检测</span></span><br><span class="line">showmount -e 192.168.163.132</span><br><span class="line"><span class="comment">#挂载132主机的etc目录到本地的/mnt/media下</span></span><br><span class="line">mount -t nfs 192.168.163.132:/etc /mnt/media/</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件后重新导出配置文件，即立即生效</span></span><br><span class="line">exportfs -rav</span><br><span class="line"><span class="comment">#查看指定nfs服务器开启哪些挂载目录</span></span><br><span class="line">showmount -e ip</span><br></pre></td></tr></table></figure><h4 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h4><p>首先在服务器端编辑/etc/exports创建目录条目，然后在客户端直接挂载即可。</p><h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><p>samba是一款跨平台的服务器文件共享方案。</p><p>NetBIOS：用于广播实现主机名解析</p><p>SMB：实现文件系统共享</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line"><span class="comment">#服务器端</span></span><br><span class="line">yum install -y samba</span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line">yum install -y samba-client</span><br></pre></td></tr></table></figure><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>服务端：samba、samba-common、samba-libs</p><p>配置文件：/etc/samba/smb.conf</p><p>主程序：nmbd、smbd。前者用于提供主机名解析(为了windows解析)，后者用于共享文件的访问。</p><p>systemd unit：smb.service、nmb.service</p><p>监听端口：137/udp、138/udp、139/tcp、445/tcp</p><h5 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/samba/smb.conf</span></span><br><span class="line"><span class="comment">#Network</span></span><br><span class="line">workgroup：工作组</span><br><span class="line">server string：设定类似win的鼠标悬停信息</span><br><span class="line">netbios name：当前主机名</span><br><span class="line">interfaces：监听网卡接口或ip地址</span><br><span class="line">hosts allow：白名单，允许哪些网段或ip访问</span><br><span class="line">hosts deny：黑名单，禁止哪些网段或ip访问</span><br><span class="line"></span><br><span class="line"><span class="comment">#Logging</span></span><br><span class="line"><span class="built_in">log</span> file：指明日志文件路径</span><br><span class="line">max <span class="built_in">log</span> size：日志大小，超出会滚动日志(保存旧的，创建新的)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Standalone server</span></span><br><span class="line">security：运行的安全模式，目前为user，且必须为系统账号，但使用samba独立密码</span><br><span class="line">passdb backend：加密方式</span><br><span class="line"></span><br><span class="line"><span class="comment">#Share</span></span><br><span class="line">writable：用户是否对家目录有写权限</span><br><span class="line">comment：注释信息</span><br><span class="line">path：需要共享的路径</span><br><span class="line">browseable：是否可浏览</span><br><span class="line">guest ok：是否被匿名用户访问</span><br><span class="line">write list：拥有写权限的用户列表</span><br><span class="line"><span class="built_in">read</span> only：是否只读</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测，修改过配置文件后使用如下命令进行检测</span></span><br><span class="line">testparm</span><br></pre></td></tr></table></figure><h5 id="创建samba用户"><a href="#创建samba用户" class="headerlink" title="创建samba用户"></a>创建samba用户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">useradd smbuser</span><br><span class="line"><span class="comment">#设置samba密码</span></span><br><span class="line">smbpasswd -a smbuser</span><br></pre></td></tr></table></figure><h5 id="创建共享文件"><a href="#创建共享文件" class="headerlink" title="创建共享文件"></a>创建共享文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/samba/files/ -pv</span><br><span class="line"><span class="comment">#编辑/etc/samba/smb.conf</span></span><br><span class="line">[myfiles]</span><br><span class="line">        comment = A <span class="built_in">test</span> shared dir</span><br><span class="line">        path = /data/samba/files</span><br><span class="line">        public = yes</span><br><span class="line">        browseable = yes</span><br><span class="line">        write list = smbuser</span><br><span class="line"><span class="comment">#可以基于组权限设置，使用+号或@</span></span><br><span class="line">write list = +group_name</span><br></pre></td></tr></table></figure><h5 id="设置文件系统权限"><a href="#设置文件系统权限" class="headerlink" title="设置文件系统权限"></a>设置文件系统权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m u:smbuser:rwx /data/samba/files/</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>smbclient：交互式命令行客户端，类似于lftp</p><p>mount.cifs：挂载cifs文件系统的专用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匿名访问</span></span><br><span class="line">smbclient -L 192.168.163.131</span><br><span class="line"><span class="comment">#指定用户查看是否能访问</span></span><br><span class="line">smbclient -L 192.168.163.131 -U user1</span><br><span class="line"><span class="comment">#以指定的用户登录myfiles为定义在/etc/samba/smb.conf的一个字段</span></span><br><span class="line">smbclient //192.168.163.131/myfiles -U user1</span><br></pre></td></tr></table></figure><h5 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount.cifs //192.168.163.131/myfiles /mnt -o username=smbuser,password=dqy751421</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>samba有自己的用户管理系统，因此对于权限的要求更严谨。</p><p>要确保客户端当前用户对挂载点有写权限；要确保映射目录对远程服务器对应id用户也有写权限；挂载的目录samba设置也要有写权限</p><h4 id="用户管理有关命令"><a href="#用户管理有关命令" class="headerlink" title="用户管理有关命令"></a>用户管理有关命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd [option] username</span><br><span class="line">-a：添加</span><br><span class="line">-x：删除</span><br><span class="line">-d：禁用</span><br><span class="line">-e：启用</span><br><span class="line"></span><br><span class="line">pdbedit [option]</span><br><span class="line">-L：列出所有samba服务中的用户</span><br><span class="line">-a：添加samba用户</span><br><span class="line">-u：要管理的用户</span><br><span class="line">-x：删除samba用户</span><br><span class="line">-t：从标准输出接收密码</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示samba服务的相关共享的信息</span></span><br><span class="line">smbstatus</span><br><span class="line">-b：显示简要信息</span><br><span class="line">-v：显示详细信息</span><br></pre></td></tr></table></figure><h4 id="配置流程-1"><a href="#配置流程-1" class="headerlink" title="配置流程"></a>配置流程</h4><p>首先需要在服务器创建用户，且设置samba的用户密码。然后在配置文件/etc/samba/smb.conf中单独设置一个选项来配置要映射的文件夹路径。最后客户端直接挂载即可。注意点还是权限的管理。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
            <tag> nfs </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mariadb详解</title>
      <link href="/2020/01/11/mariadb%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/11/mariadb%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>数据管理模型：层次模型、网状模型、关系模型</p><p>数据分类：结构化数据、非结构化数据、半结构化数据</p><a id="more"></a><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><h4 id="二维关系"><a href="#二维关系" class="headerlink" title="二维关系"></a>二维关系</h4><p>表：row，col</p><p>索引：index</p><p>视图(虚表)：view</p><h4 id="SQL接口"><a href="#SQL接口" class="headerlink" title="SQL接口"></a>SQL接口</h4><p>标准查询语言。类似于shell的接口，提供编程功能。</p><h5 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h5><p>数据定义语言</p><p>create、alter、drop、show</p><h5 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h5><p>数据管理语言</p><p>insert、delete、update、select</p><h4 id="SQL代码"><a href="#SQL代码" class="headerlink" title="SQL代码"></a>SQL代码</h4><p>存储过程：procedure。执行命令无返回数据。</p><p>存储函数：function。执行命令有返回数据。</p><p>触发器：trigger。当前表满足某个条件时执行。</p><p>事件调度器：event scheduler。周期性计划</p><h4 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h4><p>用户：用户名和密码</p><p>权限：管理类、程序类、数据库、表、字段</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>组织多个操作作为一个整体，要么全部成功执行，要么失败全部回滚。</p><h5 id="ACID标准"><a href="#ACID标准" class="headerlink" title="ACID标准"></a>ACID标准</h5><p>A：原子性</p><p>C：一致性</p><p>I：隔离性</p><p>D：持久性</p><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>constraint，向数据表插入的数据要遵守的限制规则</p><p>主键：一个或多个字段的组合，填入主键中的数据，必须不同于已存在的数据，不能为空。一个表存在一个主键。</p><p>外键：一个表中某字段中能插入的数据，取决于另外一张表的主键中的数据。</p><p>唯一键：一个或多个字段的组合，填入唯一键中的数据，必须不同于已存在的数据，可以为空。一个表可存在多个唯一键。</p><p>检查性约束：取决于表达式的要求。</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>将表中的某一项或某些字段抽取出来，单独将其组织成一个独特的数据结构</p><p>常见索引：B+ Tree，mysql中使用该数据结构。</p><p>注意：索引有利于读请求但不利于写请求。对于B+树，查询数据的IO平均次数为O(log n)；如果没有索引需要逐条匹配，IO平均次数为O(n)。不利于写是因为B+数插入删除操作时可能会引起平衡的调整。</p><h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><p>选择：挑选出符合条件的行</p><p>投影：挑选出符合需要的列</p><p>连接：将多张列表关联起来</p><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>插件式存储引擎，存储管理器有多种实现版本，彼此之间的功能和特性可能略有区别，可灵活选择。</p><h5 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h5><p>MyISAM：不支持事务；表级锁；崩溃后不保证安全恢复</p><p>InnoDB：支持事务；行级锁；外键；热备</p><h4 id="程序组成"><a href="#程序组成" class="headerlink" title="程序组成"></a>程序组成</h4><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><p>mysql：CLI交互式客户端程序</p><p>mysqldump：备份工具</p><p>mysqladmin：管理工具</p><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><p>mysqld</p><p>mysqld_safe：建议运行的服务端程序</p><p>mysqld_multi：多实例</p><p>补充：三类套接字地址</p><p>ipv4/ipv6，3306/tcp</p><p>Unix sock：/var/lib/mysql/mysql.sock或/tmp/mysql.sock本地套接字文件，用于进程间通信，共享内存。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>ini风格，一个文件为多个程序提供配置</p><p>[mysql]：客户端配置</p><p>[mysqld]：服务端配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql的各类程序启动都读取不止一个配置文件，且按顺序读取，重复定义的最后读取的最终生效</span></span><br><span class="line"><span class="comment">#使用my_print_defaults查看启动配置文件</span></span><br><span class="line">Default options are <span class="built_in">read</span> from the following files <span class="keyword">in</span> the given order:</span><br><span class="line">/etc/my.cnf ~/.my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，客户端连接服务端时服务端会反解客户端的IP为主机名，需要关闭此功能</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip_name_resolve</span><br><span class="line"><span class="comment">#设置独立表空间(每个表的索引数据等都独立)</span></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_file_per_table</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mysql支持的字符集</span></span><br><span class="line">show character <span class="built_in">set</span>;</span><br><span class="line">show collation;</span><br><span class="line"><span class="comment">#设置默认utf-8编码</span></span><br><span class="line">在[client]和[mysqld]字段下面均添加default-character-set=utf8</span><br><span class="line"><span class="comment">#检查字符编码</span></span><br><span class="line">show variables like <span class="string">"char%"</span>;</span><br></pre></td></tr></table></figure><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><h6 id="定长字符"><a href="#定长字符" class="headerlink" title="定长字符"></a>定长字符</h6><p>CHAR(#)：不区分字符大小写</p><p>BINARY(#)：区分字符大小写</p><h6 id="变长字符"><a href="#变长字符" class="headerlink" title="变长字符"></a>变长字符</h6><p>VARCHAR(#)：不区分字符大小写，需要多占一个或多个字符结束空间</p><p>VARBINARY(#)：区分字符大小写，需要多占一个或多个字符结束空间</p><h6 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h6><p>有最大的存储限度，但是具体分配时根据实际长度分配。</p><p>TEXT：不区分字符大小写</p><p>BLOB：区分字符大小写</p><h6 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h6><p>SET：集合，限制数据为集合内的组合</p><p>ENUM：枚举，限制填写数据，且写入数据库的真实数据为枚举的索引。</p><h5 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h5><p>INT系列，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT、DECIMAL</p><p>浮点数系列，包括FLOAT、DOUBLE</p><h5 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h5><p>DATE、TIME、DATETIME、TIMESTAMP、YEAR(2)、YEAR(4)</p><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><p>UNSIGNED：无符号</p><p>NOT NULL：非空</p><p>DEFAULT value：默认值</p><p>PRIMARY KEY：主键</p><p>UNIQUE KEY：唯一键</p><p>FOREIGN KEY：外键</p><p>AUTO_INCREMENT；自动增长</p><h4 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql [option] [database]</span><br><span class="line">-u[username]：设置用户名。可以不带空格。</span><br><span class="line">-h[hostname]：设置主机名。可以不带空格。</span><br><span class="line"><span class="comment">#mysql用户账号由两部分组成'USERNAME'@'HOST'</span></span><br><span class="line"><span class="comment">#其中HOST限制了此用户可通过哪些远程主机连接当前的mysql服务。其表达方式如下</span></span><br><span class="line">%：匹配任意长度字符。如192.186.%.%</span><br><span class="line">_：匹配任意单个字符</span><br><span class="line">-p[PASSWARD]：设置密码。可以不带空格。</span><br><span class="line">-D[db_name]：设置连接服务器后的默认连接数据库</span><br><span class="line">-e <span class="string">'SQL COMMAND'</span>：连接至服务器并让其执行此命令后直接放回</span><br><span class="line">-P[port]：指明mysql服务器端口，默认3306</span><br><span class="line">-S[sock]：指明使用的套接字文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端命令</span></span><br><span class="line">DDL、DML、DCL，每句结果以;结尾</span><br><span class="line">mysql&gt;<span class="built_in">help</span> contens</span><br><span class="line">mysql&gt;<span class="built_in">help</span> <span class="string">"具体的contents内容"</span></span><br><span class="line"><span class="comment">#客户端命令</span></span><br><span class="line">mysql&gt;<span class="built_in">help</span></span><br><span class="line">\u db_name：选择数据库</span><br><span class="line">\q：退出</span><br><span class="line">\d CHAR：设定新的语句结束符</span><br><span class="line">\g：语句结束标记，默认为;</span><br><span class="line">\G：同上，但结果以竖排方式显示</span><br><span class="line">\s：查询状态</span><br><span class="line">\c：取消当前语句，类似shell的ctrl+c</span><br><span class="line">\! shell_command：执行shell命令</span><br><span class="line">\. sql脚本路径：执行sql命令</span><br></pre></td></tr></table></figure><h4 id="服务端命令"><a href="#服务端命令" class="headerlink" title="服务端命令"></a>服务端命令</h4><h5 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h5><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE|SCHEMA&#125; [IF NOT EXISTS] db_name;</span><br><span class="line">[DEFAULT] CHARACTER SET [&#x3D;] charset_name |</span><br><span class="line">    [DEFAULT] COLLATE [&#x3D;] collation_name</span><br></pre></td></tr></table></figure><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name]</span><br><span class="line">[DEFAULT] CHARACTER SET [&#x3D;] charset_name  |</span><br><span class="line">  [DEFAULT] COLLATE [&#x3D;] collation_name</span><br><span class="line">#或者</span><br><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; db_name</span><br><span class="line">    UPGRADE DATA DIRECTORY NAME</span><br><span class="line"></span><br><span class="line">#例如：修改字符集为utf-8</span><br><span class="line">alter database mysql character set &#39;utf-8&#39;;</span><br></pre></td></tr></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name</span><br></pre></td></tr></table></figure><h6 id="SHOW"><a href="#SHOW" class="headerlink" title="SHOW"></a>SHOW</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW &#123;DATABASES | SCHEMAS&#125;</span><br><span class="line">    [LIKE &#39;pattern&#39; | WHERE expr]</span><br></pre></td></tr></table></figure><h5 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h5><h6 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line">create_definition：</span><br><span class="line">字段：col_name、data_type</span><br><span class="line">键：PRIMARY KEY(col1,col2...)、UNIQUE KEY(col1,col2...)、FOREIGN KEY(col1,col2...)</span><br><span class="line">索引：KEY|INDEX [index_name](col1,col2...)</span><br><span class="line">table_options：</span><br><span class="line">ENGINE&#x3D;engine_name</span><br></pre></td></tr></table></figure><h6 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ALTER [ONLINE | OFFLINE] [IGNORE] TABLE tbl_name</span><br><span class="line">    [alter_specification [, alter_specification] ...]</span><br><span class="line">    [partition_options]</span><br><span class="line">alter_specification：</span><br><span class="line">字段：</span><br><span class="line">添加：ADD [COLUMN] col_name data_type [FIRST|AFTER col_name]</span><br><span class="line">删除：DROP [COLUMN] col_name</span><br><span class="line">修改：CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER colname]</span><br><span class="line">键：</span><br><span class="line">添加：ADD &#123;PRIMARY|UNIQUE|FOREIGN&#125; KEY (col1,col2...)</span><br><span class="line">删除：</span><br><span class="line">主键：DROP PRIMARY KEY</span><br><span class="line">外键：DROP FOREIGN KEY fk_symbol</span><br><span class="line">索引：</span><br><span class="line">添加：ADD &#123;INDEX|KEY&#125; [index_name] (col1,col2...)</span><br><span class="line">删除：DROP &#123;INDEX|KEY&#125; index_name</span><br><span class="line">表选项：</span><br><span class="line">ENGINE&#x3D;engine_name</span><br><span class="line"></span><br><span class="line">#补充：</span><br><span class="line">查看索引：show index from table_name;</span><br></pre></td></tr></table></figure><h6 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] tbl_name[,tbl_name]...</span><br></pre></td></tr></table></figure><h6 id="复制表结构"><a href="#复制表结构" class="headerlink" title="复制表结构"></a>复制表结构</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tbl_name like other_table_name</span><br></pre></td></tr></table></figure><h6 id="复制表数据"><a href="#复制表数据" class="headerlink" title="复制表数据"></a>复制表数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#复制表数据时需要手动定义各个数据的格式</span><br><span class="line">CREATE TABLE tbl_name (col1,col2...) SELECT clause</span><br></pre></td></tr></table></figure><h6 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC tbl_name;</span><br></pre></td></tr></table></figure><h5 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h5><h6 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE [ONLINE|OFFLINE] [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name</span><br><span class="line">    [index_type]</span><br><span class="line">    ON tbl_name (index_col_name,...)</span><br><span class="line">    [index_option]</span><br></pre></td></tr></table></figure><h6 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP [ONLINE|OFFLINE] INDEX index_name ON tbl_name</span><br></pre></td></tr></table></figure><h5 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h5><h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name [(col_name,...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (&#123;expr | DEFAULT&#125;,...),(...),...</span><br><span class="line">    [ ON DUPLICATE KEY UPDATE</span><br><span class="line">      col_name&#x3D;expr</span><br><span class="line">        [, col_name&#x3D;expr] ... ]</span><br><span class="line">#举例</span><br><span class="line">insert into student(col1,col2) value(val1,val2);</span><br><span class="line">replace into student(col1,col2) value(val1,val2);</span><br><span class="line"></span><br><span class="line">#注意</span><br><span class="line">字符型要用引号，数值型不能用引号</span><br></pre></td></tr></table></figure><h6 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h6><p>select执行顺序为先执行from，确定哪个表；接着执行where，挑选满足的行；然后执行group by对选择的行进行分组；然后执行having对挑选出的组进行过滤；然后使用order by对挑选出的进行排序；然后执行select选择特点列；最后根据limit移除不需要的行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#显示所有行</span><br><span class="line">select * from tbl_name;</span><br><span class="line">#指定字段显示别名</span><br><span class="line">select col1 AS col1_alias,col2 from tbl_name;</span><br><span class="line">#where挑选</span><br><span class="line">select col1... from tbl_name where clause;</span><br><span class="line">where clause：</span><br><span class="line">操作符：&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&#x3D;&#x3D;,!&#x3D;</span><br><span class="line">判断空：IS NULL,IS NOT NULL</span><br><span class="line">列表：IN (1,2,3)</span><br><span class="line">通配：LIKE &#39;d%&#39;</span><br><span class="line">正则统配：RLIKE &#39;^d&#39;</span><br><span class="line">组合条件：and、or、not</span><br><span class="line">范围：between...and...</span><br><span class="line">#group by分组，分组用来聚合(统计)，通常用Having对组进行过滤</span><br><span class="line">#常见聚合有count，sum，avg，max，min</span><br><span class="line">select count(*) AS col1_alias,col2 from tbl_name group by col_name;</span><br><span class="line"></span><br><span class="line">#order by排序，desc表降序，ASC表升序，默认为升序</span><br><span class="line">select * from tbl_name order by col_name [DESC];</span><br></pre></td></tr></table></figure><h6 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#注意，一定要使用where</span><br><span class="line">DELETE FROM tbl_name [WHERE clause] [ORDER BY...] [LIMIT row_count]</span><br></pre></td></tr></table></figure><h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#注意，一定要使用where</span><br><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference</span><br><span class="line">    SET col_name1&#x3D;&#123;expr1|DEFAULT&#125; [, col_name2&#x3D;&#123;expr2|DEFAULT&#125;] ...</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br></pre></td></tr></table></figure><h5 id="用户账号与权限管理"><a href="#用户账号与权限管理" class="headerlink" title="用户账号与权限管理"></a>用户账号与权限管理</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql用户账号由两部分组成'USERNAME'@'HOST'</span></span><br><span class="line"><span class="comment">#其中HOST限制了此用户可通过哪些远程主机连接当前的mysql服务。其表达方式如下</span></span><br><span class="line">%：匹配任意长度字符。如192.186.%.%</span><br><span class="line">_：匹配任意单个字符</span><br></pre></td></tr></table></figure><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#39;username&#39;@&#39;host&#39; [IDENTIFIED BY &#39;password&#39;];</span><br></pre></td></tr></table></figure><h6 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#39;username&#39;@&#39;host&#39;[,&#39;username&#39;@&#39;host&#39;];</span><br></pre></td></tr></table></figure><h6 id="授权用户"><a href="#授权用户" class="headerlink" title="授权用户"></a>授权用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#若用户不存在可以自动创建</span><br><span class="line">GRANT priv_type... ON [object_type] db_name.tbl_name TO &#39;username&#39;@&#39;host&#39; [IDENTIFIED BY &#39;password&#39;];</span><br><span class="line">priv_type：select、drop、all...</span><br><span class="line">db_name.tbl_name：</span><br><span class="line">*.*；所有库的所有表</span><br><span class="line">db_name.*：指定库的所有表</span><br><span class="line">db_name.tbl_name：指定库的指定表</span><br><span class="line">db_name.routine_name：指定库的存储过程或存储函数</span><br></pre></td></tr></table></figure><h6 id="回收授权"><a href="#回收授权" class="headerlink" title="回收授权"></a>回收授权</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE priv_type ON db_name.tbl_name FROM &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><h6 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看自身权限</span><br><span class="line">SHOW GRANTS;</span><br><span class="line">#查看授权</span><br><span class="line">SHOW GRANTS FOR &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><h6 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT user();</span><br></pre></td></tr></table></figure><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>mysql服务进程启动时会读取mysql库的所有授权表至内存中，因此运行时修改可能不会立即生效。但是GRANT和REVOKE执行时会重建授权表，会立即生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#权限修改立即生效</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h5 id="加固mysql"><a href="#加固mysql" class="headerlink" title="加固mysql"></a>加固mysql</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line">#会让你设置root密码等</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP配置</title>
      <link href="/2020/01/11/LAMP%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/11/LAMP%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>L：Linux</p><p>A：apache(httpd)</p><a id="more"></a><p>M：mysql、mariadb</p><p>P：php、perl、python</p><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><h4 id="mariadb"><a href="#mariadb" class="headerlink" title="mariadb"></a>mariadb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装服务端</span></span><br><span class="line">dnf install mariadb</span><br></pre></td></tr></table></figure><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处使用php-fpm模块，php-mysqlnd 不能安装php</span></span><br><span class="line"><span class="comment">#php-mysqlnd是php对mysql的支持库</span></span><br><span class="line"><span class="comment">#php-fpm是php对网页的接口</span></span><br><span class="line"><span class="comment">#php-mbstring是对汉字支持</span></span><br><span class="line"><span class="comment">#php-xcache优化php代码执行速度</span></span><br><span class="line">dnf install php-mysqlnd php-fpm php-mbstring php-xcache</span><br></pre></td></tr></table></figure><h4 id="Httpd"><a href="#Httpd" class="headerlink" title="Httpd"></a>Httpd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf install httpd</span><br><span class="line"><span class="comment">#查找fcgi模块，没有则不能与后端通信，即php通信</span></span><br><span class="line">httpd -M | grep fcgi</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><p>服务配置文件：/etc/php-fpm.conf，/etc/php-fpm.d/*.conf</p><p>php配置文件：/etc/php.ini、/etc/php.d/*.ini/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/php-fpm.conf，使用;注释</span></span><br><span class="line">pid：进程id</span><br><span class="line">error_log：错误日志路径</span><br><span class="line">log_level：日志记录级别</span><br><span class="line">daemonize：是否以守护进程方式运行(默认为no，需要通过systemctl来管控)</span><br><span class="line"></span><br><span class="line"><span class="comment">#/etc/php-fpm.conf.d/www.conf，用于管理与www页面的结合</span></span><br><span class="line">listen：指明监听端口</span><br><span class="line">listen.allowed_clients：允许来自哪些ip的客户端进行请求</span><br><span class="line">listen.backlog：指定后援队列，只允许访问的等待队列长度</span><br><span class="line">pm：设置子进程管理方式</span><br><span class="line">pm.max_children：设置最大并发数</span><br><span class="line">pm.start_servers：服务启动时启动多少个子进程</span><br><span class="line">pm.min_spare_servers：最小空闲进程数</span><br><span class="line">pm.max_spare_servers：最大空闲进程数</span><br><span class="line">pm.process_idle_timeout：空闲进程多少秒后被杀死</span><br><span class="line">pm.max_requests：每个进程最多响应多少个请求后将其杀死</span><br><span class="line">pm.status_path：设置fpm状态页路径</span><br><span class="line">ping,path：允许进程ping</span><br><span class="line">ping.responce：允许服务器给ping回复</span><br><span class="line">php_value[session.save_path]：session保存路径</span><br></pre></td></tr></table></figure><h4 id="mariadb-1"><a href="#mariadb-1" class="headerlink" title="mariadb"></a>mariadb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件/etc/my.conf.d/server.cnf(没有就自己建一个)，在[mysqld]字段中添加如下条目</span></span><br><span class="line"><span class="comment">#不对用户ip进行反向解析</span></span><br><span class="line">skip_name_resolve</span><br><span class="line"><span class="comment">#设置独立表空间(每个表的索引数据等都独立)</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line"></span><br><span class="line"><span class="comment">#安全加强</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权一个用户用于访问</span></span><br><span class="line">GRANT ALL ON testdb.* TO <span class="string">'dqy'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'dqy751421'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置默认字符集</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">show variables like <span class="string">"char%"</span></span><br><span class="line"><span class="comment">#修改/etc/my.conf.d/server.cnf(没有就自己建一个)</span></span><br><span class="line">在[client]和[mysqld]字段下添加default-character-set=utf8</span><br></pre></td></tr></table></figure><h4 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h4><p>主要配置与php有关，其他具体配置见<a href="[https://www.frdqy.top/2020/01/10/http%E8%AF%A6%E8%A7%A3/](https://www.frdqy.top/2020/01/10/http详解/)">http详解</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置/etc/httpd/conf.d/fcgi.conf(没有则自建)</span></span><br><span class="line"><span class="comment">#设置默认主页，即访问目录不指明具体网页时的访问对象</span></span><br><span class="line">DirectoryIndex index.php</span><br><span class="line"><span class="comment">#关闭正向代理</span></span><br><span class="line">ProxyRequests Off</span><br><span class="line"><span class="comment">#反向代理。匹配所有以php结尾的访问，将其转接到127.0.0.1:9000端口，且其网页放在/var/www/html/目录下(后向引用)</span></span><br><span class="line">ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">如果设置了虚拟主机，那么就把上述命令放到虚拟主机配置文件里</span><br><span class="line">所谓的反向代理就是http服务器将接收到动态请求再向php服务器请求，此时http服务器身份为客户端。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lamp </tag>
            
            <tag> php配置 </tag>
            
            <tag> mysql配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http详解</title>
      <link href="/2020/01/10/http%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/10/http%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><a id="more"></a><p>0~1023：永久地分配给固定的应用使用</p><p>1024~41591：注册端口，分配给程序注册为某应用使用</p><p>41592+：客户端程序随机使用，为动态端口</p><h4 id="BSD-Socket"><a href="#BSD-Socket" class="headerlink" title="BSD Socket"></a>BSD Socket</h4><p>IPC的一种实现，允许不同主机上的进程进行通信</p><h5 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h5><p>封装了内核中socket通信相关的系统调用</p><p>SOCK_STREAM：tcp套接字</p><p>SOCK_DGRAM：udp套接字</p><p>SOCK_RAW：raw套接字</p><h5 id="Socket-Domain"><a href="#Socket-Domain" class="headerlink" title="Socket Domain"></a>Socket Domain</h5><p>套接字地址格式</p><p>AF_INET：Ipv4地址族</p><p>AF_INET6：Ipv6地址族</p><p>AF_UNIX：同一主机上的不同进程间基于socket通信时使用的地址(基于内存的伪文件，不走tcp协议)</p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>超文本传输协议，监听tcp80端口</p><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><p>无连接的协议。服务器无法持续追踪访问者的来源。cookie和session分别是客户端和服务器端用来保存用户个人特征信息的文件。例如身份验证、特点客户的浏览喜好等等。</p><h5 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h5><p>http/1.0：引入cache、MIME、Method机制</p><p>MIME：多用途互联网邮件扩展协议。用于解决将非文本信息按照某种编码转换成文本格式传输到客户端后还能解码还原成原来格式，因此http可以传输非文本信息。</p><p>Method：GET、POST、HEAD、PUT、DELETE、TRACE、OPTIONS</p><p>http/1.1：增强缓存功能</p><p>http/2.0：借鉴spdy协议进行大面积优化</p><h5 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h5><p>由请求报文和响应报文组成。一次请求和一次响应叫做一次http事务。</p><h5 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#request</span></span><br><span class="line">&lt;method&gt;&lt;request-URL&gt;&lt;version&gt;</span><br><span class="line">&lt;HEADERS&gt;</span><br><span class="line">&lt;entity-body&gt;</span><br><span class="line"><span class="comment">#response</span></span><br><span class="line">&lt;version&gt;&lt;status&gt;&lt;reason-phrase&gt;</span><br><span class="line">&lt;HEADERS&gt;</span><br><span class="line">&lt;entity-body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#method请求方法，标明客户端希望服务器对资源执行的动作</span></span><br><span class="line">GET：请求获取资源</span><br><span class="line">HEAD：请求资源但不要资源，只要首部</span><br><span class="line">POST：提交表单</span><br><span class="line">PUT：上传资源到服务器端，需要服务器开启DAV</span><br><span class="line">TRACE：追踪请求到达服务器中间经过的代理服务器</span><br><span class="line">OPTIONS：请求服务器返回对指定资源支持的请求方法</span><br><span class="line"><span class="comment">#version http协议版本</span></span><br><span class="line">HTTP/&lt;major&gt;.&lt;minor&gt;</span><br><span class="line"><span class="comment">#status</span></span><br><span class="line">1XX：无大意义，表信息提示</span><br><span class="line">2XX：请求成功</span><br><span class="line">3XX：特殊意义重定向等</span><br><span class="line">4XX：客户端错误</span><br><span class="line">5XX：服务器错误</span><br><span class="line"><span class="comment">#常见状态码</span></span><br><span class="line">200：成功</span><br><span class="line">301：请求的URL永久重定向</span><br><span class="line">302：请求的URL临时重定向</span><br><span class="line">304：响应客户端的条件式请求，服务器某URL没有改变，则返回此状态码</span><br><span class="line">401：需要输入账号密码</span><br><span class="line">403：请求被禁止</span><br><span class="line">404：服务器找不到资源</span><br><span class="line">500：服务器内部错误</span><br><span class="line">502：代理服务器从后端服务器收到了一条伪响应(Bad Gateway)，即服务器不响应</span><br><span class="line"><span class="comment">#补充：代理</span></span><br><span class="line">正向代理：代理客户端向服务器端请求</span><br><span class="line">反向代理：代理服务器端向客户端响应请求</span><br><span class="line"><span class="comment">#headers，一般分为5类</span></span><br><span class="line">请求或响应报文可以有任意个首部，每个首部都有首部名称，后面跟一个冒号，而后加空格加值</span><br><span class="line"><span class="comment">#通用首部：请求响应都适用</span></span><br><span class="line">Date：报文的创建时间</span><br><span class="line">Connection：连接状态，如keep-alive，close</span><br><span class="line">Via：显示报文经过的中间节点</span><br><span class="line">Cache-Control：控制缓存</span><br><span class="line"><span class="comment">#请求首部：用于请求报文</span></span><br><span class="line">Host：请求的服务器的地址和端口</span><br><span class="line">Referer：从哪个上级资源跳转</span><br><span class="line">Uer-Agent：客户端浏览器型号(用于服务器条件式响应)</span><br><span class="line">Accept：通知服务器自己可接受的媒体类型(text/html,application/javascript,images/jpeg等)</span><br><span class="line">Accept-Charset：文本编码格式</span><br><span class="line">Accept-Encoding：接受的压缩格式，如gzip</span><br><span class="line">Accept-Language：接受的语言</span><br><span class="line"><span class="comment">#条件式请求首部</span></span><br><span class="line">If-Modified-Since：自上次请求后请求的资源是否修改</span><br><span class="line">If-Unmodified-Since：是否没有修改</span><br><span class="line">If-None-Match：本地缓存中存储的文档的Etag标签是否与服务器文档的Etag不匹配</span><br><span class="line">If-Match：</span><br><span class="line"><span class="comment">#安全请求首部</span></span><br><span class="line">Authorization：向服务器发送认证请求</span><br><span class="line">Cookie：客户端向服务器发送cookie</span><br><span class="line"><span class="comment">#代理请求首部</span></span><br><span class="line">Proxy-Authorization：向代理服务器认证</span><br><span class="line"><span class="comment">#响应首部：用于响应报文</span></span><br><span class="line">Age：响应持续时长</span><br><span class="line">Server：服务器程序软件名称和版本</span><br><span class="line">Accept-Ranges：服务器可接受的请求范围类型</span><br><span class="line">Vary：服务器查看的其他首部列表</span><br><span class="line">Set-Cookie：：向客户端设置cookie</span><br><span class="line">WWW-Authorization：质询认证表单(401)</span><br><span class="line"><span class="comment">#实体首部：用于描述&lt;entity-body&gt;信息</span></span><br><span class="line">Allow：列出对此实体可使用的请求方法</span><br><span class="line">Location告诉客户端真正实体位于何处</span><br><span class="line">Content-Encoding：实体编码</span><br><span class="line">Content-Language：实体语言</span><br><span class="line">Content-Length：实体长度</span><br><span class="line">Content-Location：实体真正位置</span><br><span class="line">Content-Type：实体对象类型</span><br><span class="line">ETag：实体的扩展标签</span><br><span class="line">Expires：实体的过期时间</span><br><span class="line">Last-Modified：最后一次修改时间</span><br><span class="line"><span class="comment">#扩展首部：自定义首部</span></span><br></pre></td></tr></table></figure><h5 id="web资源"><a href="#web资源" class="headerlink" title="web资源"></a>web资源</h5><p>http一次请求和响应的内容叫做一个web资源。一个页面通常由多个资源组成。因此打开一个网址时每个资源都要单独进行http请求。每个资源通过完整的URL进行标识，即标识了资源在服务器的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://www.frdqy.top/index.html</span><br><span class="line">Scheme://Server[:port]/[path]</span><br><span class="line"><span class="comment">#scheme：方案，即什么协议</span></span><br><span class="line"><span class="comment">#Servier[:port]协议和端口</span></span><br><span class="line"><span class="comment">#基本语法：&lt;scheme&gt;://[&lt;user&gt;:&lt;passwd&gt;@]&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span></span><br></pre></td></tr></table></figure><p>静态资源：无需服务端额外处理的资源。如文本、图片、视频等。</p><p>动态资源：服务端需要执行额外程序作出处理，且发送给客户端的程序是运行的结果。如php、jsp等</p><h5 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h5><p>首先，建立连接，服务器接收或拒绝请求。然后，服务器接收请求，即接收网络上主机请求报文中对某特定资源的一次请求过程。接着，对请求报文进行解析，获取客户端请求的资源及请求方法(删除、编辑等)等相关信息。然后，从服务器本地磁盘中获取请求的资源。之后，构建响应报文并发送给客户端。最后，记录日志。</p><h5 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h5><h6 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl [option] URL...</span><br><span class="line">-A：设置用户代理</span><br><span class="line">-e/--refer：指明上级访问</span><br><span class="line">-H：自定义首部信息</span><br><span class="line">-I：只返回首部信息，即head方法</span><br><span class="line">--<span class="built_in">limit</span>-rate rate：限制传输速度</span><br><span class="line">--compressed：要求返回压缩格式</span><br></pre></td></tr></table></figure><h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p>基于ssl的http协议。监听tcp443端口。</p><p>首先，客户端发送可供选择的加密方式，并向服务器请求证书，服务器端发送证书以及选定的加密方式给客户端，客户端取得证书后验证证书合法后生成临时会话密钥，并使用服务器端的公钥加密此数据发送给服务器，完成密钥交换。然后服务器用此密钥加密用户请求的资源，响应给客户端即可。</p><h3 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>高度模块化，类似于linux，更换模块时不需要编译，直接重载即可</li><li>MPM机制，即多路处理模块。实现并发请求。<ul><li>prefork：多进程模型(二级模型)，每个进程响应一个请求。主进程负责生成子进程及回收子进程，每个子进程处理一个请求。它会预留几个空闲进程用来随时响应用户请求，且包含最大空闲与最小空闲进程的概念，即预留的空闲进程的大小有规定。</li><li>worker：多进程多线程模型(三级模型)，每个线程处理一个用户请求。主进程负责生成和回收子进程，而子进程负责生成和回收线程，每个线程负责响应用户请求。</li><li>event：事件驱动模型。每个进程响应多个请求。主进程生成和回收子进程，子进程基于事件驱动机制直接响应多个请求。</li></ul></li></ul><h4 id="程序环境"><a href="#程序环境" class="headerlink" title="程序环境"></a>程序环境</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>/etc/httpd/conf/http.conf</p><p>/etc/httpd/conf.d/*.conf，多用于自定义配置文件存放</p><p>模块配置文件：/etc/httpd/conf.modules.d/*.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置格式</span></span><br><span class="line"><span class="comment">#其中，指令可以不区分大小写，但是值如果为路径时要区分大小写</span></span><br><span class="line">指令 值</span><br></pre></td></tr></table></figure><h5 id="主程序文件"><a href="#主程序文件" class="headerlink" title="主程序文件"></a>主程序文件</h5><p>/usr/sbin/httpd</p><h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>/var/log/httpd。其中access_log为访问日志，erroe_log为错误日志。</p><h5 id="站点文档"><a href="#站点文档" class="headerlink" title="站点文档"></a>站点文档</h5><p>/var/www/html</p><h5 id="unit文档"><a href="#unit文档" class="headerlink" title="unit文档"></a>unit文档</h5><p>/usr/lib/systemd/system/httpd.service</p><h5 id="模块文件路径"><a href="#模块文件路径" class="headerlink" title="模块文件路径"></a>模块文件路径</h5><p>/usr/lib64/httpd/modules</p><h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><h5 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Listen [IP-address:]port [protocol]</span><br><span class="line"><span class="comment">#省略ip表示0.0.0.0</span></span><br><span class="line"><span class="comment">#Listen指令可重复出现多次</span></span><br><span class="line"><span class="comment">#修改监听socket，需要重启服务进程</span></span><br><span class="line"><span class="comment">#限制必须通过ssl通信时，protocol定义为https</span></span><br></pre></td></tr></table></figure><h5 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KeelAlive On|Off</span><br><span class="line"><span class="comment">#双重标准，满足一个就断开(时间超过15，或请求数量大于100)</span></span><br><span class="line"><span class="comment">#时间加ms可以为毫秒级</span></span><br><span class="line">KeepAliveTimeOut 15</span><br><span class="line">MaxKeepAliveRequests 100</span><br></pre></td></tr></table></figure><h5 id="错误检查"><a href="#错误检查" class="headerlink" title="错误检查"></a>错误检查</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每次修改配置文件后进行语法错误检查</span></span><br><span class="line">httpd -t</span><br></pre></td></tr></table></figure><h5 id="MPM"><a href="#MPM" class="headerlink" title="MPM"></a>MPM</h5><p>即多路处理模块。实现并发请求。</p><h6 id="prefork配置"><a href="#prefork配置" class="headerlink" title="prefork配置"></a>prefork配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule prefork.c&gt;</span><br><span class="line">StartServers8<span class="comment">#开启服务时启动的空闲进程数</span></span><br><span class="line">MinSpareServers5<span class="comment">#最小空闲子进程数</span></span><br><span class="line">MaxSpareServers20<span class="comment">#最大空闲子进程数</span></span><br><span class="line">ServerLimit256<span class="comment">#允许服务器处于活跃状态的子进程数</span></span><br><span class="line">MaxClients256<span class="comment">#最大允许启动子进程数</span></span><br><span class="line">MaxRequestsPerChild4000<span class="comment">#每个子进程最大处理请求数量</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><h6 id="worker配置"><a href="#worker配置" class="headerlink" title="worker配置"></a>worker配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule worker.c&gt;</span><br><span class="line">StartServers4<span class="comment">#开启服务时启动的空闲进程数</span></span><br><span class="line">MaxClients300<span class="comment">#最大允许启动线程数</span></span><br><span class="line">MinSpareThreads25<span class="comment">#最小空闲线程数</span></span><br><span class="line">MaxSpareThreads75<span class="comment">#最大空闲线程数</span></span><br><span class="line">ThreadsPerChild25<span class="comment">#每个进程生成多少线程</span></span><br><span class="line">MaxRequestsPerChild0<span class="comment">#单个线程最大处理请求数量，0表示不限制</span></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述配置存在问题，初始生成100个线程，但最大允许75个线程，因此刚启动就会杀掉一个进程</span></span><br><span class="line"><span class="comment">#使用如下命令查看，即每0.5s查看一次</span></span><br><span class="line">systemctl restart httpd ; watch -n0.5 <span class="string">'ps aux | grep httpd'</span></span><br></pre></td></tr></table></figure><h5 id="DSO"><a href="#DSO" class="headerlink" title="DSO"></a>DSO</h5><p>动态模块加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置指定实现模块加载</span></span><br><span class="line"><span class="comment">#注意，模块相对路径为：定义在/etc/httpd/conf/httpd.conf的ServerRoot</span></span><br><span class="line">LoadModule &lt;mod_name&gt; &lt;mod_path&gt;</span><br></pre></td></tr></table></figure><h5 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h5><p>即中心主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前服务器的主机名</span></span><br><span class="line">ServerName</span><br><span class="line"><span class="comment">#服务器别名</span></span><br><span class="line">ServerAlias</span><br><span class="line"><span class="comment">#定义URL的根路径与文件系统的映射关系</span></span><br><span class="line">DocumentRoot</span><br></pre></td></tr></table></figure><h5 id="基于IP访问控制"><a href="#基于IP访问控制" class="headerlink" title="基于IP访问控制"></a>基于IP访问控制</h5><p>使得DocumentRoot定义的资源对有限的对象开放访问。可以通过文件系统路径和URL路径两种方式实现控制。</p><h6 id="文件系统路径"><a href="#文件系统路径" class="headerlink" title="文件系统路径"></a>文件系统路径</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对整个目录控制</span></span><br><span class="line">&lt;Directory <span class="string">""</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment">#对某个文件控制</span></span><br><span class="line">&lt;File <span class="string">""</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/File&gt;</span><br><span class="line"><span class="comment">#正则表达式控制</span></span><br><span class="line">&lt;FileMatch <span class="string">"PATTERN"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/FileMatch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">&lt;Directory <span class="string">""</span>&gt;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#接收所有请求</span></span><br><span class="line">Require all granted</span><br><span class="line"><span class="comment">#拒绝所有请求</span></span><br><span class="line">Require all denied</span><br><span class="line">&lt;Requireall&gt;</span><br><span class="line"><span class="comment">#接收IP地址或网段</span></span><br><span class="line">require ip IP_ADDR</span><br><span class="line"><span class="comment">#拒绝IP地址或网段</span></span><br><span class="line">require not ip IP_ADDR</span><br><span class="line"><span class="comment">#接收host主机名</span></span><br><span class="line">require host HOST_NAEM</span><br><span class="line"><span class="comment">#拒绝host主机名</span></span><br><span class="line">require not host HOST_NAEM</span><br><span class="line">&lt;/Requireall&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h6 id="URL路径"><a href="#URL路径" class="headerlink" title="URL路径"></a>URL路径</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location <span class="string">""</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"><span class="comment">#正则URL</span></span><br><span class="line">&lt;LocationMatch <span class="string">"PATTERN"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/LocationMatch&gt;</span><br></pre></td></tr></table></figure><h6 id="option选项"><a href="#option选项" class="headerlink" title="option选项"></a>option选项</h6><p>定义于Directory内，用于控制目录特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Indexes</span></span><br><span class="line">指明URL的路径下不存在请求的主页时，将目录索引列表返回给用户。该方法很危险，一般下载站使用。访问具体资源时不受影响。</span><br><span class="line"></span><br><span class="line"><span class="comment">#FollowSymLinks</span></span><br><span class="line">允许跟踪符号链接文件，即网络目录中存在符号链接至其他目录的文件时是否显示对应的文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#AllowOverride</span></span><br><span class="line">一般设置为none不允许重现配置文件</span><br></pre></td></tr></table></figure><h5 id="目录索引"><a href="#目录索引" class="headerlink" title="目录索引"></a>目录索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex定义了访问目录而不指明具体页面时的默认页面，一般为index.html</span><br></pre></td></tr></table></figure><h5 id="路径别名"><a href="#路径别名" class="headerlink" title="路径别名"></a>路径别名</h5><p>用于修改目录映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在alias_module中定义一个alias</span></span><br><span class="line"><span class="comment">#其中PATH1是需要修改的原目录路径，PATH2是目标目录路径</span></span><br><span class="line">Alias PATH1 <span class="string">"PATH2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line"><span class="comment">#表示将/DocumentRoot/images/目录映射到/usr/share/backgrands/，此后网页中访问/image/时会自动映射到对应目录中去</span></span><br><span class="line"><span class="comment">#注意，对于http2.4来说，访问控制严格，需要将对应目录也设置&lt;Directory&gt;</span></span><br><span class="line">Alias /images/ <span class="string">"/usr/share/backgrands/"</span></span><br></pre></td></tr></table></figure><h5 id="默认字符集"><a href="#默认字符集" class="headerlink" title="默认字符集"></a>默认字符集</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddDefaultCharset UTF-8</span><br></pre></td></tr></table></figure><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>记录正确和错误的访问日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志格式定义于/etc/httpd/conf/httpd.conf中的log_config_module字段中</span></span><br><span class="line"><span class="comment">#中间是定义的宏，"cominned"是该格式的名字，在后面使用CustomLog来指定使用哪个格式 </span></span><br><span class="line">LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\""</span> combined</span><br><span class="line">CustomLog <span class="string">"logs/access_log"</span> combined</span><br><span class="line"></span><br><span class="line">%h：远程主机名，一般为ip地址</span><br><span class="line">%l：基于identd远程登录的远程用户名，一般没人用</span><br><span class="line">%u：记录认证的用户名</span><br><span class="line">%t：时间</span><br><span class="line">%r：请求报文的首行(请求URL、方法、协议版本)</span><br><span class="line">%s：状态码，%&gt;s表示的是发生重定向后的最后一次状态码</span><br><span class="line">%b：响应报文的大小，不包括首部，单位为字节</span><br><span class="line">%&#123;Referer&#125;i：请求报文首部中的referer值，即从哪个页面中的超链接跳转至当前页面</span><br><span class="line">%&#123;User-Agent&#125;i：请求报文中首部User-Agent的值，即发出请求的客户端的应用程序</span><br></pre></td></tr></table></figure><h6 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h6> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存放于/var/log/httpd/error.log中</span></span><br><span class="line">主要是记录服务器加载错误模块等服务器端的错误。注意，用户访问不存在的资源时不是服务端错误。</span><br></pre></td></tr></table></figure><h6 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存放于/var/log/httpd/access.log</span></span><br><span class="line">用于记录正常的访问记录</span><br></pre></td></tr></table></figure><h5 id="用户访问控制"><a href="#用户访问控制" class="headerlink" title="用户访问控制"></a>用户访问控制</h5><h6 id="认证质询"><a href="#认证质询" class="headerlink" title="认证质询"></a>认证质询</h6><p>客户端第一此发送请求时，服务器拒绝该请求，响应码为401，并返回一个www-authenticate要求客户端提交账号和密码。</p><h6 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h6><p>客户端输入账号和密码后再次发起请求报文(Authorization)，认证通过后服务器发送响应的资源。认证方式有两种basic和digest(前者为明文，后者为摘要hash)。现在一般网页都使用基于服务器应用的认证，而不是用http的认证。</p><h6 id="认证配置"><a href="#认证配置" class="headerlink" title="认证配置"></a>认证配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义安全域</span></span><br><span class="line"><span class="comment">#可以基于用户控制，也可以基于用户组控制</span></span><br><span class="line">&lt;Directory <span class="string">""</span>&gt;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#指明验证方式</span></span><br><span class="line">AuthType basic</span><br><span class="line"><span class="comment">#验证提示信息</span></span><br><span class="line">AuthName <span class="string">"STR"</span></span><br><span class="line"><span class="comment">#用户密码存放文件(使用htpasswd 用户名 )</span></span><br><span class="line">AuthUserFile <span class="string">"PATH/FILE"</span></span><br><span class="line"><span class="comment">#用户组文件保存路径</span></span><br><span class="line">AuthGroupFile <span class="string">"PATH/FILE"</span></span><br><span class="line"><span class="comment">#指明对哪些用户控制</span></span><br><span class="line">Require user username1 username2...</span><br><span class="line"><span class="comment">#对所有定义在文件中的用户配置</span></span><br><span class="line">Require valid-user</span><br><span class="line"><span class="comment">#指明对哪些组控制</span></span><br><span class="line">Require group GROUP_NAME</span><br><span class="line">...</span><br><span class="line">&lt;/Directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例。在/etc/httpd/conf.d/下新建一个admin.conf，单独模块方便删除</span></span><br><span class="line"><span class="comment">#使用htpasswd在/etc/httpd/conf.d/创建一个隐藏文件，定义密码和用户</span></span><br><span class="line">&lt;Directory <span class="string">"/data/web/www/admin"</span> &gt;</span><br><span class="line">options None</span><br><span class="line">AllowOverride None</span><br><span class="line">Authtype basic</span><br><span class="line">AuthName <span class="string">"This is Admin"</span></span><br><span class="line">AuthUserFile <span class="string">"/etc/httpd/conf.d/.htpasswd"</span></span><br><span class="line">Require user tom dqy</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义组文件</span></span><br><span class="line">GROUP_NAME:user1 user2</span><br></pre></td></tr></table></figure><h6 id="htpasswd"><a href="#htpasswd" class="headerlink" title="htpasswd"></a>htpasswd</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于创建账号密码文件</span></span><br><span class="line">htpasswd [options] /PATH/TO/FILE username</span><br><span class="line">-c：在指定路径创建存储文件，仅在第一次使用</span><br><span class="line">-m：md5加密</span><br><span class="line">-s：sha格式加密</span><br><span class="line">-D：删除指定用户</span><br><span class="line">-b：添加指定用户</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">htpasswd -c /tmp/test.user tom</span><br><span class="line">htpasswd -b /tmp/test.user jerry 751421</span><br></pre></td></tr></table></figure><h5 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h5><p>一个物理服务器服务多个网站。实现方法有基于ip，即为每个虚拟主机准备至少一个ip地址(一块网卡可以有多个ip地址)。有基于port，即每个虚拟主机使用至少一个独立的port。基于FQDN，即基于主机的主机名(host)解析。</p><p>ip比较昂贵，端口也不能随便修改，因此一般使用基于主机名的host解析方式。该方式需要配置dns。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一般定义于/etc/httpd/conf.d下单独文件</span></span><br><span class="line">&lt;VirtualHost IP_ADDR:PORT&gt;</span><br><span class="line">ServerName FQDN</span><br><span class="line">DocunmentRoot <span class="string">""</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="comment">#在2.2中需要加一个命令</span></span><br><span class="line">NameVirtualHost IP:PORT</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line"><span class="comment">#在/etc/httpd/conf.d/下定义一个模块</span></span><br><span class="line">&lt;VirtualHost 192.168.163.131:80&gt;</span><br><span class="line">ServerName www.frdqy.io</span><br><span class="line">DocumentRoot <span class="string">"/data/web/frdqy"</span></span><br><span class="line">&lt;Directory <span class="string">"/data/web/frdqy"</span>&gt;</span><br><span class="line">options None</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">CustomLog <span class="string">"log/frdqy_access_log"</span> combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h5 id="压缩资源"><a href="#压缩资源" class="headerlink" title="压缩资源"></a>压缩资源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#defalte_module，定义于/etc/httpd/conf.d/compress.conf</span></span><br><span class="line"><span class="comment">#设置过滤器，只压缩文本格式文件</span></span><br><span class="line">SetOutputFilter DEFLATE</span><br><span class="line"><span class="comment">#限制压缩格式</span></span><br><span class="line">AddOutputFilterByType DEFLATE text/plain</span><br><span class="line">AddOutputFilterByType DEFLATE text/html</span><br><span class="line">AddOutputFilterByType DEFLATE text/xml</span><br><span class="line">AddOutputFilterByType DEFLATE text/css</span><br><span class="line">AddOutputFilterByType DEFLATE text/javascript</span><br><span class="line">AddOutputFilterByType DEFLATE application/xhtml+xml</span><br><span class="line">AddOutputFilterByType DEFLATE application/xml</span><br><span class="line">AddOutputFilterByType DEFLATE application/x-javascript</span><br><span class="line"><span class="comment">#设置压缩等级</span></span><br><span class="line">DeflateCompressionLevel 9</span><br></pre></td></tr></table></figure><h5 id="支持https配置"><a href="#支持https配置" class="headerlink" title="支持https配置"></a>支持https配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为服务器申请数字证书：</span></span><br><span class="line">创建私有CA、为服务器创建证书签署请求、CA签署</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置httpd支持使用ssl，及使用的证书。需要在配置文件/etc/httpd/conf.d/ssl.conf中配置</span></span><br><span class="line">DocumentRoot</span><br><span class="line">ServerName</span><br><span class="line"><span class="comment">#CA证书存放路径</span></span><br><span class="line">SSLCertificateFile</span><br><span class="line"><span class="comment">#私钥存放路径</span></span><br><span class="line">SSLCertificateKeyFile</span><br></pre></td></tr></table></figure><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p>ab，webbench，http_load，seige，loadrunner，jmeter，tcpcopy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab [options] URL</span><br><span class="line">-n num：总请求数</span><br><span class="line">-c num：模拟的并行数</span><br><span class="line">-k num：以持久连接模式测试</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS和bind详解</title>
      <link href="/2020/01/08/DNS%E5%92%8Cbind%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/08/DNS%E5%92%8Cbind%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Domain name service，基于C/S架构，使用udp53端口与tcp53端口，其中udp实现解析，tcp实现区域传送。</p><a id="more"></a><p>网址：FQDN(Full Qualified Domain Name)</p><p>顶级域名：.com、.net、.org、.gov、.edu、mail</p><p>国家或地区域：.lq、.tw、.cn、.hk等</p><p>二级域：自己定义的独一无二的字符串</p><p>hosts文件：dns解析时首先匹配本地的这个文件，如果有条目匹配则直接访问。</p><p>dns缓存：本地内存中缓存了最近的名称解析结果，但是结果有效性有期限，这个期限由服务器提供。</p><h3 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h3><p>递归：本地主机向本地DNS服务器查询是递归</p><p>迭代：本地DNS服务器向根查询是迭代</p><h3 id="解析类型"><a href="#解析类型" class="headerlink" title="解析类型"></a>解析类型</h3><p>名称-&gt;IP叫做正向解析</p><p>IP-&gt;名称叫做反向解析</p><p>注意：二者的名称空间不同，即解析不是遵循同一颗树。</p><p>正向解析时，例如解析<a href="http://www.frdqy.top，解析树的根为“.”，其次为top，然后是frdqy，最后为www。" target="_blank" rel="noopener">www.frdqy.top，解析树的根为“.”，其次为top，然后是frdqy，最后为www。</a></p><p>反向解析时，例如解析1.2.3.4时，解析树的根为“in-addr.arpa”，其次为1，然后是2，依次往下。可见ip地址与访问的ip地址在解析树中是相反的。</p><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><p>负责解析至少一个域：主DNS服务器、副DNS服务器(用于主服务器挂了顶上去)</p><p>不负责域解析：缓存DNS服务器</p><h4 id="主DNS服务器"><a href="#主DNS服务器" class="headerlink" title="主DNS服务器"></a>主DNS服务器</h4><p>维护所负责解析的域数据库的服务器，读写操作都可以进行。</p><h4 id="从DNS服务器"><a href="#从DNS服务器" class="headerlink" title="从DNS服务器"></a>从DNS服务器</h4><p>从主服务器那或其他从DNS服务器那同步一份数据库，但只能进行读操作。</p><h4 id="主从同步配置"><a href="#主从同步配置" class="headerlink" title="主从同步配置"></a>主从同步配置</h4><p>序列号：数据库的版本号，主服务器数据库内容发生变化时，其版本号递增</p><p>刷新时间间隔：从服务器每隔多久到主服务器检查序列号更新状况</p><p>重试时间间隔：从服务器请求同步失败时再次发起同步请求的时间间隔</p><p>过期时长：从服务器联系不到主服务器时，多久后放弃同步数据，并本身停止服务</p><p>注意：主服务器数据发生改变时要主动通知从服务器进行更新，不需要等待刷新间隔</p><h3 id="区域数据库文件"><a href="#区域数据库文件" class="headerlink" title="区域数据库文件"></a>区域数据库文件</h3><h4 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h4><p>记录类型：A、AAAA、PTR、SOA、NS、CNAME、MX等</p><p>SOA：起始授权记录，一个区域解析库只能有一个SOA记录，且必须放在第一条</p><p>NS：域名服务记录，一个区域解析库可以有多个NS记录，其中一个为主。</p><p>A：地址记录，用于主机名到IPV4地址的映射</p><p>AAAA：地址记录，用于主机名到IPV6地址的映射</p><p>CNAME：别名记录</p><p>PTR：实现反向解析，即IP到主机名的映射</p><p>MX：邮件交换器，可以有多个</p><h4 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#IN是关键字，RR_TYPE是资源类型，VALUE是资源的值</span></span><br><span class="line"><span class="comment">#name是指转换名称，例如正向解析就是主机名是名称，反向解析ip是名称</span></span><br><span class="line">语法：name [ttl] IN RR_TYPE VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个区域只能有一个SOA，且必须放在第一位</span></span><br><span class="line">SOA：</span><br><span class="line">name：当前区域的名字，正向是地址，反向是ip</span><br><span class="line">value：有多部份组成：</span><br><span class="line">当前区域的区域名称(也可以使用主DNS服务器名称)</span><br><span class="line">当前区域管理员的邮箱地址；不能使用@符号，用.替代</span><br><span class="line">主从服务协调属性定义及否定答案的ttl</span><br><span class="line">举例：</span><br><span class="line">www.frdqy.top86400INSOAwww.frdqy.topadmin.frdqy.top(</span><br><span class="line">01;serial</span><br><span class="line">2H;refresh</span><br><span class="line">10M;retry</span><br><span class="line">1W;expire</span><br><span class="line">1D;negative answer ttl</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个区域可以有多个NS记录</span></span><br><span class="line">NS：</span><br><span class="line">name：当前区域的名字</span><br><span class="line">value：当前区域某DNS服务器的名字</span><br><span class="line">举例：</span><br><span class="line">www.frdqy.top86400INNSns1.frdqy.top</span><br><span class="line">www.frdqy.top86400INNSns2.frdqy.top</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以有多个，名称后加数字，越小优先级越大</span></span><br><span class="line"><span class="comment">#要多指明一个优先级</span></span><br><span class="line">MX：</span><br><span class="line">name：当前服务器的区域名称</span><br><span class="line">value：当前区域邮件交换器的主机名</span><br><span class="line">举例：</span><br><span class="line">www.frdqy.topINMX10mx1.frdqy.top</span><br><span class="line">www.frdqy.topINMX20mx2.frdqy.top</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以有多个。同一个主机可以有多个ip，同一个ip可以有多台主机</span></span><br><span class="line">A：</span><br><span class="line">name：某主机名</span><br><span class="line">value：某IPV4地址</span><br><span class="line">举例：</span><br><span class="line">www.frdqy.topINA1.2.3.4</span><br><span class="line">www.frdqy.topINA1.2.2.4</span><br><span class="line">web.frdqy.topINA1.2.3.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#同上，用于IPV6地址</span></span><br><span class="line">AAAA：</span><br><span class="line">name：某主机名</span><br><span class="line">value：某IPV6地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向解析</span></span><br><span class="line"><span class="comment">#注意ip地址特殊格式，ip要反过来写且加特定后缀</span></span><br><span class="line"><span class="comment">#例如1.2.3.4的记录应写成4.3.2.1.in-addr.arpa.</span></span><br><span class="line">PTR：</span><br><span class="line">name：ip地址</span><br><span class="line">value：主机名</span><br><span class="line">举例：</span><br><span class="line">4.3.2.1.in-addr.arpa.INPTRwww.frdqy.top</span><br><span class="line"></span><br><span class="line"><span class="comment">#别名</span></span><br><span class="line">CNAME：</span><br><span class="line">name：主机名别名</span><br><span class="line">value：主机名的正式名称</span><br><span class="line">举例：</span><br><span class="line">web.frdqy.topINCNAMEwww.frdqy.top</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">TTL可以从全局继承</span><br><span class="line">@可以表示当前区域的名称</span><br><span class="line">相邻的两条记录其name相同时，后面的name可以省略</span><br><span class="line">MX、NS等类型记录的VALUE为主机名，此主机名后应该有一个A记录</span><br></pre></td></tr></table></figure><h3 id="完整查询流程"><a href="#完整查询流程" class="headerlink" title="完整查询流程"></a>完整查询流程</h3><p>首先客户端根据输入的网址在本地文件hosts中查询是否有对应条目，如果有则直接访问。否则查询本地DNS缓存，如果缓存中有则直接访问。否则查询DNS服务器，DNS服务器拿到地址判断是否是自己的域，如果是则查询本地数据库将结果返回。否则在DNS服务器的本地缓存冲查询，如果有也将其返回。否则以迭代的方式向根、顶级域依次查询，最终将查询结果返回。</p><p>注意：由直接负责的DNS服务器返回的结果是权威结果，而由DNS服务器的缓存返回的结果是不权威结果。</p><h3 id="BIND"><a href="#BIND" class="headerlink" title="BIND"></a>BIND</h3><p>bind是dns协议的一种实现，它的守护进程名为named。bind安装完成后，默认即可做缓存名称服务器使用，即可以被别的主机指向来向根查询解析库结果。如果没有专门负责解析的区域可以直接启动服务。</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>rndc：远程控制器，监听953/tcp端口，但是一般默认监听于本地127.0.0.1地址，仅允许本地使用</p><p>bind-libs：被bind和bind-utils包中的程序共同用到的库文件</p><p>bind-utils：bind客户端程序集，如dig，host</p><p>bind：提供dns server程序、几个常用的测试程序</p><p>bind-chroot：选装，让named运行于jail模式下，解决安全问题</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h5><p>保存在/etc/named.conf，它包含其他文件/etc/named.rfc1912.zones、/etc/named.root.key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#named.conf</span></span><br><span class="line"><span class="comment">#注意默认全局监听在127.0.0.1上，需要手动改成可与外界通信的地址，或者直接去掉地址表示本机所有地址。</span></span><br><span class="line"><span class="comment">#每条语句必须以分号结尾</span></span><br><span class="line"><span class="comment">#dnssec默认开启，可能会影响解析过程，需要手动设置no(学习时)</span></span><br><span class="line"><span class="comment">#named-check命令可以帮助检查配置文件是否有语法错误</span></span><br><span class="line">[root@localhost named]<span class="comment"># named-check</span></span><br><span class="line">named-checkconf  named-checkzone</span><br><span class="line">全局配置段</span><br><span class="line">options</span><br><span class="line">日志配置段</span><br><span class="line">logging</span><br><span class="line">区域配置段</span><br><span class="line">zone</span><br></pre></td></tr></table></figure><h5 id="解析库文件"><a href="#解析库文件" class="headerlink" title="解析库文件"></a>解析库文件</h5><p>/var/named目录下，一般名字为ZONE_NAME.zone</p><p>注意：一台服务器可为多个服务器提供解析、必须要有根区域解析库文件(named.ca)、还应该有两个区域解析库文件：localhost和127.0.0.1的正反向解析(正向为named.localhost，反向为named.loopback)</p><h4 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h4><h5 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h5><p>用于测试DNS服务，不使用本地hosts文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dig [option] name [@SERVER] [query options]</span><br><span class="line">-t RR_TYPE：指明记录类型</span><br><span class="line">@SERVER：通过服务器检测</span><br><span class="line">[query option]</span><br><span class="line">+[no]trace：跟踪解析过程</span><br><span class="line">+[no]recurse：进行递归解析</span><br><span class="line"></span><br><span class="line"><span class="comment">#正向解析</span></span><br><span class="line">dig -t A www.baidu.com</span><br><span class="line"><span class="comment">#反向解析</span></span><br><span class="line">dig -x 185.199.109.153</span><br><span class="line"><span class="comment">#手动区域传送</span></span><br><span class="line">dig -t axfr DOMAIN [@SERVER]</span><br></pre></td></tr></table></figure><h5 id="host"><a href="#host" class="headerlink" title="host"></a>host</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host [option] name [@SERVER]</span><br><span class="line">-t RR_TYPE：指明记录类型</span><br><span class="line">@SERVER：使用指定服务器测试</span><br></pre></td></tr></table></figure><h5 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nslookup [option] [name] [server]</span><br><span class="line"><span class="comment">#交互模式</span></span><br><span class="line">nslookup</span><br><span class="line">&gt;server IP：以指定的IP为DNS服务器进行查询</span><br><span class="line">&gt;<span class="built_in">set</span> q=RR_TYPE：要查询的资源记录类型</span><br><span class="line">&gt;name：要查询的名称</span><br></pre></td></tr></table></figure><h5 id="rndc"><a href="#rndc" class="headerlink" title="rndc"></a>rndc</h5><p>named服务控制命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">rndc status</span><br><span class="line"><span class="comment">#刷新缓存</span></span><br><span class="line">rndc flush</span><br><span class="line"><span class="comment">#重载配置文件或指定的zone</span></span><br><span class="line">rndc reload [zone]</span><br></pre></td></tr></table></figure><h4 id="配置正向解析"><a href="#配置正向解析" class="headerlink" title="配置正向解析"></a>配置正向解析</h4><p>以frdqy.top为例</p><h5 id="定义区域"><a href="#定义区域" class="headerlink" title="定义区域"></a>定义区域</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在主配置文件中实现/etc/named.conf</span></span><br><span class="line"><span class="comment">#master：主区域；slave：从服务器；hint：根服务器；forward：转发服务器</span></span><br><span class="line"><span class="comment">#file：区域数据文件，默认为相对路径/var/named下</span></span><br><span class="line"><span class="comment">#ZONE_NAME即为域名</span></span><br><span class="line">zone <span class="string">"ZONE_NAME"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> &#123;MASTER|SLAVE|HINT|FORWARD&#125;;</span><br><span class="line">file <span class="string">"ZONE_NAME.zone"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">#举例(配置在/etc/named.rfc1912.zones中，它被/etc/named.conf包含)</span></span><br><span class="line"><span class="comment">#区域名为：frdqy.top.</span></span><br><span class="line">zone <span class="string">"frdqy.top"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"frdqy.top.zone"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义区域解析库文件"><a href="#定义区域解析库文件" class="headerlink" title="定义区域解析库文件"></a>定义区域解析库文件</h5><p>在/var/named/目录下建立区域配置文件frdqy.top.zone。注意要修改权限的属组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要配置A记录</span></span><br><span class="line"><span class="comment">#区域名称可以使用@替代，即frdqy.top.可以由@替换</span></span><br><span class="line"><span class="comment">#ORIGIN宏会自动添加在没有完全定义字段名后面</span></span><br><span class="line"><span class="variable">$TTL</span> 3600</span><br><span class="line"><span class="variable">$ORIGIN</span> frdqy.top.</span><br><span class="line">@INSOAns1.frdqy.top.dnsadmin.frdqy.top. (</span><br><span class="line">2020010801</span><br><span class="line">1H</span><br><span class="line">10M</span><br><span class="line">3D</span><br><span class="line">1D )</span><br><span class="line">INNSns1</span><br><span class="line">INMX10mx1</span><br><span class="line">INMX20mx2</span><br><span class="line">ns1INA192.168.163.131</span><br><span class="line">mx1INA192.168.163.3</span><br><span class="line">mx2INA192.168.163.4</span><br><span class="line">wwwINA192.168.163.2</span><br><span class="line">webINCNAMEwww</span><br><span class="line">bbsINA192.168.163.9</span><br><span class="line">bbsINA192.168.163.9</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改权限</span></span><br><span class="line">chgrp named /var/named/frdqy.top.zone</span><br><span class="line">chmod o= /var/named/frdqy.top.zone</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查语法错误</span></span><br><span class="line">named-checkconf</span><br><span class="line">named-checkzone frdqy.top. /var/named/frdqy.top.zone</span><br></pre></td></tr></table></figure><h5 id="服务器重载"><a href="#服务器重载" class="headerlink" title="服务器重载"></a>服务器重载</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rndc reload</span><br><span class="line">或</span><br><span class="line">systemctl reload named.service</span><br></pre></td></tr></table></figure><h4 id="配置反向解析"><a href="#配置反向解析" class="headerlink" title="配置反向解析"></a>配置反向解析</h4><h5 id="定义区域-1"><a href="#定义区域-1" class="headerlink" title="定义区域"></a>定义区域</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在主配置文件中实现/etc/named.conf</span></span><br><span class="line"><span class="comment">#master：主区域；slave：从服务器；hint：根服务器；forward：转发服务器</span></span><br><span class="line"><span class="comment">#file：区域数据文件，默认为相对路径/var/named下</span></span><br><span class="line"><span class="comment">#ZONE_NAME为反向区域的名字，即反写的网段地址.in-addr.arpa</span></span><br><span class="line">zone <span class="string">"ZONE_NAME"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> &#123;MASTER|SLAVE|HINT|FORWARD&#125;;</span><br><span class="line">file <span class="string">"ZONE_NAME.zone"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">zone <span class="string">"168.192.in-addr.arpa"</span>&#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"192.168.zone"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="定义区域解析库文件-1"><a href="#定义区域解析库文件-1" class="headerlink" title="定义区域解析库文件"></a>定义区域解析库文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要配置PTR记录</span></span><br><span class="line"><span class="variable">$TTL</span> 3600</span><br><span class="line"><span class="variable">$ORIGIN</span> 168.192.in-addr.arpa.</span><br><span class="line">@INSOAns1.frdqy.top.dnsadmin.frdqy.top. (</span><br><span class="line">2020010801</span><br><span class="line">1H</span><br><span class="line">10M</span><br><span class="line">3D</span><br><span class="line">1D )</span><br><span class="line">INNSns1.frdqy.top.</span><br><span class="line">2.163INPTRns1.frdqy.top.</span><br><span class="line">3.163INPTRmx1.frdqy.top.</span><br><span class="line">4.163INPTRmx2.frdqy.top.</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改权限</span></span><br><span class="line">chgrp named /var/named/192.168.zone</span><br><span class="line">chmod o= /var/named/192.168.zone</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查语法错误</span></span><br><span class="line"><span class="comment">#第一个参数是区域名，和/etc/named.conf中zone定义的一样</span></span><br><span class="line">named-checkzone 168.192.in-addr.arpa /var/named/192.168.zone</span><br><span class="line">named-checkconf</span><br></pre></td></tr></table></figure><h5 id="服务器重载-1"><a href="#服务器重载-1" class="headerlink" title="服务器重载"></a>服务器重载</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rndc reload</span><br><span class="line">或</span><br><span class="line">systemctl reload named.service</span><br></pre></td></tr></table></figure><h4 id="主从服务器配置"><a href="#主从服务器配置" class="headerlink" title="主从服务器配置"></a>主从服务器配置</h4><p>从服务器是针对主服务器的某个区域来配置的，即若主服务器有多个区域的解析，从服务器一般只同步一个区域。当然，也可以全部同步。因此，一台服务器既可以当主也可以同时当从(理解主从是针对区域的概念)。并且从服务器可以级联配置，即从服务器可以从另一台从服务器来同步区域数据。</p><h5 id="从"><a href="#从" class="headerlink" title="从"></a>从</h5><h6 id="定义从区域"><a href="#定义从区域" class="headerlink" title="定义从区域"></a>定义从区域</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#type为类型</span></span><br><span class="line"><span class="comment">#file为slaves目录下的解析库文件</span></span><br><span class="line"><span class="comment">#master指明主服务器的ip地址，有多个需要用“;”分离</span></span><br><span class="line"><span class="comment">#不需要写解析文件，直接reload即可同步</span></span><br><span class="line">zone <span class="string">"ZONE_NAME"</span> IN&#123;</span><br><span class="line"><span class="built_in">type</span> slave;</span><br><span class="line">file <span class="string">"slaves/ZONE_NAME.zone"</span></span><br><span class="line">masters &#123; MASTER_IP1;MASTER_IP2; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#配置文件语法检查</span></span><br><span class="line">named-checkfoncig</span><br></pre></td></tr></table></figure><h6 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rndc reload</span><br><span class="line">或</span><br><span class="line">systemctl reload named.service</span><br></pre></td></tr></table></figure><h5 id="主"><a href="#主" class="headerlink" title="主"></a>主</h5><p>确保区域文件中为每个从服务器配置了 NS记录，且正向解析的文件中每个服务器的NS记录都需要配置一个A记录，A记录的地址为真正服务器的地址。然后重载配置文件即可。</p><h4 id="子域授权"><a href="#子域授权" class="headerlink" title="子域授权"></a>子域授权</h4><h5 id="正向解析授权"><a href="#正向解析授权" class="headerlink" title="正向解析授权"></a>正向解析授权</h5><p>在/var/named/区域解析配置中添加一条NS记录以及对应的A记录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在frdqy.top.域上对ops.frdqy.top子域授权</span></span><br><span class="line">ops.frdqy.topINNSns1.ops.frdqy.top</span><br><span class="line">ns1.ops.frdqy.topINAIP</span><br></pre></td></tr></table></figure><h5 id="定义转发域"><a href="#定义转发域" class="headerlink" title="定义转发域"></a>定义转发域</h5><p>转发域分为区域转发和全局转发。被转发服务器必须允许为当前服务做递归。</p><h6 id="区域转发"><a href="#区域转发" class="headerlink" title="区域转发"></a>区域转发</h6><p>仅转发对某特定区域的解析请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#first：首先转发，转发器不响应就迭代查询</span></span><br><span class="line"><span class="comment">#only：只转发，不响应则等待</span></span><br><span class="line">zone <span class="string">"ZONE_NAME"</span> IN &#123;</span><br><span class="line">tyep forward;</span><br><span class="line">forward &#123; first|only &#125;;</span><br><span class="line">forwarders &#123; SERVER_IP; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="全局转发"><a href="#全局转发" class="headerlink" title="全局转发"></a>全局转发</h6><p>本地没有通过zone定义的区域请求全部转发给/etc/named.conf指定的转发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在/etc/named.conf的option字段中添加</span></span><br><span class="line">option&#123;</span><br><span class="line">...</span><br><span class="line">forward &#123;only|first&#125;;</span><br><span class="line">forwarders &#123;SERVER_IP;&#125;;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="安全相关设置"><a href="#安全相关设置" class="headerlink" title="安全相关设置"></a>安全相关设置</h4><h5 id="acl"><a href="#acl" class="headerlink" title="acl"></a>acl</h5><p>访问控制链表。把一个或多个地址归并一个命名的集合，随后通过此名称即可对此集合内的所有主机实现统一调用。在配置文件中定义acl后需要配合访问控制指令在zone或者全局配置文件中使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只能放在option之前</span></span><br><span class="line">acl acl_name&#123;</span><br><span class="line">ip;</span><br><span class="line">net/prelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例，表示整个网络的主机都可以</span></span><br><span class="line">acl myacl&#123;</span><br><span class="line">192.168.0.0/16;</span><br><span class="line">127.0.0.0/8;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">#举例，表示主机132受到控制</span></span><br><span class="line">acl slaves&#123;</span><br><span class="line">192.168.163.132;</span><br><span class="line">127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="内置acl"><a href="#内置acl" class="headerlink" title="内置acl"></a>内置acl</h6><p>none：没有一个主机</p><p>any：任意一个主机</p><p>local：本机</p><p>localnet：本机所在的ip网络</p><h6 id="访问控制指令"><a href="#访问控制指令" class="headerlink" title="访问控制指令"></a>访问控制指令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allow-query&#123;&#125;;允许查询的主机</span><br><span class="line">allow-transfer&#123;&#125;;允许向哪些主机做区域传送(应该设置为只向从服务器传送)</span><br><span class="line">allow-recursion&#123;&#125;;允许哪些主机进行递归查询</span><br><span class="line">allow-update&#123;&#125;;允许动态更新区域解析库的文件(一般设置为none，不允许任何更新)</span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>bind视图即view是主要用来实现只能dns，即实现不同的用户解析到不同的ip上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义</span></span><br><span class="line">view VIEW_NAME&#123;</span><br><span class="line">match-clients &#123; IP; &#125;;</span><br><span class="line">zone ZONE_NAEM_1 IN &#123;</span><br><span class="line">    <span class="built_in">type</span>;</span><br><span class="line">    file;</span><br><span class="line">&#125;;</span><br><span class="line">zone ZONE_NAEM_2 IN &#123;</span><br><span class="line">    <span class="built_in">type</span>;</span><br><span class="line">    file;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例，同一个zone要定义在不同的view实现智能解析</span></span><br><span class="line">view internal &#123;</span><br><span class="line">match-clients &#123; 192.168.163.0/24; &#125;;</span><br><span class="line">zone <span class="string">"frdqy.top"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"frdqy.top/internal"</span></span><br><span class="line">&#125;;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">#all要放在最后，精确匹配的放在前面</span></span><br><span class="line">view external &#123;</span><br><span class="line">match-clients &#123; all; &#125;;</span><br><span class="line">zone <span class="string">"frdqy.top"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"frdqy.top/external"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> bind </tag>
            
            <tag> dig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维安全基础</title>
      <link href="/2020/01/07/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/07/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="加密算法和协议概要"><a href="#加密算法和协议概要" class="headerlink" title="加密算法和协议概要"></a>加密算法和协议概要</h3><h4 id="单向加密"><a href="#单向加密" class="headerlink" title="单向加密"></a>单向加密</h4><p>只能加密不能解密，用于特征码的制作，即验证数据完整性。</p><a id="more"></a><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li>定长输出</li><li>有雪崩效应，即小小的改动可以引起很大变化</li></ul><h5 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h5><p>md5：消息摘要算法，128位定长输出</p><p>sha1：安全hash算法，160位定长输出</p><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>主要有DES、AES、Blowfish、IDEA、RC6等加密方式</p><h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ul><li>加密解密使用同一密钥</li><li>将原始数据分割成为固定大小的块，逐个进行加密</li></ul><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><ul><li>密钥过多</li><li>密钥分发困难</li></ul><h4 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h4><p>密钥分为公钥与私钥，用公钥加密的数据只能使用与之配对的私钥进行解密</p><p>公钥：从私钥中提取产生，可公开给所有人，称为pubkey</p><p>私钥：通过工具创建，使用者自己留存，必须保证其私密性，称为secret key</p><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><p>数字签名：主要在于让接收方确认发送方的身份</p><p>密钥交换：发送方用对方公钥加密一个对称密钥，并发送给对方</p><p>数据加密</p><h5 id="常用算法-1"><a href="#常用算法-1" class="headerlink" title="常用算法"></a>常用算法</h5><p>RSA、DSA(数字签名算法)</p><h4 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h4><p>公钥加密、DH算法。很少使用公钥加密实现密钥交换，因此下面只说DH算法实现的密钥交换。</p><p>背景：假设A，B，C三个人，A与B需要正常通信，C监听A与B的通信，现在需要A与B进行密钥的交换。</p><p>首先，A选择两个大素数假设为p，g，将这两个数明文发给B，此时C也收到这两个数。然后，A自己生成一个数x，将p^x%g的结果发送给B；同样，B也生成一个数y。将p^y%g的结果发送给A，此时C也可以获得这个结果，但是在有限时间内无法求出x或者y。最后，A将拿到的结果^x，B将拿到的结果^y，此时两个结果是一样的。因此这就实现了密钥交换，而此时C无法算出x和y，因此无法知道真正的密钥。</p><h4 id="加密解密通讯过程"><a href="#加密解密通讯过程" class="headerlink" title="加密解密通讯过程"></a>加密解密通讯过程</h4><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><p>背景：假设3个人：A，B，C。其中A与B想要通信，而C想要监听A与B的通信。(假设A发送给B数据)</p><p>首先，A将待发送的数据使用单向加密算法提取出特征码；然后A使用自己的私钥将特征码加密附加在数据后面；接着，A生成一个临时的对称密钥来加密整段数据(待发送数据和加密后的特征码)；然后，A使用B的公钥加密临时的对称密钥，并附加在整段数据后面；最后发送给B。</p><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h5><p>B拿到数据后首先使用自己的私钥来解密加密的对称密钥；然后使用对称密钥解密整段数据(真实数据和加密后的特征码)；接着使用A的公钥解密特征码(验证A的身份)；最后使用单向加密算法加密数据得到特征码与之比较，相同则数据完整性得到验证。</p><h5 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h5><p>加密与解密过程都需要拿到对面的公钥，因此如果没有第三方可靠机构来提供公钥的验证，那么可能发生中间人攻击。即A想要B的公钥时，C表示我就是B然后把自己的公钥发送给A，接着向B表示自己是A，同时获取B的公钥与提供自己的私钥，这样AB认为自己可以正常通信，其实通信过程都经过C，这就是中间人攻击。</p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><p>为了解决上述问题提出了CA的概念，即证书颁发机构。它保证通信双方能够安全的拿到对方的公钥，是一个双方都公信的第三方可信机构。</p><p>具体实现是CA首先自己给自己颁发一个证书，这个证书不通过网络传输，而是面对面交付给对方，里面包含CA机构的公钥。然后各个机构会像CA申请注册证书，里面包括该机构的公钥及有效期等信息。CA经过实地考察后没问问题会颁发电子证书给各个机构(有CA公钥可以解密CA证书)，这样当双方通信需要对方公钥时，双方通过交换证书来获得公钥(要验证证书是否有效，名称是否正确等)，从而避免假公钥的问题。</p><h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>开源实现ssl协议的程序</p><h4 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h4><p>背景：A为通信客户端，B为通信服务端</p><p>首先A生成一组随机数RNC，发送client_hello信息将RNC发送给B，B也生成一组随机数RNS，发送server_hello将RNS发送给A。这个过程中双方协商使用什么加密方法进行通信(仅仅协商方法，不涉及具体密钥)。</p><p>然后，B将自己的证书发送给A，且请求A的证书；A得到证书后会检查证书有效期等信息，没问题则将自己的证书发给B，B也会检查相关信息。接着A将此前发送的所有信息使用hash签名后用自己私钥加密发给B端，B端用A公钥(从交换的证书中获得)解密后验证hash完整性，没有问题则继续进行后续通信。</p><p>上述过程如果没有问题，即最后的hash验证没有问题，则进入下面阶段。</p><p>首先A生成一个随机的密钥PMS，且使用对方的公钥加密发送给对方，这样，双方都拥有PMS、RNS、RNC，进行相同计算后即是双方通信时所需要的最终密钥。最后双方可以基于这个密钥进行通信。</p><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><p>libencrypt库，主要实现加密解密功能，由开发者使用</p><p>libssl库，主要实现ssl功能</p><p>openssl，是多用途命令行工具</p><h4 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">openssl [optino]</span><br><span class="line">help：查看帮助</span><br><span class="line">version：查看版本信息</span><br><span class="line">enc：对称加密相关</span><br><span class="line">dgst：单向加密相关</span><br><span class="line">ca：生成ca相关</span><br></pre></td></tr></table></figure><h5 id="对称加密-1"><a href="#对称加密-1" class="headerlink" title="对称加密"></a>对称加密</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">openssl enc [option] file</span><br><span class="line">-e：加密</span><br><span class="line">-des3：指明使用des加密</span><br><span class="line">-d：解密</span><br><span class="line">-a：编码为base64编码格式</span><br><span class="line">-salt：加杂质信息</span><br><span class="line">-<span class="keyword">in</span> file：指明要加密的文件</span><br><span class="line">-out file：指明加密后生成的文件</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">openssl enc -e -des3 -a -salt -<span class="keyword">in</span> ./fstab -out ./fstab.enc</span><br><span class="line">openssl enc -d -des3 -a -salt -<span class="keyword">in</span> ./fstab.enc -out ./fstab</span><br></pre></td></tr></table></figure><h5 id="单向加密-1"><a href="#单向加密-1" class="headerlink" title="单向加密"></a>单向加密</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl dgst [option] file</span><br><span class="line">-md5：使用md5加密</span><br></pre></td></tr></table></figure><h6 id="生成用户密码"><a href="#生成用户密码" class="headerlink" title="生成用户密码"></a>生成用户密码</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt 12345</span><br><span class="line"><span class="comment">#-1表示基于md5算法</span></span><br></pre></td></tr></table></figure><h6 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl rand [option] number_length</span><br><span class="line">-base64：使用base64编码</span><br><span class="line">-hex：使用16进制编码</span><br><span class="line"><span class="comment">#常用于生成salt</span></span><br></pre></td></tr></table></figure><h5 id="公钥加密-1"><a href="#公钥加密-1" class="headerlink" title="公钥加密"></a>公钥加密</h5><p>主要包括RSA，DSA、DH等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密钥(私钥)，保存至path目录下</span></span><br><span class="line">openssl genrsa -out path length_num</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成私钥且只能自己可读密钥保存至tmp目录下，密钥长度为2048(必须是2的次方)</span></span><br><span class="line"><span class="comment">#注意，使用括号括起来是为了使其在子shell中运行而不影响当前shell的umask权限</span></span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out /tmp/mykey 2048)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取公钥</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> /tmp/mykey -puout</span><br></pre></td></tr></table></figure><h3 id="Linux随机数生成器"><a href="#Linux随机数生成器" class="headerlink" title="Linux随机数生成器"></a>Linux随机数生成器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/dev/random：仅从熵池中返回随机数，熵池用尽则阻塞进程</span><br><span class="line">/dev/urandom：从熵池中返回随机数，随机数用尽会利用软件生成伪随机数(不安全)</span><br><span class="line"></span><br><span class="line">熵池：内存中存储随机数的空间</span><br><span class="line">熵池随机数来源：</span><br><span class="line">硬盘io中断时间间隔</span><br><span class="line">键盘io中断时间间隔</span><br></pre></td></tr></table></figure><h3 id="建立私有CA"><a href="#建立私有CA" class="headerlink" title="建立私有CA"></a>建立私有CA</h3><p>可以使用openssl命令建立CA，也可以使用OpenCA软件。这里只讲openssl命令</p><p>配置文件：/etc/pki/tls/openssl.cnf</p><h4 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据上述配置文件的描述放到规定目录下，命名要规范</span></span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 4096)</span><br></pre></td></tr></table></figure><h4 id="生成自签证书"><a href="#生成自签证书" class="headerlink" title="生成自签证书"></a>生成自签证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-new表示生成新证书签署请求；</span></span><br><span class="line"><span class="comment">#-x509表示自签证书；</span></span><br><span class="line"><span class="comment">#-key指明密钥路径(会自动从私钥中抽取公钥)</span></span><br><span class="line"><span class="comment">#-out指明生成路径</span></span><br><span class="line"><span class="comment">#-days指明有效期限，默认365天</span></span><br><span class="line">openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 3650</span><br></pre></td></tr></table></figure><h4 id="创建目录及文件"><a href="#创建目录及文件" class="headerlink" title="创建目录及文件"></a>创建目录及文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/pki/CA/&#123;certs,crl,newcerts&#125;</span><br><span class="line">touch /etc/pki/CA/&#123;serial,index.txt&#125;</span><br><span class="line"><span class="comment">#给明第一个证书的序列号</span></span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial</span><br></pre></td></tr></table></figure><h3 id="请求签署CA"><a href="#请求签署CA" class="headerlink" title="请求签署CA"></a>请求签署CA</h3><p>以httpd为例</p><h4 id="申请的主机生成私钥"><a href="#申请的主机生成私钥" class="headerlink" title="申请的主机生成私钥"></a>申请的主机生成私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在服务的目录下创建ssl目录</span></span><br><span class="line">mkdir /etc/httpd/ssl ; <span class="built_in">cd</span> /etc/httpd/ssl</span><br><span class="line"><span class="comment">#生成私钥</span></span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out httpd.key 4096)</span><br></pre></td></tr></table></figure><h4 id="生成请求命令"><a href="#生成请求命令" class="headerlink" title="生成请求命令"></a>生成请求命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key httpd.key -out httpd.csr -days 365</span><br></pre></td></tr></table></figure><h4 id="请求传送给主机"><a href="#请求传送给主机" class="headerlink" title="请求传送给主机"></a>请求传送给主机</h4><p>略，一般直接硬盘拷走</p><h4 id="在CA主机上签署证书"><a href="#在CA主机上签署证书" class="headerlink" title="在CA主机上签署证书"></a>在CA主机上签署证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -<span class="keyword">in</span> /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365</span><br></pre></td></tr></table></figure><h4 id="查看证书签署信息"><a href="#查看证书签署信息" class="headerlink" title="查看证书签署信息"></a>查看证书签署信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看证书签署的subject信息</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> /etc/pki/CA/certs/httpd.crt -noout -subject</span><br></pre></td></tr></table></figure><h3 id="吊销CA"><a href="#吊销CA" class="headerlink" title="吊销CA"></a>吊销CA</h3><p>首先客户端获取要吊销的serial</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /etc/pki/CA/certs/httpd.crt -noout -serial -subject</span><br></pre></td></tr></table></figure><p>其次，CA主机ijnx吊销操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -revoke /etc/pki/CA/newcerts/serial.pem</span><br><span class="line"><span class="comment">#其中serial为对应要吊销的序列号</span></span><br></pre></td></tr></table></figure><p>最后生成吊销编号(只在第一次吊销时执行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 01 /etc/pki/CA/crinumber</span><br></pre></td></tr></table></figure><p>更新证书吊销列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -gencrl -out thisca.crl</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crl文件</span></span><br><span class="line">openssl crl -<span class="keyword">in</span> /path/xxx.crl -noout -text</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openssl </tag>
            
            <tag> 安全基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SELinux简介</title>
      <link href="/2020/01/06/SELinux%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/01/06/SELinux%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>增强型的Linux系统。</p><a id="more"></a><p>普通的linux使用DAC(自由访问控制)机制来管理用户权限，DAC对进程没有束缚，即进程拥有该进程的发起者的权限，这是很危险的，如果被别人提权，那么别人也就拥有了该用户的权限。</p><p>SELinux采用了MAC(强制访问控制)来解决上述问题。它规定了进程的权限是有限的，即使进程发起者有其他的权限，但是由其启动的进程只有发起时所规定的权限。</p><p>因此，在开启了SELinux的系统中，进程的权限不仅受到属组和属主的限制，还受到MAC的限制，可以理解为类似沙箱的环境，即使进程的发起者拥有访问沙箱外的权限，沙箱内的进程也无法访问沙箱外的空间。</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><h4 id="strict"><a href="#strict" class="headerlink" title="strict"></a>strict</h4><p>每个进程都受到SELinux的控制</p><h4 id="targeted"><a href="#targeted" class="headerlink" title="targeted"></a>targeted</h4><p>仅有限个进程受到SELinux控制</p><h3 id="SELinux状态"><a href="#SELinux状态" class="headerlink" title="SELinux状态"></a>SELinux状态</h3><h4 id="enforcing"><a href="#enforcing" class="headerlink" title="enforcing"></a>enforcing</h4><p>强制，每个受限的进程都必然受限(因为工作模式处于targeted时并不是每个程序都受到限制，因此存在不受限的程序)。</p><h4 id="permissive"><a href="#permissive" class="headerlink" title="permissive"></a>permissive</h4><p>启用，每个受限的进程违规操作不会被禁止，但会被记录到日志中</p><h4 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h4><p>禁用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取当前SELinux状态</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="comment">#设置当前SELinux状态，仅当前有效</span></span><br><span class="line"><span class="comment">#永久有效需要修改/etc/sysconfig/selinux</span></span><br><span class="line">setenforce 0|1</span><br><span class="line">0：设置为permissive状态</span><br><span class="line">1：设置为enforcing状态</span><br></pre></td></tr></table></figure><h3 id="安全上下文"><a href="#安全上下文" class="headerlink" title="安全上下文"></a>安全上下文</h3><p>SELinux为每个进程提供的安全标签，其标签为user:role:type:sensitivity:category。但是有用的主要是第三段。用于定义不同的权限范围，类似定义不同的沙箱。另外，某一目录下的文件默认拥有该文件的类型，即tmp目录内的文件类型为tmp***等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]@ ls -Z</span><br><span class="line">    system_u:object_r:admin_home_t:s0 anaconda-ks.cfg</span><br><span class="line">    system_u:object_r:admin_home_t:s0 anaconda-ks.cfg_bak</span><br><span class="line">unconfined_u:object_r:admin_home_t:s0 anaconda-ks.cfg_symbolic</span><br><span class="line">    system_u:object_r:admin_home_t:s0 initial-setup-ks.cfg</span><br><span class="line">unconfined_u:object_r:admin_home_t:s0 <span class="built_in">test</span></span><br><span class="line">unconfined_u:object_r:admin_home_t:s0 test_symbolic</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改安全上下文</span></span><br><span class="line">chcon [option] file</span><br><span class="line">-t type_name：修改指定标签</span><br><span class="line">-R：递归打标签</span><br><span class="line"></span><br><span class="line"><span class="comment">#还原默认安全上下文</span></span><br><span class="line">restorecon file</span><br><span class="line">-R：递归还原</span><br></pre></td></tr></table></figure><h3 id="SELinux规则库"><a href="#SELinux规则库" class="headerlink" title="SELinux规则库"></a>SELinux规则库</h3><p>定义了处于哪些type域的进程可以访问哪些type文件。</p><p>此时访问流程变为：当进程发起文件访问时，首先检查进程的属主和属组是否可以访问，其次检查SELinux规则库内定义的该进程的域是否能够访问该类型的文件(读/写)，若失败则拒绝访问并记录到日志中。</p><h3 id="布尔型规则"><a href="#布尔型规则" class="headerlink" title="布尔型规则"></a>布尔型规则</h3><p>一个程序运行时有多种功能，比如文件上传和下载功能。不同的功能的权限和危险程度也是不同的，因此SELinux可以实现将程序的功能设定为开启或关闭，这就是布尔型规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示当前系统的所有SELinux的布尔型状态</span></span><br><span class="line">[root@localhost ~]@ getsebool -a</span><br><span class="line">abrt_anon_write --&gt; off</span><br><span class="line">abrt_handle_event --&gt; off</span><br><span class="line">abrt_upload_watch_anon_write --&gt; on</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到布尔型标签</span></span><br><span class="line">getsebool [option] file</span><br><span class="line">-a：显示所有</span><br><span class="line"><span class="comment">#设置布尔型标签</span></span><br><span class="line">setsebool [option] file</span><br><span class="line">-P：写入配置文件中，永久有效</span><br></pre></td></tr></table></figure><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意，并不是所有日志都是文本文件</span></span><br><span class="line">[root@localhost ~]@ ls /var/<span class="built_in">log</span>/audit/audit.log </span><br><span class="line">/var/<span class="built_in">log</span>/audit/audit.log</span><br><span class="line">[root@localhost ~]@ file /var/<span class="built_in">log</span>/audit/audit.log</span><br><span class="line">/var/<span class="built_in">log</span>/audit/audit.log: data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SELinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核管理</title>
      <link href="/2020/01/06/%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/"/>
      <url>/2020/01/06/%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="内核特点"><a href="#内核特点" class="headerlink" title="内核特点"></a>内核特点</h3><ul><li>支持模块化。各模块以.ko结尾(kernel object)</li><li>支持模块运行时动态装载或卸载</li><li>单内核设计，却借鉴了微内核模块化机制的特点</li></ul><a id="more"></a><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><h4 id="核心文件"><a href="#核心文件" class="headerlink" title="核心文件"></a>核心文件</h4><p>保存在/boot/下，名称为vmlinuz-VERSION-release</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ls /boot/</span><br><span class="line">config-4.18.0-80.el8.x86_64</span><br><span class="line">efi</span><br><span class="line">grub2</span><br><span class="line">initramfs-0-rescue-75fbe50f6f2b4dbfae8dc77fbbd4d906.img</span><br><span class="line">initramfs-4.18.0-80.el8.x86_64.img</span><br><span class="line">initramfs-4.18.0-80.el8.x86_64kdump.img</span><br><span class="line">loader</span><br><span class="line">lost+found</span><br><span class="line">System.map-4.18.0-80.el8.x86_64</span><br><span class="line">vmlinuz-0-rescue-75fbe50f6f2b4dbfae8dc77fbbd4d906</span><br><span class="line">vmlinuz-4.18.0-80.el8.x86_64</span><br></pre></td></tr></table></figure><h4 id="模块文件"><a href="#模块文件" class="headerlink" title="模块文件"></a>模块文件</h4><p>保存在/lib/modules/下，名称为VERSION-release</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">ls /lib/modules/</span><br><span class="line">4.18.0-79.el8+2.x86_64  4.18.0-80.el8.x86_64</span><br></pre></td></tr></table></figure><h4 id="ramdisk"><a href="#ramdisk" class="headerlink" title="ramdisk"></a>ramdisk</h4><p>内核的辅助性文件，本质是一个简装本的根文件系统，不是必须的文件，如果内核能直接驱动rootfs那么就不需要此文件。它可以加载目标设备驱动、逻辑设备驱动、文件系统驱动</p><p>存放在/boot/目录下叫做initramfs-VERSION.img</p><p>在centos6上叫做initrd，在centos7上叫做initramfs，可以通过dracut工具创建。</p><p>基于内存的磁盘设备，在内存区域模拟一个硬盘空间。当系统启动时，内核需要加载根文件系统，而根文件系统放在磁盘上，那么内核需要有该磁盘的相应驱动程序才可以读磁盘从而获取根文件系统，但是驱动程序都保存在文件系统中，这就成了一个死循环。因此设置了一个ramdisk，作为一个临时根文件系统，他是在安装操作系统时通过扫描本地磁盘接口从而获取相应的驱动程序放在内存中即ramdisk中，那么当内核需要读取根文件系统时就可以先把ramdisk当作根，然后通过其内的驱动来读取磁盘中的根文件系统，此时再把ramdisk的根切换到真正的根文件系统中，这样就完成了内核加载根的过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自行创建initrd.img</span></span><br><span class="line">dracut [option] initrd-image kernel-name</span><br><span class="line">--with=&lt;module&gt;：需要额外装载的模块</span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">dracut /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure><h3 id="重要内核参数"><a href="#重要内核参数" class="headerlink" title="重要内核参数"></a>重要内核参数</h3><p>net.ipv4.ip_forward：核心转发(即同主机不同网卡之间的转发)</p><p>vm.drop_caches：缓存丢弃，即关闭缓存</p><p>kernel.hostname：主机名</p><p>net.ipv4.icmp_echo_ignore_all：忽略所有ping操作</p><h3 id="伪文件系统"><a href="#伪文件系统" class="headerlink" title="伪文件系统"></a>伪文件系统</h3><h5 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">内核状态和统计信息的输出接口；同时提供了配置接口&#x2F;proc&#x2F;sys</span><br><span class="line">只读：&#x2F;proc&#x2F;@&#x2F;@</span><br><span class="line">可写：&#x2F;proc&#x2F;sys&#x2F;可接收用户指定的值来修改内核</span><br><span class="line">修改：</span><br><span class="line">sysctl [option] name</span><br><span class="line">-a：显示所有可修改的值&#x2F;proc&#x2F;sys&#x2F;目录下的参数值</span><br><span class="line">-w name&#x3D;value：修改某值</span><br><span class="line">-p cfg_path：立即生效</span><br><span class="line">配置文件在&#x2F;etc&#x2F;sysctl.d&#x2F;*.conf，修改后可永久有效</span><br></pre></td></tr></table></figure><h5 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用于输出内核识别出的各硬件相关属性信息，也有内核对硬件特性的可设置参数，可定制硬件工作特性</span><br><span class="line">udev：通过读取&#x2F;sys目录下的硬件设备信息创建对应的硬件设备文件，方便管理</span><br><span class="line">配置文件一般在&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;目录以及&#x2F;usr&#x2F;lib&#x2F;udev&#x2F;rules.d&#x2F;</span><br><span class="line">#例子</span><br><span class="line">&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;70-persistent-ipoib.rules保存了网卡硬件信息，如果有多块网卡想交换则修改这里</span><br><span class="line">同时还要修改&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;下的网卡信息</span><br><span class="line">要想上述更改生效需要使用modprobe -r卸载在装载模块</span><br></pre></td></tr></table></figure><h3 id="内核相关命令"><a href="#内核相关命令" class="headerlink" title="内核相关命令"></a>内核相关命令</h3><h4 id="编译选择符号"><a href="#编译选择符号" class="headerlink" title="编译选择符号"></a>编译选择符号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ ]：不要此模块</span><br><span class="line">[M]：编译成内核模块，用到时再装载</span><br><span class="line">[*]：直接编译进内核核心</span><br></pre></td></tr></table></figure><h4 id="内核信息获取"><a href="#内核信息获取" class="headerlink" title="内核信息获取"></a>内核信息获取</h4><h5 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示系统信息</span></span><br><span class="line">uname [option]</span><br><span class="line">-r：显示内核的release号</span><br><span class="line">-n：显示主机名，即hostname</span><br><span class="line">-v：显示编译版本号</span><br><span class="line">-a：显示所有信息</span><br></pre></td></tr></table></figure><h5 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示内核状态，内容来自/proc/modules</span></span><br><span class="line">lsmod</span><br></pre></td></tr></table></figure><h5 id="modinfo"><a href="#modinfo" class="headerlink" title="modinfo"></a>modinfo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#显示单个模块信息</span><br><span class="line">modinfo name</span><br><span class="line">-k：指明内核(适用多内核)</span><br><span class="line">-F field：显示指定字段</span><br><span class="line">-n：显示文件路径</span><br></pre></td></tr></table></figure><h4 id="内核模块管理"><a href="#内核模块管理" class="headerlink" title="内核模块管理"></a>内核模块管理</h4><h5 id="modprobe"><a href="#modprobe" class="headerlink" title="modprobe"></a>modprobe</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现模块的动态装载和卸载，不加选项则安装指定模块</span></span><br><span class="line"><span class="comment">#正在使用的模块不要随意卸载</span></span><br><span class="line">modprobe [option] name</span><br><span class="line">-r：卸载模块</span><br></pre></td></tr></table></figure><h5 id="depmod"><a href="#depmod" class="headerlink" title="depmod"></a>depmod</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成依赖关系</span></span><br><span class="line">depmod [option] name</span><br></pre></td></tr></table></figure><h5 id="insmod"><a href="#insmod" class="headerlink" title="insmod"></a>insmod</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装指定模块，但是无法解决依赖关系</span></span><br><span class="line"><span class="comment">#filename必须是具体模块路径，可使用modinfo -n module_name</span></span><br><span class="line">insmod [option] filename</span><br></pre></td></tr></table></figure><h5 id="rmmod"><a href="#rmmod" class="headerlink" title="rmmod"></a>rmmod</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定模块</span></span><br><span class="line">rmmod module_name</span><br></pre></td></tr></table></figure><h3 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h3><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><p>Centos6/7：Development tools、server platform development、ncurses相关包</p><h4 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h4><h5 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看cpu信息，主要看平台型号即可</span></span><br><span class="line">cat /proc/info</span><br><span class="line">lscpu</span><br></pre></td></tr></table></figure><h5 id="pci"><a href="#pci" class="headerlink" title="pci"></a>pci</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看pci信息</span></span><br><span class="line">lscpi</span><br><span class="line"><span class="comment">#查看sub信息</span></span><br><span class="line">lsusb</span><br><span class="line"><span class="comment">#查看硬盘设备</span></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul><li>下载内核并解压到/usr/source/kernel目录下，并创建连接对其操作</li><li>使用make menuconfig进入图形界面设置内核模块</li><li>make编译、make modules_install、make install</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进行内核编译时建议使用screen运行，防止终端断开导致内核编译失败</span></span><br><span class="line">打开：screen</span><br><span class="line">拆除：ctrl+a，d</span><br><span class="line">列出：screen -ls</span><br><span class="line">连接：screen -r screen_id</span><br><span class="line">关闭：<span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>红帽系列的内核编译配置文件一般在/boot/config-4.18.0-80.el8.x86_64文件，里面列出了当前内核编译时的一些选项。非红帽发行版可能在/proc/config.gz内有配置文件。</p><p>编译前需要将上述这个模板复制过来，然后使用make menuconfig在其基础上进行修改即可。</p><h5 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h5><p>多线程编译：make -j 指定cpu核心数</p><p>只对内核某个模块进行编译：切换到/usr/src/kernel对应模块目录下，使用make file_name.ko进行编译，注意.ko的文件必须是一个已有的.c文件。最后将其放到/lib/modules/release-name/kernel/下的对应目录中即可</p><h5 id="内核清理"><a href="#内核清理" class="headerlink" title="内核清理"></a>内核清理</h5><p>用于对执行过编译操作的内核源码树进行重新编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清理绝大多数文件，但保存config</span></span><br><span class="line">make clean</span><br><span class="line"><span class="comment">#清理所有文件</span></span><br><span class="line">make mrproper</span><br><span class="line"><span class="comment">#相当于mrproper，额外清理patches和编辑器备份文件</span></span><br><span class="line">make distclean</span><br></pre></td></tr></table></figure><h5 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make modules_install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内核管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统启动流程</title>
      <link href="/2020/01/06/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/01/06/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>带电自检，存储在ROM中，其中包括BIOS。</p><a id="more"></a><h3 id="BOOT"><a href="#BOOT" class="headerlink" title="BOOT"></a>BOOT</h3><p>按次序查找各引导设备，第一个有引导程序的设备即为本次启动要用到的设备，引导程序叫做bootloader。在linux中叫做grub2。他主要是提供一个菜单，允许用户选择要启动的系统或不同的内核版本，把其装载到RAM中解压并展开，之后把系统执行权限移交给内核。</p><p>由于MBR的bootloader只允许446字节，远不够bootloader的编写。因此grub分成三段，第一段就位于bootloader中；第二段位于mbr之后的扇区中，用于让第一段的程序能够识别grub真正程序所在的文件系统；第三段位于/boot/grub目录下，提供真正能编辑的界面。配置文件在/boot/grub/grub.conf中。</p><p>这里提一个注意点，就是grub是如何识别不同设备的，也就是说grub是如何找到/boot/grub/下的grub配置文件的。这里分两种情况讨论。</p><p>第一种情况是boot单独分区，那么访问grub的配置文件时就不需要通过根文件系统来访问，即不需要/boot/grub/grub.conf来访问，而是通过grub的root命令将根设定为boot分区即可，这样访问就通过/grub/grub.conf即可。这种情形通常出现在根文件系统比较复杂或需要LVM支持，而boot只能放在基本磁盘上分区，因此将boot单独分区即可。</p><p>第二种情况是将boot放在/下，不进行单独分区，这样就需要通过根文件系统来访问，即/boot/grub/grub.conf，这样根文件系统就不能做成LVM形式，只能是基本磁盘分区。</p><h4 id="分区命名"><a href="#分区命名" class="headerlink" title="分区命名"></a>分区命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hd(@,@)</span><br><span class="line"><span class="comment">#第一个@表示磁盘编号，第二个@表示分区编号，从0开始编号</span></span><br></pre></td></tr></table></figure><h4 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h4><ul><li><p>提供菜单，并提供交互式接口</p><ul><li>e：编辑模式</li><li>c：命令模式，交互式接口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>：显示帮助信息</span><br><span class="line">root (hd@,@)：把指定磁盘分区设定为根设备</span><br><span class="line">find (hd@,@)/path：查找指定磁盘上的文件，如果有的话会自动补齐</span><br><span class="line">kernel /path：指明内核程序的位置用于本次内核启动</span><br><span class="line">initrd /path：指明内核的额外帮助文件即ramdisk，版本号要匹配</span><br><span class="line">boot：引导启动内核</span><br></pre></td></tr></table></figure></li><li><p>加载用户选择的内核或操作系统，允许传递特定参数，允许隐藏菜单</p></li><li><p>为菜单设置密码提供保护措施</p></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>grub2的配置文件在/boot/grub2/grub.cfg文件中，他依次调用/etc/grub.d目录下的配置文件来执行，还有一个配置文件在/etc/default/grub文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改启动等待时间</span></span><br><span class="line">需要修改/etc/default/grub文件中的GRUB_TIMEOUT选项</span><br><span class="line"></span><br><span class="line"><span class="comment">#为grub加密，即需要密码才能修改grub启动以及编辑参数</span></span><br><span class="line">在/etc/grub.d/00_header 文件末尾添加如下内容</span><br><span class="line"><span class="built_in">set</span> superusers=<span class="string">'admin'</span></span><br><span class="line">password admin frdqy</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置加密的密码，使用grub2-mkpasswd-pbkdf2</span></span><br><span class="line">[root@localhost default]@ grub2-mkpasswd-pbkdf2 </span><br><span class="line">Enter password: </span><br><span class="line">Reenter password: </span><br><span class="line">PBKDF2 <span class="built_in">hash</span> of your password is grub.pbkdf2.sha512.10000.9C469331A01C52D45794B9C812DEEA6D35DC876677D5552AE4AB7DA775C6FAAF495237DCB6E093F48CAFB42F259C4F0E15BE21AE1B146663B25135D605051795.08CEB5DDF92884E1239FBCF5C003BABCBD4FE11B73DF1557ECE31D028927F05AD013F5138B5E85A84A1E29EF51480837B878E5868D0E55F9C97B8D86CB9662F8</span><br><span class="line">再按照上文加入password字段即可</span><br></pre></td></tr></table></figure><h4 id="登录模式"><a href="#登录模式" class="headerlink" title="登录模式"></a>登录模式</h4><p>登录模式主要主要有rescue、emergency、shell引导</p><ul><li>rescue模式只要在commandline配置末尾加s即可，类似单用户模式，ctrl+x启动</li><li>emergency则直接将上面s替换为emergency即可，ctrl+x启动</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先，在内核一行后加“rd.break  console=tty0”，然后ctrl+x启动</span><br><span class="line">其次，挂载文件系统：mount -o remount /sysroot/</span><br><span class="line">之后，切换根目录到sysroot：chroot /sysroot/</span><br><span class="line">最后使用passwd修改root密码即可</span><br><span class="line"><span class="comment">#注意：可能有时需要在根下创建autorelabel，用于标记selinux环境</span></span><br></pre></td></tr></table></figure><h5 id="MBR引导丢失"><a href="#MBR引导丢失" class="headerlink" title="MBR引导丢失"></a>MBR引导丢失</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">即前446字节丢失</span><br><span class="line">需要挂载一个镜像来排错，用iso即可</span><br><span class="line">进入rescue后切换至源系统的根，然后找到启动分区(例如sda)，最后grub2-install /dev/sda即可</span><br></pre></td></tr></table></figure><h5 id="配置文件丢失"><a href="#配置文件丢失" class="headerlink" title="配置文件丢失"></a>配置文件丢失</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要使用rpm的--force强制覆盖安装内核，之后再安装grub2到启动分区即可</span><br></pre></td></tr></table></figure><h3 id="KERNEL"><a href="#KERNEL" class="headerlink" title="KERNEL"></a>KERNEL</h3><h4 id="Centos5"><a href="#Centos5" class="headerlink" title="Centos5"></a>Centos5</h4><h5 id="自身初始化"><a href="#自身初始化" class="headerlink" title="自身初始化"></a>自身初始化</h5><p>探测可识别到的所有硬件设备、加载硬件驱动程序(可能此时会借助于ramdisk加载驱动)、以只读方式挂载根文件系统、运行用户空间第一个应用程序/sbin/init。</p><p>注意：init它的配置文件在centos6中存放在/etc/init/目录中，他会读取/etc/init.d/*.conf配置文件；而在centos7中，配置文件在/etc/systemd/system中和/usr/lib/systemd/system目录中</p><h5 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h5><p>为了系统的运行或维护等目的而设定的机制，包括0~6七个级别，默认一般为3或5级别。定义在/etc/inittab中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#级别切换</span></span><br><span class="line">init 数字</span><br><span class="line"><span class="comment">#级别查看，第一个表示上次级别，第二个是当前级别</span></span><br><span class="line">runlevel </span><br><span class="line">N 5</span><br><span class="line"><span class="comment">#也可以查看级别</span></span><br><span class="line">who -r</span><br></pre></td></tr></table></figure><ul><li>0：关机模式，shutdown</li><li>1：单用户模式，root用户，无需认证；维护模式</li><li>2：多用户模式，会启动网络功能，但不启动NFS；维护模式</li><li>3：多用户模式，完全功能模式；文本界面，正常模式</li><li>4：预留级别，目前无特别使用目的，但习惯以同3级别功能使用</li><li>5：多用户模式，完全功能模式，图形界面，有图像接口</li><li>6：重启模式，reboot</li></ul><h5 id="初始化脚本"><a href="#初始化脚本" class="headerlink" title="初始化脚本"></a>初始化脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/rc.d/sysinit，系统初始化脚本</span></span><br><span class="line">任务：设计主机名、设置欢迎信息、激活udev和selinux、挂载/etc/fstab所有文件系统、检测根文件系统、以读写方式重新挂载根文件系统、设置系统时钟、根据/etc/sysctl.conf文件设置内核参数、激活lvm和软raid设备、激活各swap设备、加载额外设备的驱动程序、清理一些多余文件</span><br></pre></td></tr></table></figure><h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><p>Centos5中init的配置文件，即所有运行脚本存放在/etc/init.d/目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每行定义一个action与之对应的process</span></span><br><span class="line">id:runlevel:action:process</span><br><span class="line">id：一个任务的标识符</span><br><span class="line">runlevels：在哪些级别启动此任务，为空表示所有级别</span><br><span class="line">action：在什么条件下启动此任务</span><br><span class="line"><span class="built_in">wait</span>：等待切换至此任务执行级别时执行一次</span><br><span class="line">respawn：此任务终止时就会重新启动一次</span><br><span class="line">initdefault：设定默认允许级别，process此时被省略</span><br><span class="line">sysinit：设定系统初始化方式，一般为指定/etc/rc.d/rc.sysinit脚本</span><br><span class="line">process：具体任务</span><br><span class="line"></span><br><span class="line"><span class="comment">#管控每个服务脚本在各级别下的启动或关闭状态</span></span><br><span class="line">chkconfig [option] name</span><br><span class="line">--list：查看服务状态</span><br><span class="line">--add：添加一个脚本</span><br><span class="line">--del：删除一个脚本</span><br><span class="line">--level LEVELs &#123;on|off|reset&#125;：修改级别，默认为2345</span><br><span class="line"></span><br><span class="line"><span class="comment">#/etc/rc.d/rc @</span></span><br><span class="line">在这个文件中放了不同运行级别所需要的不同服务连接，他们都是连接至/etc/init.d/目录内的服务，其中命名都以K或S开头加数字加服务名</span><br><span class="line">K**：需要停止的服务，数字越小越先关闭</span><br><span class="line">S**：需要开启的服务，数字越小越先开启</span><br><span class="line">注意这里有一个独特的脚本叫做rc.local，他是最后执行的脚本，当用户想每次开机执行一条命令时即可编辑此脚本，在里面直接加命令即可，不需要单独添加服务。</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>由/sbin/init脚本执行。</p><p>流程为：设置默认运行级别、运行系统初始化脚本(/etc/rc.d/sysinit)、关闭对应级别下需要停止的服务、启动对应级别下需要开启的服务(/etc/rc.d/rc @)、设置登录终端。</p><h4 id="Centos6"><a href="#Centos6" class="headerlink" title="Centos6"></a>Centos6</h4><p>本质和Centos5仍然时一样的，只不过由于启动进程被换成了upstart(依然是/sbin/init)，其描述文件发生了变化。即配置文件都是/etc/init/*.conf结尾的配置文件，而/etc/inittab仅用于定义默认运行级别。其语法为upstart语法，但由于centos7以后就不用该语法，且centos7已经缓存systemd来启动了，因此此处不做过多介绍。</p><h4 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h4><p>init程序：systemd</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><p>系统引导时实现服务并行启动；按需激活进程；系统状态快照；基于依赖关系定义服务控制逻辑</p><p>基于socket的激活机制：socket与程序分离</p><p>基于bus的激活机制：总线有对某个接口的请求时，激活该接口</p><p>基于device的激活机制：自动激活、挂载设备</p><p>基于path的激活机制：监控某一路径，可以对特定行为进行响应</p><p>系统快照：保存unit当前状态信息于持久存储设备中</p><p>向后兼容sysv init脚本：/etc/init.d/的脚本仍可以执行</p><h5 id="新概念"><a href="#新概念" class="headerlink" title="新概念"></a>新概念</h5><p>unit：所有的系统资源都称作unit。它统一了资源配置格式，而使用文件后缀名来区别不同类型的文件及服务。</p><p>配置文件：/usr/lib/systemd/system/*、/etc/systemd/system</p><h5 id="unit常见类型"><a href="#unit常见类型" class="headerlink" title="unit常见类型"></a>unit常见类型</h5><p>service unit：文件扩展名为.service，用于定义系统服务</p><p>target unit：文件扩展名为.target，用于模拟实现运行级别，由于Centos7上没有运行级别概念，但是为了兼容6，就定义了target来模拟不同的级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取当前用户级别</span></span><br><span class="line">[root@localhost init.d]<span class="comment"># systemctl get-default </span></span><br><span class="line">graphical.target</span><br></pre></td></tr></table></figure><p>device unit：文件扩展名为.device，用于定义内核识别的设备</p><p>mount unit：文件扩展名为.mount，用于定义文件系统挂载点</p><p>socket unit：文件扩展名为.socket，用于进程间通信</p><p>snapshot unit：文件扩展名为.snapshot，管理系统快照</p><p>swap unit：文件扩展名为.swap，用于标识swap设备</p><p>automount unit：文件扩展名为.automount，文件系统自动挂载设备</p><p>path unit：文件扩展名为.path用于定义文件系统中的文件和目录</p><h5 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h5><h6 id="管理系统服务"><a href="#管理系统服务" class="headerlink" title="管理系统服务"></a>管理系统服务</h6><p>主要靠service类型的unit文件来实现控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">systemctl [option] COMMAND [NAME...]</span><br><span class="line">start：启动服务</span><br><span class="line">stop：停止服务</span><br><span class="line">restart：重启服务</span><br><span class="line">status：显示状态</span><br><span class="line">try-restart：条件式重启</span><br><span class="line">reload-or-restart：重载或重启服务</span><br><span class="line">reload-or-try-restart：重载或条件重启服务</span><br><span class="line">daemon-reload：重读unit文件</span><br><span class="line">is-adtive：查看是否激活</span><br><span class="line">list-units：列出所有已激活的服务</span><br><span class="line">--<span class="built_in">type</span>/-t：指明类型</span><br><span class="line">--all：显示所有选项</span><br><span class="line"><span class="built_in">enable</span>：设置服务开机自启</span><br><span class="line"><span class="built_in">disable</span>：设置服务禁止开机自启</span><br><span class="line">is-enable：查询服务是否能开机自启</span><br><span class="line">mask：禁止某服务设置为开机自启</span><br><span class="line">unmask：取消禁止某服务开机自启</span><br><span class="line">list-dependencies：查看服务的依赖关系</span><br></pre></td></tr></table></figure><h6 id="管理target"><a href="#管理target" class="headerlink" title="管理target"></a>管理target</h6><table><thead><tr><th>级别</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>runlevel0.target；poweroff.target</td></tr><tr><td>1</td><td>runlevel1.tartget；rescue.target</td></tr><tr><td>2</td><td>runlevel2.tartget；multi-user.target</td></tr><tr><td>3</td><td>runlevel3.tartget；multi-user.target</td></tr><tr><td>4</td><td>runlevel4.tartget；multi-user.target</td></tr><tr><td>5</td><td>runlevel5.tartget；graphical.target</td></tr><tr><td>6</td><td>runlevel6.tartget；reboot.target</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#级别切换</span></span><br><span class="line">systemctl isolate NAME.target</span><br><span class="line"><span class="comment">#查看级别</span></span><br><span class="line">systemctl list-units -t target</span><br><span class="line"><span class="comment">#获取默认运行级别</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="comment">#修改默认运行级别</span></span><br><span class="line"><span class="comment">#修改运行级别实质是修改/etc/systemd/system/default.target的符号链接实现的</span></span><br><span class="line"><span class="comment">#且定义在不同级别运行的服务也会在/etc/systemd/system/下对应的目录中创建符号链接，他们实际是/usr/lib/systemd/system/下对应unit的符号链接</span></span><br><span class="line">systemctl <span class="built_in">set</span>-default NAME.target</span><br><span class="line"><span class="comment">#切换紧急救援模式</span></span><br><span class="line">systemctl rescue</span><br><span class="line"><span class="comment">#切换至紧急模式，不会装载额外系统驱动或者多余设置</span></span><br><span class="line"><span class="comment">#拿Centos6来说，rescue模式还会执行sysinit初始化脚本，而emergency不会执行</span></span><br><span class="line">systemctl emergency</span><br></pre></td></tr></table></figure><h6 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关机</span></span><br><span class="line">systemctl halt；systemctl poweroff</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">systemctl reboot</span><br><span class="line"><span class="comment">#挂起(睡眠)</span></span><br><span class="line">systemctl <span class="built_in">suspend</span></span><br><span class="line"><span class="comment">#快照</span></span><br><span class="line">systemctl hibernate</span><br><span class="line"><span class="comment">#快照并挂起(睡眠)</span></span><br><span class="line">systemctl hybird-sleep</span><br></pre></td></tr></table></figure><h4 id="unit文件格式"><a href="#unit文件格式" class="headerlink" title="unit文件格式"></a>unit文件格式</h4><p>由三部分组成[unit]、[service]、[install]</p><p>[unit]：定义与unit类型无关的信息。如描述信息和依赖关系</p><p>[service]：定义与特定类型相关的专用选项，各种类型均不一样</p><p>[install]：定义由enable和disable实现服务启动关闭时用到的选项</p><h5 id="unit段常用选项"><a href="#unit段常用选项" class="headerlink" title="unit段常用选项"></a>unit段常用选项</h5><p>description：描述信息</p><p>after：定义启动次序，表示当前unit晚于哪些unit</p><p>requires：指明依赖到的其他unit，即依赖关系，要求比wants强，即必须全部启动</p><p>wants：指明依赖到的其他unit，即依赖关系，但即使不启动，本服务自身也能启动</p><p>conflicts：定义units之间的依赖关系</p><h5 id="service段常用选项"><a href="#service段常用选项" class="headerlink" title="service段常用选项"></a>service段常用选项</h5><p>type：定义影响execstart及相关参数的功能的unit进程启动类型</p><p>类型有：simple：默认类型，表示为主进程</p><p>​                forking：表示进程会生成一个主进程，自身会退出</p><p>​                oneshot：一次性进程</p><p>​                dbus：后续进程在主进程得到dbus后才能启动</p><p>​                notify：后续进程在主进程发送notify后才能启动</p><p>​                idle：类似于simple</p><p>execstart：指明启动unit要运行的命令或脚本</p><p>execstop：停止unit要运行的命令或脚本</p><p>restart：进程意外退出后重启的命令或脚本</p><p>environmentfile：环境配置文件，在execstart前读取，为其提供变量</p><h5 id="install段常用选项"><a href="#install段常用选项" class="headerlink" title="install段常用选项"></a>install段常用选项</h5><p>alias：当前程序别名</p><p>requiredby：被哪些unit所依赖，强依赖</p><p>wantedby：被那些unit所依赖，弱依赖</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>当修改或新建unit文件时，要通知systemd重载此配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启动流程 </tag>
            
            <tag> systemd </tag>
            
            <tag> init </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统安装自动化</title>
      <link href="/2020/01/06/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2020/01/06/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>电脑启动时，首先bootloader加载kernel，然后为了防止kernel不能识别硬盘，kernel首先使用ramdisk在内存中模拟一个根文件系统，这就不需要读取真正的磁盘，而且这个模拟文件系统有操作系统安装时需要的各种程序。之后，启动anaconda程序来完成系统安装，这个程序处在待安装系统的某个程序包下即可装载运行。</p><a id="more"></a><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>首先加载安装镜像中的boot.cat文件</p><p>其次执行isolinux/isolinux.bin，他的配置文件为同目录下的/isolinux.cfg</p><p>等待用户选择对应安装的内核，每个菜单项加载不同的内核，也在/isolinux/vmlinuz下，并且通过append向内核传递参数。</p><p>最后装载img根文件系统(即)，并启动anaconda。注意，后续的anaconda及其安装用到的程序包可以来自光盘及镜像自带的仓库，也可以手动指定仓库(http,ftp等)，手动指定时需要在boot命令(引导界面按ESC)下输入linux method即可。</p><h3 id="安装引导选项"><a href="#安装引导选项" class="headerlink" title="安装引导选项"></a>安装引导选项</h3><p>引导选项可以将必要的直接添加在/isolinux/isolinux.cfg的对应条目下，就不需要手动输入了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">boot：</span><br><span class="line">text：文本安装方式</span><br><span class="line">method：手动指定安装方式</span><br><span class="line">与网络相关的引导选项：</span><br><span class="line">ip&#x3D;IPADDR</span><br><span class="line">netmask&#x3D;MASK</span><br><span class="line">gateway&#x3D;GW</span><br><span class="line">dns&#x3D;DNS_SERVER</span><br><span class="line">远程访问功能：</span><br><span class="line">vnc</span><br><span class="line">vncpassword&#x3D;&#39;password&#39;</span><br><span class="line">启动紧急救援：</span><br><span class="line">rescue</span><br><span class="line">装载额外驱动程序：</span><br><span class="line">dd</span><br><span class="line">指明kickstart的位置</span><br><span class="line">ks&#x3D;cdrom:&#x2F;path</span><br><span class="line">ks&#x3D;http:&#x2F;&#x2F;host:port&#x2F;path</span><br><span class="line">ks&#x3D;ftp:&#x2F;&#x2F;host:post&#x2F;path</span><br><span class="line">ks&#x3D;https:&#x2F;&#x2F;host:port&#x2F;path</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>anaconda除了基本的交互式配置外，还支持通过读取配置文件中事先定义好的配置项自动完成配置；配置文件遵循特定的语法格式，此文件即为kickstart文件，该文件如果是系统第一次安装且需要自定义的话一般放在服务器上，因为放在光盘内的话不能编辑，然后安装时从服务器读取即可。</p><p>安装好的系统后配置文件在家目录下，为anaconda-ks.cfg。</p><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><h5 id="命令段"><a href="#命令段" class="headerlink" title="命令段"></a>命令段</h5><p>指定各种安装前配置选项，如键盘类型。由必备命令，可选命令组成。</p><h6 id="必备命令"><a href="#必备命令" class="headerlink" title="必备命令"></a>必备命令</h6><p>authconfig：认证方式配置</p><p>bootloader：定义bootload安装位置</p><p>keyboard：设置键盘类型</p><p>lang：语言类型</p><p>part：分区布局</p><p>rootpw：管理员密码；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密码方式使用openssl</span></span><br><span class="line">openssl passwd -1 -salt `openssl rand -hex 4`</span><br></pre></td></tr></table></figure><p>clearpart：清空磁盘分区</p><p>volgroup：创建卷组</p><p>logvol：创建逻辑卷</p><p>timezone：设置时区</p><h6 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h6><p>install or upgrade：安装或升级</p><p>text：安装界面类型，text为tui，默认为gui</p><p>network：配置网络接口</p><p>repo：指明仓库</p><p>url：指明仓库，优先级高于repo</p><p>firewall：防火墙</p><p>selinux：SELinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">编辑/etc/sysconfig/selinux文件，修改SELINUX值，不等于enforcing即可</span><br><span class="line">另外可以通过getenforce查看，如果是1或者是enforcing则使用setenforce 0设置即可</span><br></pre></td></tr></table></figure><h5 id="程序包段"><a href="#程序包段" class="headerlink" title="程序包段"></a>程序包段</h5><p>指明要安装的程序包以及包组，也包括不安装的程序包。以%packages开头，%end结尾</p><p>@group_name表示包组</p><p>package表示单个程序包</p><p>-package表示不安装程序包，但是为了解决依赖可能自动安装</p><h5 id="脚本段"><a href="#脚本段" class="headerlink" title="脚本段"></a>脚本段</h5><p>%pre：安装前shell脚本</p><p>%post：安装后shell脚本</p><h4 id="生成工具"><a href="#生成工具" class="headerlink" title="生成工具"></a>生成工具</h4><p>system-config-kickstart图形界面来配置kickstart配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install system-config-kickstart</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">system-config-kickstart</span><br><span class="line"><span class="comment">#检查语法错误</span></span><br><span class="line">ksvalidator</span><br><span class="line"><span class="comment">#将isolinux目录复制到一个新的目录下，为myboot，然后把kickstart配置文件放在与目录同级位置</span></span><br><span class="line"><span class="comment">#创建光盘镜像</span></span><br><span class="line">mkisofs -R -J -T -v --no-emul-boot --boot-load-size 4 --boot-info-table -V <span class="string">"Centos"</span> -c isolinux/boot.cat -b isolinux/isolinux.bin -o /root/boot.iso myboot/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> anaconda </tag>
            
            <tag> kickstart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理</title>
      <link href="/2020/01/05/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2020/01/05/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>显示进程树信息</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示的一部分</span></span><br><span class="line">[root@localhost 1]<span class="comment"># pstree</span></span><br><span class="line">systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]</span><br><span class="line">        ├─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─VGAuthService</span><br><span class="line">        ├─2*[abrt-dump-journ]</span><br><span class="line">        ├─abrtd───2*[&#123;abrtd&#125;]</span><br><span class="line">        ├─accounts-daemon───2*[&#123;accounts-daemon&#125;]</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示当前进程运行的状态快照。内核通过/proc/将内核信息输出给用户。其中具体/proc/PID文件中的文件都是内核输出的参数，文件内容即是当前的内核对应数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ps选项有三种风格，注意区分</span></span><br><span class="line">ps [option]</span><br><span class="line">a：所有与终端相关的进程</span><br><span class="line">x：所有与终端无关的进程</span><br><span class="line">u：以用户为中心组织进程状态信息显示</span><br><span class="line">-e：显示所有进程</span><br><span class="line">-f：完整格式</span><br><span class="line">-H：以层级结构显示进程相关信息</span><br><span class="line">-o/o field1,field2...：自定义显示字段，后面加字段名即可</span><br><span class="line"><span class="comment">#常用field</span></span><br><span class="line">pid、ni、pri、psr、pcpu、<span class="built_in">stat</span>、comm、tty、ppid、rtprio</span><br><span class="line">ni：nice值，范围-20~19，越小优先级越高</span><br><span class="line">priority：优先级</span><br><span class="line">rtprio：实时优先级</span><br><span class="line"><span class="comment">#常用组合：ps aux</span></span><br><span class="line">[root@localhost 1]<span class="comment"># ps aux</span></span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAN</span><br><span class="line">VSZ：虚拟内存集</span><br><span class="line">RSS：常驻内存集</span><br><span class="line">STAT：</span><br><span class="line">R：运行态</span><br><span class="line">S：可终端睡眠</span><br><span class="line">D：不可中断睡眠</span><br><span class="line">T：停止态</span><br><span class="line">Z：僵死态，自己没资源了，等待父进程回收</span><br><span class="line">+：前台进程</span><br><span class="line">l：多线程进程</span><br><span class="line">N：低优先级进程</span><br><span class="line">&lt;：高优先进程</span><br><span class="line">s：会话引领者</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用组合：ps -ef/F</span></span><br><span class="line">[root@localhost 1]<span class="comment"># ps -eF</span></span><br><span class="line">UID         PID   PPID  C    SZ   RSS PSR STIME TTY          TIME CMD</span><br><span class="line">PPID：父进程id</span><br><span class="line">C：cpu占用百分比</span><br><span class="line">PSR：占用哪个cpu</span><br><span class="line">STIME：进程开始时间</span><br></pre></td></tr></table></figure><h3 id="pgrep-pkill"><a href="#pgrep-pkill" class="headerlink" title="pgrep/pkill"></a>pgrep/pkill</h3><p>根据进程的名字或其他属性来查询进程或向进程发送信号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pgrep/pkill [option] pattern</span><br><span class="line">-u/U uid：显示指定用户进程</span><br><span class="line">-t tty：与指定终端相关的进程</span><br><span class="line">-l：显示进程名</span><br><span class="line">-a：显示完整格式进程名</span><br><span class="line">-P pid：显示此进程的子进程</span><br></pre></td></tr></table></figure><h3 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h3><p>根据进程名取指定进程的进程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 1]# pidof systemd</span><br><span class="line">8331 8324 1292 1274 1</span><br></pre></td></tr></table></figure><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>动态显示进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 1]<span class="comment"># top</span></span><br><span class="line">top - 04:41:07 up  8:28,  1 user,  load average: 0.09, 0.05, 0.01</span><br><span class="line">Tasks: 261 total,   1 running, 260 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">MiB Mem :    798.1 total,     85.0 free,    467.6 used,    245.5 buff/cache</span><br><span class="line">MiB Swap:   2048.0 total,   1759.0 free,    289.0 used.    172.5 avail Mem</span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"></span><br><span class="line">-d @：指定显示时间间隔</span><br><span class="line">-b：以批次方式显示</span><br><span class="line">-n @：显示多少批次</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一行；也可以用uptime显示</span></span><br><span class="line">当前时间；运行时间；登录当前系统的用户数；平均负载(过去1分钟、5分钟、15分钟的平均队列长度，即等待cpu进程数)</span><br><span class="line"><span class="comment">#第一行</span></span><br><span class="line">一共运行进程数；运行数、睡眠数、停止数、僵死数</span><br><span class="line"><span class="comment">#第三行</span></span><br><span class="line">cpu占用百分比</span><br><span class="line">us：用户空间百分比</span><br><span class="line">sy：内核空间百分比</span><br><span class="line">ni：用于nice值调整占用的cpu百分比</span><br><span class="line">id：空闲百分比</span><br><span class="line">wa：等待io完成所消耗cpu时间百分比</span><br><span class="line">hi：处理硬件中断占用cpu百分比</span><br><span class="line">si：处理软件中断占用cpu百分比</span><br><span class="line">st：被虚拟化程序占用的cpu百分比</span><br><span class="line"><span class="comment">#第四行</span></span><br><span class="line">物理空间占用情况：总空间；空闲空间；已使用空间；用于缓存和缓冲的内存空间</span><br><span class="line"><span class="comment">#第五行</span></span><br><span class="line">交换分区占用情况：总空间；空闲空间；已使用空间；用于缓存和缓冲的内存空间</span><br><span class="line"><span class="comment">#第六行</span></span><br><span class="line">SHR：共享内存空间；其他与ps显示意义一样</span><br><span class="line"></span><br><span class="line"><span class="comment">#内部命令</span></span><br><span class="line">P：以占据CPU百分比显示</span><br><span class="line">M：以占据内存百分比显示</span><br><span class="line">T：以累计占用CPU时间排序</span><br><span class="line">l：显示/隐藏第一行信息</span><br><span class="line">t：显示/隐藏第二行信息</span><br><span class="line">m：显示隐藏第三行信息</span><br><span class="line">s：修改显示时间间隔</span><br><span class="line">k：终止指定进程</span><br><span class="line">1：显示全部cpu</span><br></pre></td></tr></table></figure><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>改进版的top</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line"><span class="comment">#安装epel库</span></span><br><span class="line">dnf install epel-release -y</span><br><span class="line">dnf install htop </span><br><span class="line"></span><br><span class="line">htop [option]</span><br><span class="line">-d @：指定延迟时间</span><br><span class="line">-s colume：以指定字段进行排序</span><br><span class="line">-u UserName：仅显示指定user的进程</span><br><span class="line">u：选择指定用户进程</span><br><span class="line">H：显示/隐藏用户线程</span><br><span class="line">K：显示隐藏内核线程</span><br><span class="line">l：跟踪一个进程的操作</span><br><span class="line">s：跟踪一个进程的系统调用</span><br><span class="line">t：以层级关系显示各进程状态</span><br><span class="line">a：选定进程运行在指定cpu上</span><br></pre></td></tr></table></figure><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>管理虚拟内存信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vmstat [option] [delay [count]]</span><br><span class="line">delay：多久刷新一次</span><br><span class="line">count：刷新多少次</span><br><span class="line">-s：显示内存统计数据</span><br><span class="line">[root@localhost ~]# vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> </span><br><span class="line">procs：</span><br><span class="line"> r：等待运行进程的个数</span><br><span class="line"> b：处于不可中断睡眠的进程个数</span><br><span class="line">memory：</span><br><span class="line">swpd：交换内存使用情况，若使用则说明内存不足</span><br><span class="line">free：空闲的物理内存总量</span><br><span class="line">buffer：用于buffer的内存总量</span><br><span class="line">cache：用于cache内存总量</span><br><span class="line">swap：</span><br><span class="line">si：数据进入swap的速率(kb&#x2F;s)</span><br><span class="line">so：数据离开swap的速率(kb&#x2F;s)</span><br><span class="line">io：</span><br><span class="line">bi：从块设备读入数据到系统的速度(kb&#x2F;s)</span><br><span class="line">bo：保存数据到块设备的速度(kb&#x2F;s)</span><br><span class="line">system：</span><br><span class="line">in：中断速率</span><br><span class="line">cs：进程上下文切换速率</span><br><span class="line">cpu：</span><br><span class="line">us：用户空间占用百分比</span><br><span class="line">sy：系统占用百分比</span><br><span class="line">id：空闲时间占用百分比</span><br><span class="line">wa：等待时间百分比</span><br><span class="line">st：被虚拟化偷走的时间</span><br></pre></td></tr></table></figure><h3 id="pmap"><a href="#pmap" class="headerlink" title="pmap"></a>pmap</h3><p>显示进程内存映射，实际是通过查看/proc下对应进程的maps文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pmap [option] pid</span><br><span class="line">-x：显示详细格式信息</span><br></pre></td></tr></table></figure><h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p>生成系统资源统计数据，几乎包括上述所有功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dstat [option] [delay[count]]</span><br><span class="line">delay：多久刷新一次</span><br><span class="line">count：刷新多少次</span><br><span class="line">-c：查看cpu信息</span><br><span class="line">-d：查看disk信息</span><br><span class="line">-m：查看内存信息</span><br><span class="line">-g：查看内存页交换信息</span><br><span class="line">-n：显示网络信息</span><br><span class="line">-r：显示io统计数据</span><br><span class="line">-p：统计进程相关数据</span><br><span class="line">-s：统计swap数据</span><br><span class="line">--tcp：显示tcp相关信息</span><br><span class="line">--udp：显示udp相关信息</span><br><span class="line">--raw：显示裸套接字信息</span><br><span class="line">--socket：显示所有套接字信息</span><br><span class="line">--ipc：显示进程间交换信息</span><br><span class="line">--top-cpu：显示最占用cpu的信息</span><br><span class="line">--top-io：显示最占用io的信息</span><br><span class="line">--top-mem：显示最占用内存的信息</span><br><span class="line">--top-lantency：显示延迟最大的进程信息</span><br></pre></td></tr></table></figure><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>终止一个进程，本质是向进程发送一个命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kill [option] pid</span><br><span class="line">-l：列出可用信号</span><br><span class="line">-s @：发送指定信号</span><br><span class="line">% @：终止指定id的作业(jobs)</span><br><span class="line">常用信号</span><br><span class="line">SIGHUP：不重启读配置文件</span><br><span class="line">SIGINT：终止正在运行的进程，相当于Ctrl+c</span><br><span class="line">SIGTERM：默认信号，终止正在运行的进程(关闭进程相关后再杀死)</span><br><span class="line">SIGKILL：杀死正在执行的进程(不管进程在干什么直接杀死，可能会损坏文件)</span><br><span class="line">SIGCONT：后天进程继续执行</span><br><span class="line">SIGSTOP：将进程送到后台</span><br></pre></td></tr></table></figure><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><p>根据进程名杀死进程，用于关闭一整个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall [SIGNAL] PRRC_NAME</span><br></pre></td></tr></table></figure><h3 id="fg-bg-jobs-nohup"><a href="#fg-bg-jobs-nohup" class="headerlink" title="fg/bg/jobs/nohup"></a>fg/bg/jobs/nohup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把指定作业调往前台</span></span><br><span class="line"><span class="built_in">fg</span> jobs_num</span><br><span class="line"><span class="comment">#把作业送往后台</span></span><br><span class="line"><span class="built_in">bg</span> jobs_num</span><br><span class="line"><span class="comment">#查询作业</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment">#将指定作业剥离与中断关系在后台运行</span></span><br><span class="line">nohup COMMAND/FIEL &amp;</span><br></pre></td></tr></table></figure><h3 id="进程优先级调整"><a href="#进程优先级调整" class="headerlink" title="进程优先级调整"></a>进程优先级调整</h3><p>可通过nice值调整的优先级范围：100-139，分别对应于-20~19。nice值越低优先级越高</p><p>进程启动时，其nice值默认为0，其优先级是120。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仅root可以调低nice值</span></span><br><span class="line">nice [option] [COMMAND]</span><br><span class="line">-n NICE：以指定nice值启动</span><br><span class="line"></span><br><span class="line"><span class="comment">#调整nice</span></span><br><span class="line">renice [option] pid</span><br><span class="line">-n NICE：调整nice值</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nice和优先级</span></span><br><span class="line">ps axo pid,ni,priority,comm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络属性配置</title>
      <link href="/2020/01/04/Linux%E7%BD%91%E7%BB%9C%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/04/Linux%E7%BD%91%E7%BB%9C%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ifcfg系列"><a href="#ifcfg系列" class="headerlink" title="ifcfg系列"></a>ifcfg系列</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>接口及地址查看和管理</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [interface]</span><br><span class="line">-a：显示所有接口，包括非激活状态</span><br><span class="line"></span><br><span class="line">ifconfig INTERFACE [aftype] option | address...</span><br><span class="line"><span class="comment">#启用网卡,其中大写的需要替换成具体接口名以及ip地址、子网掩码等信息</span></span><br><span class="line">ifconfig INTERFACE_NAME IP/MASK [up]</span><br><span class="line">ifconfig INTERFACE_NAME netmask NETMASK</span><br></pre></td></tr></table></figure><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><p>路由查看和管理</p><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route [option]</span><br><span class="line">-n：直接显示数字信息，不进行主机名解析，效率比较高</span><br></pre></td></tr></table></figure><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">route add [-net|-host] target [netmask Nm] [gw GW] [dev]</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line"><span class="comment">#添加条目，经由192.168.10.1访问10.10.10.0网络</span></span><br><span class="line">route add -net 10.10.10.0/8 gw 192.168.10.1</span><br><span class="line"><span class="comment">#添加默认网关</span></span><br><span class="line">route add -net 0.0.0.0/0.0.0.0 gw 192.168.10.1</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">route del [-net|-host] target [gw GW] [dev]</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line"><span class="comment">#删除上面创建的条目</span></span><br><span class="line">route del -net 10.10.10.0/8 gw 192.168.10.1</span><br><span class="line"><span class="comment">#删除默认网关</span></span><br><span class="line">route del default</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>网络连接、路由表、接口信息等网络信息查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示路由表</span></span><br><span class="line">netstat -rn</span><br><span class="line">-r：路由表</span><br><span class="line">-n：数字格式</span><br><span class="line"><span class="comment">#显示网络连接</span></span><br><span class="line">netstat [option]</span><br><span class="line">-t：tcp相关连接</span><br><span class="line">-u：UDP相关连接</span><br><span class="line">-w：raw socket相关连接</span><br><span class="line">-l：处于监听状态的连接</span><br><span class="line">-a：所有状态</span><br><span class="line">-n：以数字格式显示</span><br><span class="line">-e：扩展格式</span><br><span class="line">-p：显示相关进程pid</span><br><span class="line">-i：显示接口信息</span><br><span class="line"><span class="comment">#常用组合</span></span><br><span class="line">-tan、-uan、-tnl、-unl、-tnlp</span><br></pre></td></tr></table></figure><h4 id="ifup-ifdown"><a href="#ifup-ifdown" class="headerlink" title="ifup/ifdown"></a>ifup/ifdown</h4><p>通过读取/etc/sysconfig/network-scripts/下网卡的配置文件进行网卡的开启和禁用</p><h3 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h3><p>配置主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl</span><br><span class="line">status：显示当前主机名设定</span><br><span class="line"><span class="built_in">set</span>-hostname NAME：设定主机名，永久有效</span><br><span class="line"><span class="comment">#centos6中需要修改/etc/sysconfig/network来修改主机名才能永久有效</span></span><br></pre></td></tr></table></figure><h3 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在配置文件/etc/resolov.conf中修改即可，最多可以同时添加3个</span></span><br><span class="line"><span class="comment">#nameserver为关键字，后面ip地址只能以数字形式，不能使用域名</span></span><br><span class="line">nameserver 192.168.163.2</span><br><span class="line"><span class="comment">#注意/etc/hosts优先于dns配置文件，如果本地有host，那么host内的设置优先</span></span><br></pre></td></tr></table></figure><h3 id="iproute2系列"><a href="#iproute2系列" class="headerlink" title="iproute2系列"></a>iproute2系列</h3><h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><p>查看和管理路由、设备、策略路由以及隧道等信息，主要用来逐渐取代ifcfg系列。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">ip [option] OBJECT &#123;COMMAND|<span class="built_in">help</span>&#125;</span><br><span class="line">link：网络设备配置</span><br><span class="line">show/list：显示设备的属性</span><br><span class="line"><span class="built_in">set</span>：设置设备的属性</span><br><span class="line">dev NAME：指明要管理的设备</span><br><span class="line">up/down：启用和关闭设备</span><br><span class="line">multicast on/off：启用关闭多播</span><br><span class="line">name NAME：重命名网络接口</span><br><span class="line">mtu NUMBER：设置MTU大小，默认1500</span><br><span class="line">netns NAME：ns为命名空间，用于将指定接口移到某个netns中，常用于构建虚拟网络</span><br><span class="line"><span class="built_in">help</span>：显示简要帮助</span><br><span class="line">netns：管理网络命名空间</span><br><span class="line">add NAME：增加一个网络命名空间</span><br><span class="line">del NAME：删除一个网络命名空间</span><br><span class="line">list：列出所有的netns</span><br><span class="line"><span class="built_in">exec</span> NAME COMMAND：在netns中执行COMMAND命令</span><br><span class="line">addr：管理网络接口的ip地址</span><br><span class="line">add IP dev INTERFACE：指定接口增加IP地址</span><br><span class="line">label NAME：为指定接口添加接口别名。用于解决ifconig命令不显示多个地址的问题</span><br><span class="line">broadcast ADDRESS：广播地址，一般自动获得</span><br><span class="line">scope SCOPE_VALUE：指定接口作用范围</span><br><span class="line">global：全局可用</span><br><span class="line">link：接口可用</span><br><span class="line">host：仅本机可用</span><br><span class="line">delete IP dev INTERFACE：删除指定设备的地址</span><br><span class="line">show：显示地址信息</span><br><span class="line">flush dev INTERFACE：清空指定接口地址</span><br><span class="line">route：路由管理</span><br><span class="line">add 目标网络/掩码长度 via GW dev 设备 [src]：添加路由</span><br><span class="line">change：同上</span><br><span class="line">repalce：同上</span><br><span class="line">delete 网络：删除到指定网络的路由</span><br><span class="line">show：显示路由信息</span><br><span class="line">get 目标网络：获取某单个路由信息</span><br><span class="line">flush：清空路由信息</span><br></pre></td></tr></table></figure><h4 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h4><p>用来取代netstat的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ss [option] [filter]</span><br><span class="line">-t：tcp相关连接</span><br><span class="line">-u：UDP相关连接</span><br><span class="line">-w：raw socket相关连接</span><br><span class="line">-l：处于监听状态的连接</span><br><span class="line">-a：所有状态</span><br><span class="line">-n：以数字格式显示</span><br><span class="line">-e：扩展格式</span><br><span class="line">-p：显示相关进程pid</span><br><span class="line">-i：显示接口信息</span><br><span class="line">-m：显示内存用量</span><br><span class="line">-o：显示计时器信息</span><br><span class="line">[fileter]</span><br><span class="line">state [TCP-STATE] [EXPRESSION]</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line"><span class="comment">#过滤出目标端口和源端口均为22的信息</span></span><br><span class="line">ss -tan <span class="string">'( dport = :22 or sport = :22 )'</span></span><br><span class="line"><span class="comment">#过滤出TCP状态为ESTABLISHED的连接</span></span><br><span class="line">ss -tan state ESTABLISHED</span><br><span class="line"><span class="comment">#常见TCP状态：LISTEN,ESTABLISHED,FIN_WAIT_1,FIN_WAIT_@,SYN_SENT,SYN_RECV,CLOSED</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h5 id="ip-1"><a href="#ip-1" class="headerlink" title="ip"></a>ip</h5><p>上述命令修改的信息都是临时有效，若想重启后仍然有效需要修改配置文件。配置文件一般放在/etc/sysconfig/network-scripts/目录下。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>DEVICE</td><td>此配置文件的设备名</td></tr><tr><td>ONBOOT</td><td>开机时是否激活</td></tr><tr><td>UUID</td><td>设备唯一标识</td></tr><tr><td>IPV6INIT</td><td>是否初始化IPV6</td></tr><tr><td>BOOTPROTO</td><td>激活此接口时使用什么协议配置接口属性，常用dhcp、static</td></tr><tr><td>TYPE</td><td>接口类型</td></tr><tr><td>DNS1</td><td>定义第一DNS服务器指向</td></tr><tr><td>DNS2</td><td>定义备用DNS服务器指向</td></tr><tr><td>DOMAIN</td><td>DNS搜索域</td></tr><tr><td>GATEWAY</td><td>网关</td></tr><tr><td>IPADDR</td><td>ip地址，静态是要填写</td></tr><tr><td>NETMASIK/PREFIX</td><td>以长度方式指明子网掩码</td></tr><tr><td>USERCTL</td><td>是否允许普通用户控制此设备</td></tr><tr><td>PEERDNS</td><td>是否允许dhcp的dns指向覆盖本地的dns</td></tr><tr><td>NM_CONTROLLED</td><td>是否使用nm工具</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos6</span></span><br><span class="line">service SERVICE_NAME &#123;start|stop|statues|restart&#125;</span><br><span class="line"><span class="comment">#centos7/8</span></span><br><span class="line">systemctl &#123;start|stop|statues|restart&#125; SERVICE_NAME</span><br><span class="line">nmcli SERVICE_NAME &#123;start|stop|statues|restart&#125;</span><br></pre></td></tr></table></figure><h5 id="route-1"><a href="#route-1" class="headerlink" title="route"></a>route</h5><p>配置文件放在/etc/sysconfig/network-scripts/route-INTERFACE，有两种配置方式，不可混用。</p><ul><li>每行一个路由条目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET via GW</span><br></pre></td></tr></table></figure><ul><li>每三行一个路由条目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ADDRESS#&#x3D;TARGET</span><br><span class="line">NETMASK#&#x3D;MASK</span><br><span class="line">GATEWAY#&#x3D;NEXTHOP</span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>通过icmp协议报文进行网络探测。可用于DDOS攻击(需要大量主机)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping [option] destination</span><br><span class="line">-c：指明ping包个数</span><br><span class="line">-w @：ping命令超时时长</span><br><span class="line">-W @：一次ping中等待对方响应</span><br></pre></td></tr></table></figure><h4 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h4><p>进阶版ping，可设置选项更多，DDOS更快了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装时需要epel源</span></span><br><span class="line">hping3 [option] ip</span><br><span class="line">--fast：每秒发10次</span><br><span class="line">--faster：更快</span><br><span class="line">--flood：更快，且不会显示ping过程</span><br></pre></td></tr></table></figure><h4 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h4><p>用于追踪主机间路由信息，即跟踪当前主机到目标主机之间经过的路由信息。</p><h4 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h4><p>文件传输协议相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">匿名登录：anonymous</span><br><span class="line">help：命令帮助</span><br><span class="line">get：下载一个文件</span><br><span class="line">mget：下载多个文件</span><br><span class="line">put：上传一个文件</span><br><span class="line">mput：上传多个文件</span><br><span class="line">delete：删除一个文件</span><br><span class="line">mdelete：删除多个文件</span><br><span class="line">bye：结束ftp连接</span><br><span class="line">#注意：在ftp模式下执行命令前加！则表示在本地主机上执行</span><br></pre></td></tr></table></figure><h4 id="lftp"><a href="#lftp" class="headerlink" title="lftp"></a>lftp</h4><p>取代ftp的命令工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lftp [option] ip</span><br><span class="line">-u usre,passwd：以指定用户名和密码登录,若要匿名访问则不输入该选项即可</span><br><span class="line">help：命令帮助</span><br><span class="line">get：下载一个文件</span><br><span class="line">mget：下载多个文件</span><br><span class="line">put：上传一个文件</span><br><span class="line">mput：上传多个文件</span><br><span class="line">rm：删除一个文件</span><br><span class="line">mrm：删除多个文件</span><br><span class="line">bye：结束ftp连接</span><br></pre></td></tr></table></figure><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><p>下载网络资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不能下载目录，只能下载文件</span></span><br><span class="line">wget [option] url</span><br><span class="line">-b：在后台下载(脚本中可能使用)</span><br><span class="line">-q：静默模式</span><br><span class="line">-O file：指明下载位置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IF常见检测选项补充</title>
      <link href="/2020/01/03/IF%E5%B8%B8%E8%A7%81%E6%A3%80%E6%B5%8B%E9%80%89%E9%A1%B9%E8%A1%A5%E5%85%85/"/>
      <url>/2020/01/03/IF%E5%B8%B8%E8%A7%81%E6%A3%80%E6%B5%8B%E9%80%89%E9%A1%B9%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[ -f <span class="string">"somefile"</span> ] ：判断是否是一个文件</span><br><span class="line">[ -x <span class="string">"/bin/ls"</span> ] ：判断/bin/ls是否存在并有可执行权限</span><br><span class="line">[ -n <span class="string">"<span class="variable">$var</span>"</span> ] ：判断<span class="variable">$var</span>变量是否有值</span><br><span class="line">[ <span class="string">"<span class="variable">$a</span>"</span> = <span class="string">"<span class="variable">$b</span>"</span> ] ：判断<span class="variable">$a</span>和<span class="variable">$b</span>是否相等</span><br><span class="line">-r file　　　　　用户可读为真</span><br><span class="line">-w file　　　　　用户可写为真</span><br><span class="line">-x file　　　　　用户可执行为真</span><br><span class="line">-f file　　　　　文件为正规文件为真</span><br><span class="line">-d file　　　　　文件为目录为真</span><br><span class="line">-c file　　　　　文件为字符特殊文件为真</span><br><span class="line">-b file　　　　　文件为块特殊文件为真</span><br><span class="line">-s file　　　　　文件大小非0时为真</span><br><span class="line">-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真</span><br><span class="line"></span><br><span class="line">含条件选择的shell脚本 对于不含变量的任务简单shell脚本一般能胜任。但在执行一些决策任务时，就需要包含<span class="keyword">if</span>/<span class="keyword">then</span>的条件判断了。shell脚本编程支持此类运算，包括比较运算、判断文件是否存在等。</span><br><span class="line">基本的<span class="keyword">if</span>条件命令选项有： - eq —比较两个参数是否相等（例如，<span class="keyword">if</span> [ 2 –eq 5 ]）</span><br><span class="line">-ne —比较两个参数是否不相等</span><br><span class="line">-lt —参数1是否小于参数2</span><br><span class="line">-le —参数1是否小于等于参数2</span><br><span class="line">-gt —参数1是否大于参数2</span><br><span class="line">-ge —参数1是否大于等于参数2</span><br><span class="line">-f — 检查某文件是否存在（例如，<span class="keyword">if</span> [ -f <span class="string">"filename"</span> ]）</span><br><span class="line">-d — 检查目录是否存在</span><br><span class="line">几乎所有的判断都可以用这些比较运算符实现。脚本中常用-f命令选项在执行某一文件之前检查它是否存在。</span><br></pre></td></tr></table></figure><h3 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[-a file] 如果file存在则为真</span><br><span class="line">[-b file] 如果file存在且是一个块特殊文件则为真</span><br><span class="line">[-c file] 如果file存在且是一个字特殊文件则为真</span><br><span class="line">[-d file] 如果file文件存在且是一个目录则为真</span><br><span class="line">-d前的!是逻辑非</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$lcd_path</span>/<span class="variable">$par_date</span> ]</span><br><span class="line">表示后面的那个目录不存在，则执行后面的<span class="keyword">then</span>操作</span><br><span class="line">[-e file] 如果file文件存在则为真</span><br><span class="line">[-f file] 如果file存在且是一个普通文件则为真</span><br><span class="line">[-g file] 如果file存在且已经设置了SGID则为真（SUID 是 Set User ID, SGID 是 Set Group ID的意思）</span><br><span class="line">[-h file] 如果file存在且是一个符号连接则为真</span><br><span class="line">[-k file] 如果file存在且已经设置粘制位则为真</span><br><span class="line">当一个目录被设置为<span class="string">"粘制位"</span>(用chmod a+t),则该目录下的文件只能由</span><br><span class="line">一、超级管理员删除</span><br><span class="line">二、该目录的所有者删除</span><br><span class="line">三、该文件的所有者删除</span><br><span class="line">也就是说,即便该目录是任何人都可以写,但也只有文件的属主才可以删除文件。</span><br><span class="line">具体例子如下：</span><br><span class="line"><span class="comment">#ls -dl /tmp</span></span><br><span class="line">drwxrwxrwt 4 root    root  .........</span><br><span class="line">注意other位置的t，这便是粘连位。</span><br><span class="line">[-p file] 如果file存在且是一个名字管道（F如果O）则为真</span><br><span class="line">管道是linux里面进程间通信的一种方式，其他的还有像信号（signal）、信号量、消息队列、共享内存、套接字（socket）等。</span><br><span class="line">[-r file] 如果file存在且是可读的则为真</span><br><span class="line">[-s file] 如果file存在且大小不为0则为真</span><br><span class="line">[-t FD] 如果文件描述符FD打开且指向一个终端则为真</span><br><span class="line">[-u file] 如果file存在且设置了SUID（<span class="built_in">set</span> userID）则为真</span><br><span class="line">[-w file] 如果file存在且是可写的则为真</span><br><span class="line">[-x file] 如果file存在且是可执行的则为真</span><br><span class="line">[-O file] 如果file存在且属有效用户ID则为真</span><br><span class="line">[-G file] 如果file存在且属有效用户组则为真</span><br><span class="line">[-L file] 如果file存在且是一个符号连接则为真</span><br><span class="line">[-N file] 如果file存在and has been mod如果ied since it was last <span class="built_in">read</span>则为真</span><br><span class="line">[-S file] 如果file存在且是一个套接字则为真</span><br><span class="line">[file1 –nt file2] 如果file1 has been changed more recently than file2或者file1 exists and file2 does not则为真</span><br><span class="line">[file1 –ot file2] 如果file1比file2要老，或者file2存在且file1不存在则为真</span><br><span class="line">[file1 –ef file2] 如果file1和file2指向相同的设备和节点号则为真</span><br><span class="line">[-o optionname] 如果shell选项“optionname”开启则为真</span><br><span class="line">[-z string] “string”的长度为零则为真</span><br><span class="line">[-n string] or [string] “string”的长度为非零non-zero则为真</span><br><span class="line">[sting1==string2] 如果2个字符串相同。“=”may be used instead of “==”<span class="keyword">for</span> strict posix compliance则为真</span><br><span class="line">[string1!=string2] 如果字符串不相等则为真</span><br><span class="line">[string1&lt;string2] 如果“string1”sorts before“string2”lexicographically <span class="keyword">in</span> the current locale则为真</span><br><span class="line">[arg1 OP arg2] “OP”is one of –eq,-ne,-lt,-le,-gt or –ge.These arithmetic binary oprators <span class="built_in">return</span> <span class="literal">true</span> <span class="keyword">if</span> “arg1”is equal to,not equal to,less than,less than or equal to,greater than,or greater than or equal to“agr2”,respectively.“arg1”and “agr2”are integers.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> IF选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux程序包管理</title>
      <link href="/2020/01/03/Linux%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>/2020/01/03/Linux%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将源代码编译后变成目标二进制格式，然后需要将二进制程序和其库文件、配置文件、帮助文件等打包形成一个或多个方便用户使用管理的包，这个包叫做程序包，实现这个过程的工具叫做程序包管理器。他可以帮助用户实现程序的安装、升级、卸载、查询、校验的等。</p><a id="more"></a><h3 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h3><h4 id="组成格式"><a href="#组成格式" class="headerlink" title="组成格式"></a>组成格式</h4><ul><li>程序包的组成清单。每个程序包单独实现。包括文件清单、安装或卸载脚本</li><li>数据库。整个系统维护一个数据库，存放各个包的名称版本、依赖关系、功能说明、文件路径和校验码等，数据库存放在/var/lib/rpm下，每个文件都存放不同侧重点的信息。</li></ul><h4 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h4><p>待补充</p><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">rpm [option] package</span><br><span class="line">-i：安装</span><br><span class="line">-h：<span class="built_in">hash</span> marks输出进度条，每个<span class="string">'#'</span>表示2%进度</span><br><span class="line">--<span class="built_in">test</span>：只检测不安装，通常检测依赖</span><br><span class="line">--replacepkgs：重新安装</span><br><span class="line">--nosignature：不检查签名，即不检查来源合法性</span><br><span class="line">--nodigest：不检查包完整性信息</span><br><span class="line">-U：升级或安装</span><br><span class="line">-h：<span class="built_in">hash</span> marks输出进度条，每个<span class="string">'#'</span>表示2%进度</span><br><span class="line">--oldpackage：程序包降级</span><br><span class="line">--force：强制升级</span><br><span class="line">-e：卸载</span><br><span class="line">--allmatches：卸载所有匹配到的指定程序包各版本</span><br><span class="line">--<span class="built_in">test</span>：只测试卸载，检测依赖</span><br><span class="line">-q：查询</span><br><span class="line"><span class="comment">#rpm &#123;-q|--query&#125; [select-options] [query-options]</span></span><br><span class="line">[select options]</span><br><span class="line">package_name：查询指定的程序包是否安装及其版本</span><br><span class="line">-a：查询所有已安装包</span><br><span class="line">-f file：查询指定的文件由哪个程序包安装生成</span><br><span class="line">-p package：对未安装的程序包查询</span><br><span class="line">--whatprovides capability：查询指定capability由哪个包提供</span><br><span class="line">--whatrequiers capability：查询指定capability被哪个包依赖</span><br><span class="line">[query-options]</span><br><span class="line">--changelog：查询rpm包的changelog</span><br><span class="line">-l：列出程序包安装生成的所有文件</span><br><span class="line">-i：查询程序包相关的信息，版本号、大小等</span><br><span class="line">-c：查询指定程序包的配置文件</span><br><span class="line">-d：查询指定程序包文档</span><br><span class="line">--provides：列出指定程序包的所有capability</span><br><span class="line">-R：查询指定程序包的依赖关系</span><br><span class="line">--scripts：查询程序包自带的脚本</span><br><span class="line">-V：校验</span><br><span class="line"><span class="comment">#校验位含义</span></span><br><span class="line">S file Size differs</span><br><span class="line">M Mode differs (includes permissions and file <span class="built_in">type</span>)</span><br><span class="line">5 digest (formerly MD5 sum) differs</span><br><span class="line">D Device major/minor number mismatch</span><br><span class="line">L readLink(2) path mismatch</span><br><span class="line">U User ownership differs</span><br><span class="line">G Group ownership differs</span><br><span class="line">T mTime differs</span><br><span class="line">P caPabilities differ</span><br><span class="line">-v：详细信息</span><br><span class="line">-K：不安装直接检验程序合法性与完整性</span><br><span class="line">--nosignature：不检查签名，即不检查来源合法性</span><br><span class="line">--nodigest：不检查包完整性信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：不要对内核做升级操作，直接安装，支持多内核共存</span></span><br><span class="line"><span class="comment">#程序包原配置文件被改动过，那么安装新版本时不会覆盖，而是将新的配置文件重命名后提供</span></span><br></pre></td></tr></table></figure><h5 id="包命名格式"><a href="#包命名格式" class="headerlink" title="包命名格式"></a>包命名格式</h5><p>name-version-release.arch.rpm</p><p>version：major.minor.release</p><p>release.arch：rpm包的发行号</p><h5 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h5><p>由于程序打包后并不是所有功能都被用户所需要，因此引进拆包的概念。拆包后包分为主包和支包。</p><p>主包：name-version-release.arch.rpm</p><p>支包：name-function-version-release.arch.rpm</p><p>​            function：devel，utils，libs等各种开发或者插件包</p><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>每个rpm包之间可能存在安装A就要先安装B这种情况，这叫做依赖关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询指定程序包的依赖关系</span></span><br><span class="line">rpm -qr package</span><br></pre></td></tr></table></figure><h5 id="前端工具"><a href="#前端工具" class="headerlink" title="前端工具"></a>前端工具</h5><p>用来自动解决依赖关系。rhel系列上rpm包前端工具为yum、dnf。centos8中dnf已取代yum，不过大体命令使用格式没变，下文均使用习惯的yum来表示dnf。</p><h6 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h6><p>yum的仓库就是yum repository，它存储了大量的rpm包以及包的相关源数据，通常放置于特定目录下repodata</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仓库定义</span></span><br><span class="line"><span class="comment">#&#123;A|B&#125;其中A为默认选项</span></span><br><span class="line">[repositoryid]</span><br><span class="line">name=some name <span class="keyword">for</span> repo</span><br><span class="line"><span class="comment">#baseurl指向的是一堆url，可以是包含repodata的文件夹</span></span><br><span class="line">baseurl=url://path</span><br><span class="line"><span class="built_in">enable</span>=&#123;1|0&#125;<span class="comment">#该仓库是否启用</span></span><br><span class="line">gpgcheck=&#123;1|0&#125;<span class="comment">#是否启用校验</span></span><br><span class="line">gpgkey=url<span class="comment">#指明gpg的密钥文件</span></span><br><span class="line">mirrorlist=url<span class="comment">#镜像url文件</span></span><br><span class="line">enablegroups=&#123;1|0&#125;<span class="comment">#是否使用组批量管理程序包</span></span><br><span class="line">failovermethod=&#123;roundrobin|priority&#125;<span class="comment">#多个仓库的选用顺序定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建repo，即在指定目录下创建仓库</span></span><br><span class="line"><span class="comment">#执行后会在指定目录下创建repodata目录，里面存放了有关各个rpm的信息</span></span><br><span class="line"><span class="comment">#其中repmod.xml存放了各个文件的校验码，用于检查上述文件是否合法，不合法则丢弃cache</span></span><br><span class="line">createrepo 目录</span><br></pre></td></tr></table></figure><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><ul><li>/etc/yum.conf：为所有仓库提供公共配置</li><li>/etc/yum.repos.d/*.repo：为仓库的指向提供配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#repo文件中的变量</span></span><br><span class="line"><span class="variable">$releasever</span>：当前OS的发型版的主版本号</span><br><span class="line"><span class="variable">$arch</span>：平台</span><br><span class="line"><span class="variable">$basearch</span>：基础平台</span><br><span class="line"><span class="variable">$YUM0</span>-9：自定义变量</span><br></pre></td></tr></table></figure><h6 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">yum [option] &lt;commands&gt; [args...]</span><br><span class="line">repolist &#123;all|<span class="built_in">enable</span>|<span class="built_in">disable</span>&#125;：显示仓库列表</span><br><span class="line">list &#123;available|installed|updates&#125;：显示程序包</span><br><span class="line">install package：安装指定包，可以指定具体版本</span><br><span class="line">reinstall package：重新安装</span><br><span class="line">downgrade package：降级</span><br><span class="line">update package：升级指定程序包</span><br><span class="line">check-update：检查可用升级</span><br><span class="line">remove|erase package：卸载程序包，依赖也会被卸载</span><br><span class="line">info package：显示指定package详细信息</span><br><span class="line">provides|whatprovides feature：查看指定特性由哪个程序包提供</span><br><span class="line">clean &#123;package|all|plugins...&#125;：清理本地缓存</span><br><span class="line">makecache：生成缓存</span><br><span class="line">search string：根据关键字模糊搜索程序包名和summary信息</span><br><span class="line">deplist package：显示指定包的依赖关系</span><br><span class="line"><span class="built_in">history</span>：查看安装、卸载等信息</span><br><span class="line">groupinstall group：安装包组</span><br><span class="line">groupupdate group：更新包组</span><br><span class="line">grouplist：查询所有包组信息</span><br><span class="line">groupinfo group：查询指定包组信息</span><br><span class="line">groupremove group：删除包组</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令行选项</span></span><br><span class="line">--nogpgcheck：禁止进行gpgcheck</span><br><span class="line">-y：自动回答yes</span><br><span class="line">-q：静默模式</span><br><span class="line">--disablerepo=repoidglob：临时禁用指定的repo</span><br><span class="line">--enablerepo=repoidglob：临时启用指定的repo</span><br><span class="line">--noplugins：禁用所有插件</span><br></pre></td></tr></table></figure><h5 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h5><p>rpm包可以自带安装脚本，主要分为四类：</p><ul><li>preinstall：安装之前执行的脚本，用%pre定义，用–nopre取消</li><li>postinstall：安装之后执行的脚本，用%post定义，用–nopost取消</li><li>preuninstall：卸载真正执行前执行的脚本，用%preun定义，用–nopreun取消</li><li>postuninstall：卸载完成后执行的脚本，用%postun定义，用–nopostun取消</li></ul><h5 id="完整性验证"><a href="#完整性验证" class="headerlink" title="完整性验证"></a>完整性验证</h5><p>数字签名的含义是指制作者首先用单向加密算法对数据进行加密并得到特征码，然后使用自己的私钥对特征码进行加密，这样别人只能使用制作者的公钥才能对文件解密，然后再使用相同的单向加密算法计算特征码，相同则文件没有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取并导入信任的包制作者密钥，centos发行版的密钥通常保存在/etc/pki/rpm-gpg/目录下</span></span><br><span class="line">rpm --import /etc/pki/rpm-gpg/</span><br><span class="line"></span><br><span class="line"><span class="comment">#不安装直接检查完整性与合法性</span></span><br><span class="line">rpm -K package</span><br></pre></td></tr></table></figure><h5 id="数据库重建"><a href="#数据库重建" class="headerlink" title="数据库重建"></a>数据库重建</h5><p>rpm数据库放在/var/lib/rpm/下，其中存放各个包的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用rpmdb命令，本身还是rpm</span></span><br><span class="line">rpm &#123;--initdb|--rebuilddb&#125; [-v] [--dbpath DIRECTORY] [--root DIRECTORY]</span><br><span class="line">--initdb：初始化数据库，若没有数据库则创建一个新的</span><br><span class="line">--rebuilddb：重新构建数据库，构建后的数据库没有rpm事务文件，即__db.001等文件</span><br></pre></td></tr></table></figure><h3 id="程序包编译安装"><a href="#程序包编译安装" class="headerlink" title="程序包编译安装"></a>程序包编译安装</h3><p>形如testname-version-release.src.rpm的包成为源程序包，需要使用rpmbuild命令制作成二进制格式的rpm包后再进行安装。</p><h4 id="组织格式"><a href="#组织格式" class="headerlink" title="组织格式"></a>组织格式</h4><p>源代码一般由多个文件组成，且文件中的代码之间很有可能存在跨文件的依赖关系。因此需要使用make来管理源代码的编译。</p><h4 id="编译安装步骤"><a href="#编译安装步骤" class="headerlink" title="编译安装步骤"></a>编译安装步骤</h4><ul><li><p>./configure</p><ul><li>通过选项传递参数，指定启用特性、安装路径等；执行时会参考用户指定的Makefile.in文件生成makefile</li><li>检查各指定功能依赖到的外部环境</li><li>一般由autoconf系列命令根据开发者的需要生成configure脚本；由automake系列命令根据用户需要生成Makefile.in文件(一般源代码文件都会提供)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#configure脚本，一般可以指定安装位置、指定启用的特性</span></span><br><span class="line">--<span class="built_in">help</span>：获取帮助</span><br><span class="line">--prefix=path：指明默认安装位置，默认为/usr/<span class="built_in">local</span>/</span><br><span class="line">--sysconfdir=path：指明配置文件安装位置</span><br></pre></td></tr></table></figure></li><li><p>make</p><ul><li>根据makefile文件构建应用程序</li></ul></li><li><p>make install</p></li><li><p>导出二进制程序至PATH环境变量中。即编辑文件/etc/profile.d/name.sh添加export  PATH=$PATH:/yourpath</p></li><li><p>导出库文件路径。即编辑/etc/ld.so.conf.d/name.conf，添加新的库文件所在目录至此文件中。之后使用ldconfig命令让系统重新生成缓存</p></li><li><p>导出头文件。可以导出整个目录的符号链接到/usr/include/目录下即可。</p></li><li><p>导出帮助手册。编辑/etc/man.conf，添加一条MANPATH路径即可。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpm </tag>
            
            <tag> yum </tag>
            
            <tag> dnf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任务计划crontab</title>
      <link href="/2020/01/02/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92crontab/"/>
      <url>/2020/01/02/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92crontab/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>用于设定系统定时处理某件事情的功能，例如设定数据库定时备份等。</p><a id="more"></a><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>at、batch、crontab</p><p>其中at和batch是在未来的某个时间点执行一次任务，crontab是周期性的运行某任务</p><p>上述命令的执行结果会通过邮件发送给用户。这里说的邮件是本机邮件，不是互联网邮件。</p><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>在未来某个时间点执行一次某个任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">at [option] time</span><br><span class="line">-l：查看已有的任务</span><br><span class="line">-f file：从file中读取作业内容，不用交互输入</span><br><span class="line">-d <span class="comment">#：删除指明作业号的作业</span></span><br><span class="line">-c <span class="comment">#：查看指定作业号的具体内容</span></span><br><span class="line">-q QUEUE：指明任务执行队列，默认队列为a</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果以邮件方式发给提交作业的用户</span></span><br><span class="line"><span class="comment">#时间格式为：HH:MM[YYYY-mm-dd]</span></span><br><span class="line"><span class="comment">#模糊时间表示：noon、midnight、teatime、tomorrow</span></span><br><span class="line"><span class="comment">#相对时间表示：now+#mins/hours/days/weeks</span></span><br></pre></td></tr></table></figure><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p>实现周期性执行某任务。需要服务程序来监控，该服务为cronle，提供了crond守护进程及相关辅助工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意：如果拒绝接收邮件可以用command &gt; /dev/null，还会接收错误输出</span></span><br><span class="line"><span class="comment">#若使用command &amp;&gt; /dev/null则连错误输出也过滤掉，不推荐</span></span><br><span class="line">crontab [option]</span><br><span class="line">-e：编辑任务；可用于删除单个任务</span><br><span class="line">-l：列出所有任务</span><br><span class="line">-r：移除所有任务；即删除/var/spool/cron/下的用户文件</span><br><span class="line">-i：交互式</span><br><span class="line">-u user：root用户用于管理其他用户的任务，与其他命令组合使用</span><br></pre></td></tr></table></figure><h5 id="系统cron任务"><a href="#系统cron任务" class="headerlink" title="系统cron任务"></a>系统cron任务</h5><p>主要用于实现系统自身的维护，编辑时直接手动编辑配置文件/etc/crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat /etc/crontab</span></span><br><span class="line"><span class="comment">#注意：每一行定义一个周期任务；命令建议使用绝对路径；执行结果发送给MAILTO指定的用户；共7个字段</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/crontab</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure><h5 id="用户cron任务"><a href="#用户cron任务" class="headerlink" title="用户cron任务"></a>用户cron任务</h5><p>使用命令crontab编辑任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#确保crond运行</span></span><br><span class="line">systemctl status crond.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义于/var/spool/cron/username中，只能用命令crontab修改，且只有6个字段(无用户名)</span></span><br><span class="line"><span class="comment">#注意：每一行定义一个周期任务；命令建议使用绝对路径；结果发给定义文件的用户</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  *  command to be executed</span></span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>*表示“每…执行一次”；</li><li>在时间点上使用逗号分隔的多个值可以表示多个时间实现离散取值</li><li>在时间点上使用#-#表示连续时间取值；</li><li>可以在指定时间上定义步长*/#，#就是步长，且步长需要能整除时间；</li><li>最小单位为分钟，不能完成秒级任务(可以通过脚本每分钟循环实现)</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul><li>3 * * * *：每小时执行一次；每小时的第3分钟执行</li><li>3 4 * * 5：每周执行一次；每周5的4点3分执行</li><li>5 6 7 * *：每月执行一次；每月的7号的6点5分执行</li><li>7 8 9 10 *：每年执行一次；每年10月9号8点7分执行</li><li>9 8 * * 3,7：每周3和周日执行一次</li><li>0 8,20 * * 3,7：每周3和周日的8点和20点执行一次，注意前面的min位必须指定，否则每分钟都执行</li><li>0 9-18 * * 1-5：周1到周5的9点到18点每小时执行一次</li><li>*/5 * * * *：每5分钟执行一次</li></ul><h3 id="本地电子邮件服务"><a href="#本地电子邮件服务" class="headerlink" title="本地电子邮件服务"></a>本地电子邮件服务</h3><h4 id="smtp"><a href="#smtp" class="headerlink" title="smtp"></a>smtp</h4><p>simple mail transmission protocol，简单邮件投递服务，只能发邮件不能收邮件</p><h4 id="pop3"><a href="#pop3" class="headerlink" title="pop3"></a>pop3</h4><p>post office protocol，邮局协议，用于接收邮件</p><h4 id="mail命令"><a href="#mail命令" class="headerlink" title="mail命令"></a>mail命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mail [-s <span class="string">'SUBJECT'</span>] 用户 &lt; 邮件正文</span><br><span class="line"></span><br><span class="line"><span class="comment">#邮件正文一般用输入重定向即可</span></span><br><span class="line"><span class="comment">#注意，初次实验可能对面没有收到，因为配置文件/etc/postfix/main.cf文件中的inet_interfaces = all一开始没有设置成all而是localhost，修改后即可正常发送。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩与归档</title>
      <link href="/2020/01/02/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%BD%92%E6%A1%A3/"/>
      <url>/2020/01/02/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%BD%92%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>CPU时间换磁盘空间</p><a id="more"></a><h3 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h3><p>compress/uncompress    .z</p><p>gzip/gunzip    .gz</p><p>bzip2/bunzip2    .bz2</p><p>xz/unxz    .xz</p><p>上述工具不支持压缩目录，要压缩目录需要先归档。</p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#压缩文件并删除源文件</span></span><br><span class="line">gzip [option] file</span><br><span class="line">-d：解压缩，相当于gunzip</span><br><span class="line">-<span class="comment">#：指定压缩比，默认6，数字越大压缩比越大(1-9)</span></span><br><span class="line">-c：将压缩结果输出至标准输出例如：gzip -c file &gt; file.gz</span><br><span class="line"><span class="comment">#解压缩文件，结尾必须是.gz结尾</span></span><br><span class="line">gunzip [option] file.gz</span><br><span class="line"><span class="comment">#不解压直接查看压缩文件</span></span><br><span class="line">zcat file.gz</span><br></pre></td></tr></table></figure><h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bizip2 [option] file</span><br><span class="line">-d：解压缩，相当于bunzip</span><br><span class="line">-<span class="comment">#：指定压缩比，默认为6，数字越大压缩比越大(1-9)</span></span><br><span class="line">-k：保留源文件</span><br><span class="line"><span class="comment">#不解压直接查看压缩文件</span></span><br><span class="line">bzcat file.bz</span><br></pre></td></tr></table></figure><h4 id="xz-unxz"><a href="#xz-unxz" class="headerlink" title="xz/unxz"></a>xz/unxz</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xz [option] file</span><br><span class="line">-d：解压缩</span><br><span class="line">-<span class="comment">#：指定压缩比，默认为6，数字越大压缩比越大(1-9)</span></span><br><span class="line">-k：保留源文件</span><br><span class="line"><span class="comment">#不解压直接查看压缩文件</span></span><br><span class="line">xzcat file.xz</span><br></pre></td></tr></table></figure><h3 id="归档工具"><a href="#归档工具" class="headerlink" title="归档工具"></a>归档工具</h3><p>用于将目录内所有文件都归档成一个文件再指行压缩</p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">tar [option] file</span><br><span class="line">-c：创建归档</span><br><span class="line">-x：展开归档</span><br><span class="line">-t：查看归档文件列表，不展开归档</span><br><span class="line">-f path：指明要归档的文件目录</span><br><span class="line">-C path：指明归档文件展开到何处</span><br><span class="line">-z：使用gizp2压缩/解压缩</span><br><span class="line">-j：使用bzip2压缩/解压缩</span><br><span class="line">-J：使用xz压缩/解压缩</span><br><span class="line">-v：显示压缩详细信息</span><br><span class="line">-A：新增文件到已压缩文件中</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用搭配</span></span><br><span class="line"><span class="comment">#使用gzip压缩和解压缩目录文件</span></span><br><span class="line">tar zcvf 保存文件.tar.gz ./<span class="built_in">test</span>/</span><br><span class="line">tar zxvf 保存文件.tar.gz ./<span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#使用bzip2压缩和解压缩目录文件</span></span><br><span class="line">tar jcvf 保存文件.tar.bz ./<span class="built_in">test</span>/</span><br><span class="line">tar jxvf 保存文件.tar.bz ./<span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#使用xz压缩和解压缩目录文件</span></span><br><span class="line">tar Jcvf 保存文件.tar.xz ./<span class="built_in">test</span>/</span><br><span class="line">tar Jxvf 保存文件.tar.xz ./<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tar </tag>
            
            <tag> 压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理与文件系统</title>
      <link href="/2020/01/02/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/01/02/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h3><h4 id="块"><a href="#块" class="headerlink" title="块"></a>块</h4><p>随机访问，数据交换单位是块</p><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>线性访问，数据交换单位是字符</p><a id="more"></a><h3 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h3><p>关联至设备的驱动程序；设备的访问入口</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/sd[a-z]<span class="comment">#</span></span><br><span class="line"><span class="comment">#其中"#"表示任意数字</span></span><br></pre></td></tr></table></figure><h4 id="设备号"><a href="#设备号" class="headerlink" title="设备号"></a>设备号</h4><ul><li>major：主设备号，区分设备类型，用于标明设备所需要的驱动程序</li><li>minor：次设备号，区分同种设备类型下的不同设备，是特定设备的访问路口</li></ul><h4 id="mknod命令"><a href="#mknod命令" class="headerlink" title="mknod命令"></a>mknod命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于创建块或字符设备</span></span><br><span class="line">mknod [OPTION]... NAME TYPE [MAJOR MINOR]</span><br><span class="line">-m MODE:创建后的设备文件的访问权限</span><br></pre></td></tr></table></figure><h4 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h4><ul><li>设备文件名</li><li>卷标</li><li>UUID</li></ul><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><p>主引导记录，处于0号扇区(每个扇区512B)。</p><h5 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h5><ul><li>446B：bootloader程序，是引导启动操作系统的程序</li><li>64B：分区表，每16B标识一个分区，一共只能有4个分区，其中第四个分区使用拓展分区即可超过4个分区的限制</li><li>2B：MBR区域的有效性标识，一般为55AA</li></ul><h4 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h4><p>待补充</p><h4 id="fdisk命令"><a href="#fdisk命令" class="headerlink" title="fdisk命令"></a>fdisk命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于管理磁盘分区</span></span><br><span class="line">fdisk [options] device</span><br><span class="line"></span><br><span class="line"><span class="comment">#fdisk /dev/dev_name后将进入交互式管理接口</span></span><br><span class="line"><span class="comment">#交互常用命令</span></span><br><span class="line">n:创建新分区</span><br><span class="line">d:删除已有分区</span><br><span class="line">t:修改分区类型</span><br><span class="line">l:查看已有id</span><br><span class="line">w:保存修改到磁盘</span><br><span class="line">q:不保存直接退出</span><br><span class="line">m:查看帮助信息</span><br><span class="line">p:显示现有分区信息</span><br></pre></td></tr></table></figure><p>注意：在已经分区且已经挂载其中某个分区的磁盘上创建新的分区，内核可能在创建完成后无法直接识别，使用以下命令解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内核分区</span></span><br><span class="line">cat /proc/partitions</span><br><span class="line"></span><br><span class="line"><span class="comment">#通知内核强制重读磁盘分区</span></span><br><span class="line">CentOS 5：partprobe [device]</span><br><span class="line">CentOS 6/7：</span><br><span class="line">partx -a [device]</span><br><span class="line">kpartx -af [device]</span><br></pre></td></tr></table></figure><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><h5 id="低级格式化"><a href="#低级格式化" class="headerlink" title="低级格式化"></a>低级格式化</h5><p>分区之前进行，主要划分磁道</p><h5 id="高级格式化"><a href="#高级格式化" class="headerlink" title="高级格式化"></a>高级格式化</h5><p>分区之后对分区进行，主要是创建文件系统</p><h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><p>元数据主要是文件的属性例如大小、权限、时间戳、数据块指针等信息的存放区域(不包括文件名)，一般一个文件的元数据叫做一个inode(index node)索引节点，在创建操作系统时就已经分配了一段区域作为元数据的存储区域。另外，元数据区域包括一个位图，用于标识inode节点的分配情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件前的编号即为inode编号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -i </span></span><br><span class="line">34214878 anaconda-ks.cfg  34214891 initial-setup-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#stat命令查看具体文件的inode信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat ./anaconda-ks.cfg </span></span><br><span class="line">  File: ./anaconda-ks.cfg</span><br><span class="line">  Size: 1467      Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768dInode: 34214878    Links: 1</span><br><span class="line">Access: (0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: system_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2019-12-23 08:02:55.976905697 -0500</span><br><span class="line">Modify: 2019-12-23 07:16:53.042026882 -0500</span><br><span class="line">Change: 2019-12-23 07:16:53.042026882 -0500</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>目录本身也是文件，他所在的块存贮的是他的一级目录下的文件名和对于的inode映射。因此在每次查找路径时都会先查找/的inode，然后查找/的块，从/的块中的映射查找需要的文件再依次查找下去，直到找到目标文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#free查看内存看出cache占用，里面存储的就包含路径的缓存，用于加快查找映射</span></span><br><span class="line">[root@localhost ~]<span class="comment"># free</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         817272      522836       91996        1804      202440      140784</span><br><span class="line">Swap:       2097148      216064     1881084</span><br></pre></td></tr></table></figure><h4 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h4><p>虚拟文件系统，是一个中间层，用于将各种文件系统的差异性屏蔽而向上层统一输出一个接口。</p><p>Linux文件系统：ext2~4、xfs、btrfs等</p><p>网络文件系统：nfs、cifs等</p><p>集群文件系统：gfs2、ocfs2等</p><p>内核级分布式文件系统：ceph等</p><p>伪文件系统：proc、sysfs、tmpfs等</p><p>交换文件系统：swap等</p><p>用户空间分布式文件系统：mogiles、moosefs等</p><h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><h5 id="创建文件系统工具"><a href="#创建文件系统工具" class="headerlink" title="创建文件系统工具"></a>创建文件系统工具</h5><p>mkfs：它包括一系列指令，如mkfs.ext2、mkfs.ext3、mkfs.xfs等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ext系列专用管理工具</span></span><br><span class="line">mke2fs [option] device</span><br><span class="line">-t &#123;ext2|3|4&#125;：指明文件系统类型</span><br><span class="line">-b &#123;1024|2048|4096&#125;：指明文件系统的块大小</span><br><span class="line">-L LABLE：指明卷标</span><br><span class="line">-j：创建有日志的文件系统</span><br><span class="line">-i <span class="comment">#：指明inode的比率，即每多少字节创建一个inode</span></span><br><span class="line">-N <span class="comment">#：直接指明要给此文件系统创建的inode数量</span></span><br><span class="line">-O [^]feature：以指定的特性创建文件系统(或取消某种特性)</span><br><span class="line">-m <span class="comment">#：指定预留空间百分比，直接根数字即可</span></span><br></pre></td></tr></table></figure><h5 id="检测及修复文件系统工具"><a href="#检测及修复文件系统工具" class="headerlink" title="检测及修复文件系统工具"></a>检测及修复文件系统工具</h5><p>fsck：它包括一系列指令，如fsck.ext2、fsck.ext3、fsck.xfs等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#e2fsck用于检查ext系列文件系统</span></span><br><span class="line">e2fsck [option] device</span><br><span class="line">-y：对所有问题自动回复yes</span><br><span class="line">-f：即使文件系统clean也要强制检测</span><br><span class="line"></span><br><span class="line"><span class="comment">#fsck用于通用的linux文件系统检查</span></span><br><span class="line">fsck</span><br><span class="line">-t <span class="built_in">type</span>：指明文件系统类型</span><br><span class="line">-a：无须交互而自动修复所有错误</span><br><span class="line">-r：交互式修复(推荐)</span><br></pre></td></tr></table></figure><h5 id="查看管理属性工具"><a href="#查看管理属性工具" class="headerlink" title="查看管理属性工具"></a>查看管理属性工具</h5><p>dumpe2fs、tune2fs、blkid、e2label</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#e2label用于查看与设置ext系列的卷标</span></span><br><span class="line">e2label device</span><br><span class="line">e2label device LABEL</span><br><span class="line"></span><br><span class="line"><span class="comment">#blkid打印块属性</span></span><br><span class="line">blkid [option] device</span><br><span class="line">-L LABEL；根据LABEL定位设备</span><br><span class="line">-U UUID：根据UUID定位设备</span><br><span class="line"></span><br><span class="line"><span class="comment">#tune2fs用于调整ext系列系统中可调整的参数，例如卷标和系统类型等</span></span><br><span class="line">tune2fs [option] device</span><br><span class="line">-l：查看超级块信息</span><br><span class="line">-j：将ext2升级为ext3</span><br><span class="line">-L LABEL：修改卷标</span><br><span class="line">-m <span class="comment">#：修改预留空间百分比，直接跟数字即可</span></span><br><span class="line">-O [^]feature：开启或关闭某种特性</span><br><span class="line">-o [^]mount_option：开启或关闭某种默认挂载选项，常用设置acl</span><br><span class="line"></span><br><span class="line"><span class="comment">#dumpe2fs用于显示文件系统属性信息，包括每个块组和超级块信息</span></span><br><span class="line">dumpe2fs [option] device</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改ext系列文件系统的大小，主要用于扩展lv后扩展文件系统使用</span></span><br><span class="line">resize2fs lvname</span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>主要是解决当写文件发生错误导致系统重启后恢复哪些文件而设置的机制。在磁盘上会单独分一块日志区，写文件时先写在日志区，然后再写回文件系统中。虽然会有性能损失，但是利大于弊。</p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p>将此文件指向的所有数据块标记为未使用状态并将此文件的inode标记为未使用，即只修改inode位图和数据块位图即可，因此速度很快。</p><h5 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h5><p>当处于同一文件系统时，移动文件仅仅是改变其路径。即将当前目录的条目移到另一目录即可，文件本身并不做改变。</p><p>当处于不同文件系统时，移动文件相当于复制数据至目标文件并删除源文件，因此比较慢。</p><h4 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h4><h5 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h5><p>指向同一inode的不同路径</p><p>其中目录不支持硬链接；硬链接不能跨文件系统；创建硬链接会增加inode引用计数；硬链接大小相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#硬链接inode相同</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -i</span></span><br><span class="line">34214878 anaconda-ks.cfg      34214891 initial-setup-ks.cfg</span><br><span class="line">34214878 anaconda-ks.cfg_bak  34214894 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二列的“1”就是引用计数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l</span></span><br><span class="line">total 8</span><br><span class="line">-rw-------. 1 root root 1467 Dec 23 07:16 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root 1622 Dec 23 08:03 initial-setup-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个硬链接，可以看到引用计数加1</span></span><br><span class="line"><span class="comment">#删除一个硬链接不影响另一个</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln anaconda-ks.cfg anaconda-ks.cfg_bak</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l</span></span><br><span class="line">total 12</span><br><span class="line">-rw-------. 2 root root 1467 Dec 23 07:16 anaconda-ks.cfg</span><br><span class="line">-rw-------. 2 root root 1467 Dec 23 07:16 anaconda-ks.cfg_bak</span><br><span class="line">-rw-r--r--. 1 root root 1622 Dec 23 08:03 initial-setup-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#不能链接目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln test test_1</span></span><br><span class="line">ln: <span class="built_in">test</span>: hard link not allowed <span class="keyword">for</span> directory</span><br></pre></td></tr></table></figure><h5 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h5><p>inode数据保存的指针区域保存的不是指向磁盘块的指针，而是指向那个真正文件的路径</p><p>其中，符号链接和文件是两个独立的文件，他们有各自的inode；可以对目录进行符号链接，且可以跨文件系统；删除符号链接不影响源文件，但是删除源文件影响符号链接；符号链接大小为路径字符串长度。</p><p>符号链接本身权限是777，因为用户对符号链接的访问本质还是要看源文件的权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以看到符号链接的文件inode与硬链接和源文件不同</span></span><br><span class="line"><span class="comment">#且源文件和符号链接的引用计数也不同，源文件引用计数不变</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s anaconda-ks.cfg anaconda-ks.cfg_symbolic</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li</span></span><br><span class="line">total 12</span><br><span class="line">34214878 -rw-------. 2 root root 1467 Dec 23 07:16 anaconda-ks.cfg</span><br><span class="line">34214878 -rw-------. 2 root root 1467 Dec 23 07:16 anaconda-ks.cfg_bak</span><br><span class="line">34214895 lrwxrwxrwx. 1 root root   15 Jan  1 06:15 anaconda-ks.cfg_symbolic -&gt; anaconda-ks.cfg</span><br><span class="line">34214891 -rw-r--r--. 1 root root 1622 Dec 23 08:03 initial-setup-ks.cfg</span><br><span class="line">34214894 drwxr-xr-x. 2 root root    6 Jan  1 06:09 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以对目录进行符号链接</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s test test_symbolic</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li test*</span></span><br><span class="line">34214899 lrwxrwxrwx. 1 root root 4 Jan  1 06:17 test_symbolic -&gt; <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure><h4 id="swap交换分区"><a href="#swap交换分区" class="headerlink" title="swap交换分区"></a>swap交换分区</h4><p>Linux上的交换分区必须使用独立的文件系统，且文件系统的system_ID必须为82</p><h5 id="创建swap分区"><a href="#创建swap分区" class="headerlink" title="创建swap分区"></a>创建swap分区</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkswap [option] device</span><br><span class="line">-L：指明卷标</span><br><span class="line">-f：强制创建</span><br></pre></td></tr></table></figure><h5 id="启用swap"><a href="#启用swap" class="headerlink" title="启用swap"></a>启用swap</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapon [option] device</span><br><span class="line">-a：启用定义在/etc/fstab文件中的所有swap设备</span><br></pre></td></tr></table></figure><h5 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff device</span><br></pre></td></tr></table></figure><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>根文件系统以外的其他文件系统想要被访问就必须先关联到根文件系统上的某个目录来实现，这个关联操作称为“挂载”，挂载目录成为”挂载点“，即用于另一个文件系统的访问入口。</p><p>此外，挂载点必须实现存在；应该使用不会被或未被其他进程使用的目录；挂载点下原有的文件会被隐藏</p><h5 id="mount使用"><a href="#mount使用" class="headerlink" title="mount使用"></a>mount使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mount实现挂载</span></span><br><span class="line">mount [-fnrsvw] [-t fstype] [-o options] device dir</span><br><span class="line">-a：自动挂载</span><br><span class="line">-r：只读挂载</span><br><span class="line">-w：读写挂载</span><br><span class="line">-n：默认情况下，挂载卸载会同步更新到/etc/mtab中，该选项用于禁止该功能</span><br><span class="line">-t：指明挂载文件系统类型，可省略，默认通过blkid识别</span><br><span class="line">-L LABEL：挂载时以卷标的方式指明设备</span><br><span class="line">-U UUID：挂载时以UUID方式指明设</span><br><span class="line">-o options挂载选项</span><br><span class="line">sync/async：同步/异步操作</span><br><span class="line">atime/noatime：文件在被访问时是否更新其访问时间戳，不启用更好</span><br><span class="line">diratime/nodiratime：同上，对目录操作</span><br><span class="line">remount：重新挂载，不用卸载再挂载</span><br><span class="line">acl：支持使用facl</span><br><span class="line">ro：只读类似-r</span><br><span class="line">rw：读写类似-w</span><br><span class="line">dev/nodev：此设备上是否允许创建设备文件</span><br><span class="line"><span class="built_in">exec</span>/noexec：是否允许运行此设备上的程序文件</span><br><span class="line">auto/noauto：是否允许自动挂载</span><br><span class="line">user/nouser：是否允许普通用户挂载</span><br><span class="line">suid/nosuid：是否允许suid和sgid特殊权限生效</span><br><span class="line">defaults：rw, suid, dev, <span class="built_in">exec</span>, auto, nouser, and async</span><br><span class="line">--<span class="built_in">bind</span> 源目录 目标目录：实现目录的绑定，用作某目录临时入口</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前已挂载设备</span></span><br><span class="line">mount</span><br><span class="line">cat /etc/mtab</span><br><span class="line">cat /proc/mounts</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载光盘</span></span><br><span class="line">mount -r /dev/cdrom mount_point</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载本地回环设备(iso等映像)</span></span><br><span class="line">mount -o loop 回环设备 mount_point</span><br></pre></td></tr></table></figure><h5 id="umount使用"><a href="#umount使用" class="headerlink" title="umount使用"></a>umount使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#umount实现卸载</span></span><br><span class="line">umount [-dflnrv] &#123;directory|device&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#正在被访问时无法卸载,查看被谁访问使用</span></span><br><span class="line">lsof mount_point</span><br><span class="line">fuser -v mount_point</span><br><span class="line"></span><br><span class="line"><span class="comment">#终止所有访问挂载点的进程</span></span><br><span class="line">fuser -km mount_point</span><br></pre></td></tr></table></figure><h5 id="fstab"><a href="#fstab" class="headerlink" title="fstab"></a>fstab</h5><p>用于定义开机自动挂载的目录。其每行定义一个要挂载的文件系统及其相关属性</p><p>属性从左自右分别为：挂载设备、挂载点、文件系统类型、挂载选项、转储频率、自检次序</p><p>挂载设备：LAEBL、UUID、伪文件系统均可</p><p>挂载选项：defaults表示默认选项，若自定义多个选项，则每个选项之间使用”，“分隔</p><p>转储频率：0表示不备份；1表示每天备份、2表示每隔一天备份</p><p>自检次序：0表示不自检；1表示首先自检，通常为根文件系统；2.3.4….依次自检</p><h4 id="其余命令"><a href="#其余命令" class="headerlink" title="其余命令"></a>其余命令</h4><h5 id="df"><a href="#df" class="headerlink" title="df"></a>df</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示文件系统使用情况</span></span><br><span class="line">df [option]</span><br><span class="line">-l：仅显示本地文件的相关信息</span><br><span class="line">-h：以人可读的形式显示，即单位换算</span><br><span class="line">-i：显示inode使用状态</span><br></pre></td></tr></table></figure><h5 id="du"><a href="#du" class="headerlink" title="du"></a>du</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示文件使用情况而非文件系统</span></span><br><span class="line">du [option] file</span><br><span class="line">-h：以人可读的形式显示，即单位换算</span><br><span class="line">-s：显示目录下所有文件的大小总和</span><br></pre></td></tr></table></figure><h5 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#底层的复制工具</span></span><br><span class="line"><span class="comment">#表示从path1复制文件到path2</span></span><br><span class="line">dd <span class="keyword">if</span>=/path1 of=/path2</span><br><span class="line">bs=<span class="comment">#：表示复制单元大小</span></span><br><span class="line">count=<span class="comment">#：表示复制多少个bs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份MBR</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/sda of=/tmp/mbr.bck bs=512 count=1</span><br><span class="line"><span class="comment">#破坏MBR的bootloader</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/sda bs=256 count=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#特殊设备</span></span><br><span class="line">/dev/null</span><br><span class="line">/dev/zero</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘管理 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM2</title>
      <link href="/2020/01/02/LVM2/"/>
      <url>/2020/01/02/LVM2/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Logical Volume Manager，逻辑卷管理器。在硬盘之上创建一个逻辑层用于管理硬盘分区系统。主要用于实现文件系统的动态增加与减少，类似于btrfs的动态扩展和收缩。</p><a id="more"></a><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><h4 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h4><p>physical volume</p><p>在物理层面组成的磁盘卷，是在硬件磁盘分区基础上加上了lVM相关的管理参数，可以理解为对硬盘的划分，与分区类似。PV可以是一个磁盘也可以是一个分区。</p><h4 id="VG"><a href="#VG" class="headerlink" title="VG"></a>VG</h4><p>volume group</p><p>将多个PV组合而成抽象出的一个逻辑卷组，用以对外提供PE(physical extend)，即PV在逻辑上组合成VG后再经过逻辑划分成PE来使用。</p><h4 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h4><p>physical extend</p><p>在VG里划分的对外提供的块，一般为M单位大小。</p><h4 id="LV"><a href="#LV" class="headerlink" title="LV"></a>LV</h4><p>logical volume</p><p>由多个PE组成的逻辑卷，对LV可以进行挂载和建立文件系统操作。此时可以通过增加或删除PE实现文件系统的动态增加与减少。</p><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><h4 id="PV管理工具"><a href="#PV管理工具" class="headerlink" title="PV管理工具"></a>PV管理工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简要pv信息显示</span></span><br><span class="line">pvs</span><br><span class="line"><span class="comment">#显示pv详细信息</span></span><br><span class="line">pvdisplay device</span><br><span class="line"><span class="comment">#创建pv。新创建的pv没有加入VG，所以不知道PE大小</span></span><br><span class="line">pvcreate device</span><br></pre></td></tr></table></figure><h4 id="VG管理工具"><a href="#VG管理工具" class="headerlink" title="VG管理工具"></a>VG管理工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简要vg信息显示</span></span><br><span class="line">vgs</span><br><span class="line"><span class="comment">#显示vg详细信息</span></span><br><span class="line">vgdisplay</span><br><span class="line"><span class="comment">#创建vg，其中device必须是已被创建的pv</span></span><br><span class="line">vgcreate [option] vgname device</span><br><span class="line"><span class="comment">#扩展vg，device必须是已创建的pv</span></span><br><span class="line">vgextend vgname device</span><br><span class="line"><span class="comment">#缩减vg，device必须是已创建的pv，且删除前要使用pvmove移走pv中的数据到同一vg的其他pv上</span></span><br><span class="line">vgreduce vgname device</span><br><span class="line"><span class="comment">#删除vg</span></span><br><span class="line">vgremove vgname</span><br></pre></td></tr></table></figure><h4 id="LV管理工具"><a href="#LV管理工具" class="headerlink" title="LV管理工具"></a>LV管理工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简要lv信息显示</span></span><br><span class="line">lvs</span><br><span class="line"><span class="comment">#显示lv详细信息</span></span><br><span class="line">lvdisplay</span><br><span class="line"><span class="comment">#创建lv</span></span><br><span class="line">lvcreate [option] lvname vgname</span><br><span class="line">-L：指明卷大小</span><br><span class="line">-n：指明卷名称</span><br><span class="line"><span class="comment">#扩展逻辑卷</span></span><br><span class="line"><span class="comment">#注意：修改逻辑卷后要修改文件系统大小resize2fs lvname</span></span><br><span class="line">lvextend [option] lvnam</span><br><span class="line">-L：指明目标大小</span><br><span class="line"><span class="comment">#缩减逻辑卷</span></span><br><span class="line"><span class="comment">#注意：缩减逻辑卷前要先卸载逻辑卷，然后做文件系统强制检测修复fsck -f lvname，之后修改文件系统大小resize2fs lvname 大小，最后再挂载即可</span></span><br><span class="line">lvreduce [option] lvname</span><br><span class="line">-L：指明目标大小</span><br><span class="line"><span class="comment">#逻辑卷删除</span></span><br><span class="line">lvremove lvname</span><br></pre></td></tr></table></figure><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>快照是LVM提供对lv上文件系统做备份的一个功能。快照也是一个或多个逻辑卷区域，只是文件类型与正常文件不同而已。快照使用写时复制，本质是一个指向要备份数据的inode的硬链接，当没有数据改变时快照和目标数据相同。当目标数据发生变化时，会把要修改的文件先拷贝到快照区域，然后再修改需要修改的目标文件，这样快照里保存的就是未修改前的文件了，这方便备份与还原。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建快照</span></span><br><span class="line"><span class="comment">#-p r：指明只读</span></span><br><span class="line">lvcreate -L 大小 -p r -s snapshot_name original_lv_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用lvconvert合并快照与源数据</span></span><br><span class="line"><span class="comment">#注意：合并前源数据和快照都需要卸载才可以合并，且合并结束后会自动删除快照</span></span><br><span class="line">lvconvert --merge original_lv_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAID</title>
      <link href="/2020/01/02/RAID/"/>
      <url>/2020/01/02/RAID/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Redundant Arrays Of Independent Disks，独立磁盘冗余阵列</p><a id="more"></a><h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><h4 id="RAID-0"><a href="#RAID-0" class="headerlink" title="RAID-0"></a>RAID-0</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>条带卷(stripe)</p><p>将要存储的数据分块然后并行存储到RAID的不同的磁盘下叫做条带。 </p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>读、写性能提升</li><li>可用空间：N*min(S1,S2…)</li><li>无容错能力</li><li>最小磁盘数：2,2+</li></ul><h4 id="RAID-1"><a href="#RAID-1" class="headerlink" title="RAID-1"></a>RAID-1</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>镜像卷(mirror)</p><p>将要存储的数据分块然后在RAID的每个磁盘上都存储一份，即镜像。</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>读性能提升，写性能下降</li><li>可用空间：1*min(S1,S2…)</li><li>有冗余能力</li><li>最小磁盘数：2,2+</li></ul><h4 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID-5"></a>RAID-5</h4><h5 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h5><p>使用异或校验的形式且校验码依次存储在每个磁盘上，即每个磁盘轮流当校验码，目前主要以左对称为主</p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>读写性能提升</li><li>可用空间：(N-1)*min(S1,S2…)</li><li>用冗余能力，最多坏一块</li><li>最小磁盘数：3,3+</li></ul><h4 id="RAID-6"><a href="#RAID-6" class="headerlink" title="RAID-6"></a>RAID-6</h4><h5 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h5><p>在RAID-5基础上增加一块校验盘</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li>读写性能提升</li><li>可用空间：(N-2)*min(S1,S2…)</li><li>有冗余能力，最多坏2块</li><li>最少磁盘数：4,4+</li></ul><h4 id="RAID-10"><a href="#RAID-10" class="headerlink" title="RAID-10"></a>RAID-10</h4><h5 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h5><p>先两两做成RAID-1再做成RAID-0。存储时先按RAID-0条带后再镜像存储到RAID-1中。</p><h5 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h5><ul><li>读写性能提升</li><li>可用空间：N*(S1,S2…)/2</li><li>有冗余能力，每组镜像最多只能坏一块</li></ul><h4 id="RAID-01"><a href="#RAID-01" class="headerlink" title="RAID-01"></a>RAID-01</h4><h5 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h5><p>先两两做成RAID-0再做成RAID-1。存储时先按RAID-1镜像后再条带到RAID-0中。</p><h5 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h5><ul><li>读写性能提升</li><li>可用空间：N*(S1,S2…)/2</li><li>有冗余能力，每组镜像最多只能坏一块</li></ul><h3 id="JBOD"><a href="#JBOD" class="headerlink" title="JBOD"></a>JBOD</h3><p>Just a Bunch Of Disks</p><p>功能：将多块磁盘空间合并一个大的连续空间使用，可用空间一般为磁盘容量总和</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件特殊权限</title>
      <link href="/2020/01/01/%E6%96%87%E4%BB%B6%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/"/>
      <url>/2020/01/01/%E6%96%87%E4%BB%B6%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><p>SUID、SGID、STICKY</p><a id="more"></a><h3 id="安全上下文"><a href="#安全上下文" class="headerlink" title="安全上下文"></a>安全上下文</h3><ol><li>进程以某用户的身份运行：进程是发起此进程用户的代理，因此以此用户的身份和权限完成所有操作</li><li>权限匹配模型：<ol><li>判断进程的属主是否为被访问文件的属主 ，如果是则使用属主权限访问，否则进入2</li><li>判断进程的属主是否属于被访问文件的属组，如果是就使用属组权限，否则进入3</li><li>应用other模型</li></ol></li></ol><h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h3><p>默认情况下用户发起的进程其属主是其发起者。而设置SUID的进程执行时，其属主为进程自己的属主。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/shadow无访问权限</span></span><br><span class="line">[frdqy@localhost ~]$ ls -l /etc/shadow</span><br><span class="line">----------. 1 root root 1434 Dec 31 22:26 /etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="comment">#以frdqy身份无法访问/etc/shadow，因为此时以使用cat的发起者权限来访问/etc/shadow，即other</span></span><br><span class="line">[frdqy@localhost ~]$ cat /etc/shadow</span><br><span class="line">cat: /etc/shadow: Permission denied</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时cat并没有设置SUID权限</span></span><br><span class="line">[frdqy@localhost ~]$ ls -l /bin/cat</span><br><span class="line">-rwxr-xr-x. 1 root root 51856 May 11  2019 /bin/cat</span><br><span class="line"></span><br><span class="line"><span class="comment">#用root给cat设置SUID权限后</span></span><br><span class="line">[root@localhost frdqy]<span class="comment"># chmod u+s /bin/cat</span></span><br><span class="line">[root@localhost frdqy]<span class="comment"># ls -l /bin/cat</span></span><br><span class="line">-rwsr-xr-x. 1 root root 51856 May 11  2019 /bin/cat</span><br><span class="line"></span><br><span class="line"><span class="comment">#frdqy用户即可用cat查看/etc/shadow内容，因为此时cat进程使用的是其属主root权限，而不是进程的发起者</span></span><br><span class="line">[frdqy@localhost ~]$ cat /etc/shadow</span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$RsZ</span>/8mPpOXX17jO8<span class="variable">$yeL</span>/BOfROjigWhsFEEwvF6ZDe3ldr/FJX9vvQFtzJCIWZngO5RhjLVRRgAeSg13ymfLWELIyl5R.sTBbGtP390::0:99999:7:::</span><br></pre></td></tr></table></figure><p>注意：</p><p>如果进程属主原本有执行权限，那么加了SUID后就变成s；如果进程属主原本没有执行权限，那么加SUID后就变成S。</p><h3 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h3><p>通常对目录设置，这样其他用户在该目录下创建文件时，文件的属组全都是目录的属组，主要为了方便同组用户的修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+|g- /dir</span><br></pre></td></tr></table></figure><h3 id="STICKY"><a href="#STICKY" class="headerlink" title="STICKY"></a>STICKY</h3><p>用于解决某一目录下每个用户都可以删除同组其他用户的文件问题，在该目录上设置STICKY后用户只能新建和删除自己的文件，不能删除同组其他用户的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod o+t|o-t /dir</span><br><span class="line"><span class="comment">#/tmp和/var/tmp默认具有STICKY权限</span></span><br></pre></td></tr></table></figure><h3 id="FACL"><a href="#FACL" class="headerlink" title="FACL"></a>FACL</h3><p>facl是文件的额外赋权机制，在原来的ugo之外，另一层让普通用户能控制赋权给另外的用户或组的赋权机制</p><h4 id="getfacl"><a href="#getfacl" class="headerlink" title="getfacl"></a>getfacl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getfacl file</span><br><span class="line">user:USERNAME:MODE</span><br><span class="line">group:GROUPNAME:MODE</span><br><span class="line"><span class="comment">#若username为空则为属主的权限，若groupname为空则为默认属组的权限</span></span><br></pre></td></tr></table></figure><h4 id="setfacl"><a href="#setfacl" class="headerlink" title="setfacl"></a>setfacl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#赋权给用户</span></span><br><span class="line">setfacl -m u:USERNAME:MODE file</span><br><span class="line"><span class="comment">#赋权给组</span></span><br><span class="line">setfacl -m g:GROUPNAME:MODE file</span><br><span class="line"><span class="comment">#撤销赋权</span></span><br><span class="line">setfacl -x u:USERNAME:MODE file</span><br><span class="line">setfacl -x g:GROUPNAME:MODE file</span><br></pre></td></tr></table></figure><h3 id="访问控制顺序"><a href="#访问控制顺序" class="headerlink" title="访问控制顺序"></a>访问控制顺序</h3><p>首先，检查进程属主与被访问文件属主是否相同，相同则使用属主权限；否则检查被访问文件是否定义关于该用户的访问控制链表(facl)，有则应用该访问链表权限；否则检查此进程的属主是否是被访问文件的属组，是则应用属组访问权限，否则检查访问控制链表是否有该用属组的定义，若有则应用该属组权限。最后还不匹配就按other访问。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（七）：脚本实战</title>
      <link href="/2019/12/31/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%84%9A%E6%9C%AC%E5%AE%9E%E6%88%98/"/>
      <url>/2019/12/31/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%84%9A%E6%9C%AC%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="脚本需求"><a href="#脚本需求" class="headerlink" title="脚本需求"></a>脚本需求</h3><ul><li>实现一个脚本工具，该脚本提供类似supervisor功能</li><li>一键查看所有进程运行状态</li><li>按分组查看进程运行状态</li></ul><a id="more"></a><h3 id="拆分脚本功能"><a href="#拆分脚本功能" class="headerlink" title="拆分脚本功能"></a>拆分脚本功能</h3><h4 id="app-statues"><a href="#app-statues" class="headerlink" title="app_statues"></a>app_statues</h4><h5 id="function-get-all-process"><a href="#function-get-all-process" class="headerlink" title="function get_all_process"></a>function get_all_process</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回进程名称列表字符串</span></span><br><span class="line"><span class="comment"># define variables</span></span><br><span class="line">HOME_DIR=<span class="string">"/home/frdqy/shell/day_06/"</span></span><br><span class="line">CONFIG_FILE=<span class="string">"process.cfg"</span></span><br><span class="line"><span class="keyword">function</span> get_all_process</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> `get_all_group`;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        P_LIST=`sed -n <span class="string">'/\['</span><span class="variable">$g</span><span class="string">'/,/^\[/p'</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> | egrep -v <span class="string">"(^$|^\[)"</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$P_LIST</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-get-all-group"><a href="#function-get-all-group" class="headerlink" title="function get_all_group"></a>function get_all_group</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回进程租列表字符串</span></span><br><span class="line"><span class="comment"># define variables</span></span><br><span class="line">HOME_DIR=<span class="string">"/home/frdqy/shell/day_06/"</span></span><br><span class="line">CONFIG_FILE=<span class="string">"process.cfg"</span></span><br><span class="line"><span class="keyword">function</span> get_all_group</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> [ ! -e <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"<span class="variable">$CONFIG_FILE</span> is not exit."</span></span><br><span class="line">       <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       G_LIST=`sed -n <span class="string">'/\[GROUP_LIST\]/,/\[/p'</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> | egrep -v <span class="string">"(^$|^\[)"</span>`</span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$G_LIST</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-get-process-pid-by-name"><a href="#function-get-process-pid-by-name" class="headerlink" title="function get_process_pid_by_name"></a>function get_process_pid_by_name</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为进程pid根据进程名称查pid</span></span><br><span class="line"><span class="keyword">function</span> get_process_pid_by_name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pids=`ps -ef | grep <span class="variable">$1</span> | grep -v grep |grep -v <span class="variable">$0</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$pids</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-get-process-info-by-pid"><a href="#function-get-process-info-by-pid" class="headerlink" title="function get_process_info_by_pid"></a>function get_process_info_by_pid</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为pid，根据pid查询进程状</span></span><br><span class="line"><span class="comment">#详细信息包括：运行状态，PID，MEM信息，CPU信息，时间信息</span></span><br><span class="line"><span class="comment">#此处不能根据进程名查，会有很多无关信息</span></span><br><span class="line"><span class="keyword">function</span> get_process_info_by_pid</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ `ps -ef | awk -v pid=<span class="variable">$1</span> <span class="string">"<span class="variable">$2</span>==pid&#123;print &#125;"</span> | wc -l` -eq 1 ];<span class="keyword">then</span></span><br><span class="line">        proc_statues=<span class="string">"RUNNING"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        proc_statues=<span class="string">"STOPED"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    pro_cpu=`ps aux | awk -v pid=<span class="variable">$1</span> <span class="string">"<span class="variable">$2</span>==pid&#123;print <span class="variable">$3</span>&#125;"</span>`</span><br><span class="line">    pro_mem=`ps aux | awk -v pid=<span class="variable">$1</span> <span class="string">"<span class="variable">$2</span>==pid&#123;print <span class="variable">$4</span>&#125;"</span>`</span><br><span class="line">    pro_stat_time=`ps -p <span class="variable">$1</span> -o lstart | grep -v STARTED`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-is-group-in-config"><a href="#function-is-group-in-config" class="headerlink" title="function is_group_in_config"></a>function is_group_in_config</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为group，判断group是否在config中</span></span><br><span class="line"><span class="comment"># define variables</span></span><br><span class="line">HOME_DIR=<span class="string">"/home/frdqy/shell/day_06/"</span></span><br><span class="line">CONFIG_FILE=<span class="string">"process.cfg"</span></span><br><span class="line"><span class="keyword">function</span> is_group_in_config</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> gn <span class="keyword">in</span> `get_all_group`;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$gn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-get-all-process-group"><a href="#function-get-all-process-group" class="headerlink" title="function get_all_process_group"></a>function get_all_process_group</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为group，根据group获取process</span></span><br><span class="line"><span class="keyword">function</span> get_all_process_group</span><br><span class="line">&#123;</span><br><span class="line">   is_group_in_config <span class="variable">$1</span></span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        p_list=`sed -n <span class="string">"/\[<span class="variable">$1</span>/,/\[/p"</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> | egrep <span class="string">"(^$|^#|^\[)"</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$p_list</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"GroupName <span class="variable">$1</span> is not in process.cfg"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-get-group-by-process"><a href="#function-get-group-by-process" class="headerlink" title="function get_group_by_process"></a>function get_group_by_process</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据进程获取组名，参数为process</span></span><br><span class="line"><span class="keyword">function</span> get_group_by_process</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span> gn <span class="keyword">in</span> `get_all_group`</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process_group <span class="variable">$gn</span>`</span><br><span class="line">       <span class="keyword">do</span></span><br><span class="line">           <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">               <span class="built_in">echo</span> <span class="variable">$gn</span></span><br><span class="line">           <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">   <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-format-print"><a href="#function-format-print" class="headerlink" title="function format_print"></a>function format_print</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接收两个参数，第一个为process，第二个为group</span></span><br><span class="line"><span class="keyword">function</span> format_print</span><br><span class="line">&#123;</span><br><span class="line">    ps -ef | grep <span class="variable">$1</span> | grep -v grep | grep -v <span class="variable">$this_pid</span> &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        pids=`get_process_pid_by_name <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> <span class="variable">$pids</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            get_process_info_by_pid <span class="variable">$pid</span></span><br><span class="line">            awk -v p_name=<span class="variable">$1</span> -v g_name=<span class="variable">$2</span> -v p_status=<span class="variable">$pro_stat_time</span> -v p_cpu=<span class="variable">$pro_cpu</span> -v p_mem=<span class="variable">$pro_mem</span> -v p_start_time=<span class="variable">$pro_stat_time</span> <span class="string">'BEGIN&#123;printf "%-10s%-10s%-5s%-5s%-5s%-5s%-15s\n",p_name,g_name,p_status,p_cpu,p_mem,p_start_time&#125;'</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="function-is-process-in-config"><a href="#function-is-process-in-config" class="headerlink" title="function is_process_in_config"></a>function is_process_in_config</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数为process</span></span><br><span class="line"><span class="comment">#坑点：此处一开始将return1写在循环里导致直接跳出</span></span><br><span class="line"><span class="keyword">function</span> is_process_in_config</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>无参数    列出配置文件中所有经常的运行信息</li><li>-g GroupName      列出GroupName组内的所有进程</li><li>process_name1    列出指定进程的运行信息</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 0 ];<span class="keyword">then</span>    </span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"-g"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        <span class="keyword">for</span> gn <span class="keyword">in</span> <span class="variable">$@</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process_group <span class="variable">$gn</span>`</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">               is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">done</span>      </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> pn <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            gn=`get_group_by_process <span class="variable">$pn</span>`</span><br><span class="line">            is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        gn=`get_group_by_process <span class="variable">$pn</span>`</span><br><span class="line"><span class="comment">#echo `is_process_in_config $pn`</span></span><br><span class="line">        is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Func:Get process statues in process.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define variables</span></span><br><span class="line">HOME_DIR=<span class="string">"/home/frdqy/shell/day_06/"</span></span><br><span class="line">CONFIG_FILE=<span class="string">"process.cfg"</span></span><br><span class="line">this_pid=$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_all_group</span><br><span class="line">&#123;</span><br><span class="line">    G_LIST=`sed -n <span class="string">'/\[GROUP_LIST\]/,/\[/p'</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span>| egrep -v <span class="string">"(^$|^\[)"</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$G_LIST</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_all_process</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> `get_all_group`;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        P_LIST=`sed -n <span class="string">'/\['</span><span class="variable">$g</span><span class="string">'/,/^\[/p'</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> | egrep -v <span class="string">"(^$|^\[)"</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$P_LIST</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_process_pid_by_name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pids=`ps -ef | grep <span class="variable">$1</span> | grep -v grep |grep -v <span class="variable">$this_pid</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$pids</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_process_info_by_pid</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ `ps -ef | awk -v pid=<span class="variable">$1</span> <span class="string">'$2==pid&#123;print&#125;'</span> | wc -l` -eq 1 ];<span class="keyword">then</span></span><br><span class="line">        proc_statues=<span class="string">"RUNNING"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        proc_statues=<span class="string">"STOPED"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    pro_cpu=`ps aux | awk -v pid=<span class="variable">$1</span> <span class="string">'$2==pid&#123;print $3&#125;'</span>`</span><br><span class="line">    pro_mem=`ps aux | awk -v pid=<span class="variable">$1</span> <span class="string">'$2==pid&#123;print $4&#125;'</span>`</span><br><span class="line">    pro_stat_time=`ps -p <span class="variable">$1</span> -o lstart | grep -v STARTED`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is_group_in_config</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> gn <span class="keyword">in</span> `get_all_group`;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$gn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_all_process_group</span><br><span class="line">&#123;</span><br><span class="line">   is_group_in_config <span class="variable">$1</span></span><br><span class="line">   <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        p_list=`sed -n <span class="string">"/\[<span class="variable">$1</span>/,/\[/p"</span> <span class="variable">$HOME_DIR</span>/<span class="variable">$CONFIG_FILE</span> | egrep -v <span class="string">"(^$|^#|^\[)"</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$p_list</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"GroupName <span class="variable">$1</span> is not in process.cfg"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get_group_by_process</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span> gn <span class="keyword">in</span> `get_all_group`</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">       <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process_group <span class="variable">$gn</span>`</span><br><span class="line">       <span class="keyword">do</span></span><br><span class="line">           <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">               <span class="built_in">echo</span> <span class="variable">$gn</span></span><br><span class="line">           <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">   <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> format_print</span><br><span class="line">&#123;</span><br><span class="line">    ps -ef | grep <span class="variable">$1</span> | grep -v grep | grep -v <span class="variable">$this_pid</span> &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        pids=`get_process_pid_by_name <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">for</span> pid <span class="keyword">in</span> <span class="variable">$pids</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            get_process_info_by_pid <span class="variable">$pid</span></span><br><span class="line">            awk -v p_name=<span class="variable">$1</span> -v g_name=<span class="variable">$2</span> -v p_id=<span class="variable">$pid</span> -v p_status=<span class="variable">$proc_statues</span> -v p_cpu=<span class="variable">$pro_cpu</span> -v p_mem=<span class="variable">$pro_mem</span> -v p_start_time=<span class="string">"<span class="variable">$pro_stat_time</span>"</span> <span class="string">'BEGIN&#123;printf "%-20s%-15s%-15s%-15s%-15s%-15s%-15s\n",p_name,g_name,p_id,p_status,p_cpu,p_mem,p_start_time&#125;'</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        awk -v p_name=<span class="variable">$1</span> -v g_name=<span class="variable">$2</span> <span class="string">'BEGIN&#123;printf "%-20s%-15s%-15s%-15s%-15s%-15s%-15s\n",p_name,g_name,"NULL","NULL","NULL","NULL","NULL"&#125;'</span></span><br><span class="line">    <span class="keyword">fi</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is_process_in_config</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$pn</span>"</span> == <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -gt 0 ];<span class="keyword">then</span>    </span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"-g"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        <span class="keyword">for</span> gn <span class="keyword">in</span> <span class="variable">$@</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process_group <span class="variable">$gn</span>`</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">               is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">done</span>      </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> pn <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            gn=`get_group_by_process <span class="variable">$pn</span>`</span><br><span class="line">            is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> pn <span class="keyword">in</span> `get_all_process`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        gn=`get_group_by_process <span class="variable">$pn</span>`</span><br><span class="line"><span class="comment">#echo `is_process_in_config $pn`</span></span><br><span class="line">        is_process_in_config <span class="variable">$pn</span> &amp;&amp; format_print <span class="variable">$pn</span> <span class="variable">$gn</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此，shell编程的专项学习告一段落，下面的练习都将在学习其他知识时进行巩固。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（六）：mysql</title>
      <link href="/2019/12/30/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Amysql/"/>
      <url>/2019/12/30/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Amysql/</url>
      
        <content type="html"><![CDATA[<h3 id="安装mariadb"><a href="#安装mariadb" class="headerlink" title="安装mariadb"></a>安装mariadb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mariadb-server</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h3><h4 id="建表脚本"><a href="#建表脚本" class="headerlink" title="建表脚本"></a>建表脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">--student.sql</span><br><span class="line">--create tables</span><br><span class="line">--student tables</span><br><span class="line">create table &#96;student&#96;(</span><br><span class="line">    &#96;s_id&#96; varchar(20),</span><br><span class="line">    &#96;s_name&#96; varchar(20) not null default &#39;&#39;,</span><br><span class="line">    &#96;s_birth&#96; varchar(20)not null default &#39;&#39;,</span><br><span class="line">    &#96;s_sex&#96; varchar(20) not null default &#39;&#39;,</span><br><span class="line">    primary key(&#96;s_id&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">--course tables</span><br><span class="line">create table &#96;course&#96;(</span><br><span class="line">    &#96;c_id&#96; varchar(20),</span><br><span class="line">    &#96;c_name&#96; varchar(20)not null default &#39;&#39;,</span><br><span class="line">    &#96;t_id&#96; varchar(20) not null,</span><br><span class="line">    primary key(&#96;c_id&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">--teacher table</span><br><span class="line">create table &#96;teacher&#96;(</span><br><span class="line">    &#96;t_id&#96; varchar(20),</span><br><span class="line">    &#96;t_name&#96; varchar(20)not null default &#39;&#39;,</span><br><span class="line">    primary key(&#96;t_id&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">--score table</span><br><span class="line">create table &#96;score&#96;(</span><br><span class="line">    &#96;s_id&#96; varchar(20),</span><br><span class="line">    &#96;c_id&#96; varchar(20),</span><br><span class="line">    &#96;s_score&#96; int(3),</span><br><span class="line">    primary key(&#96;s_id&#96;,&#96;c_id&#96;)</span><br><span class="line">);</span><br><span class="line">--insert student table</span><br><span class="line">insert into student values(&#39;1001&#39;,&#39;zhaolei&#39;,&#39;1990-1001-1001&#39;,&#39;male&#39;);</span><br><span class="line">insert into student values(&#39;1002&#39;,&#39;lihang&#39;,&#39;1990-12-21&#39;,&#39;male&#39;);</span><br><span class="line">insert into student values(&#39;1003&#39;,&#39;yanwen&#39;,&#39;1990-1005-20&#39;,&#39;male&#39;);</span><br><span class="line">insert into student values(&#39;1004&#39;,&#39;hongfei&#39;,&#39;1990-1008-1006&#39;,&#39;male&#39;);</span><br><span class="line">insert into student values(&#39;1005&#39;,&#39;ligang&#39;,&#39;1991-12-1001&#39;,&#39;female&#39;);</span><br><span class="line">insert into student values(&#39;1006&#39;,&#39;zhousheng&#39;,&#39;1992-1003-1001&#39;,&#39;female&#39;);</span><br><span class="line">insert into student values(&#39;1007&#39;,&#39;wangjun&#39;,&#39;1989-1007-1001&#39;,&#39;female&#39;);</span><br><span class="line">insert into student values(&#39;1008&#39;,&#39;zhoufei&#39;,&#39;1990-1001-20&#39;,&#39;female&#39;);</span><br><span class="line">--insert course table</span><br><span class="line">insert into teacher values(&#39;1001&#39;,&#39;aidisheng&#39;);</span><br><span class="line">insert into teacher values(&#39;1002&#39;,&#39;aiyinsitan&#39;);</span><br><span class="line">insert into teacher values(&#39;1003&#39;,&#39;qiansanqiang&#39;);</span><br><span class="line">--insert score table</span><br><span class="line">insert into score values(&#39;1001&#39;,&#39;1001&#39;,80);</span><br><span class="line">insert into score values(&#39;1001&#39;,&#39;1002&#39;,90);</span><br><span class="line">insert into score values(&#39;1001&#39;,&#39;1003&#39;,99);</span><br><span class="line">insert into score values(&#39;1002&#39;,&#39;1001&#39;,70);</span><br><span class="line">insert into score values(&#39;1002&#39;,&#39;1002&#39;,60);</span><br><span class="line">insert into score values(&#39;1002&#39;,&#39;1003&#39;,80);</span><br><span class="line">insert into score values(&#39;1003&#39;,&#39;1001&#39;,80);</span><br><span class="line">insert into score values(&#39;1003&#39;,&#39;1002&#39;,80);</span><br><span class="line">insert into score values(&#39;1003&#39;,&#39;1003&#39;,50);</span><br><span class="line">insert into score values(&#39;1004&#39;,&#39;1001&#39;,20);</span><br><span class="line">insert into score values(&#39;1004&#39;,&#39;1002&#39;,30);</span><br></pre></td></tr></table></figure><h4 id="建数据库"><a href="#建数据库" class="headerlink" title="建数据库"></a>建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database school;</span><br></pre></td></tr></table></figure><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql school &lt; student.sql</span><br></pre></td></tr></table></figure><h4 id="授权用户"><a href="#授权用户" class="headerlink" title="授权用户"></a>授权用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--授予dbuser用户在所有网段都可以对school数据库进行操作，密码为123456</span><br><span class="line">grant all on school.* to dbuser@&#39;%&#39; identified by &#39;123456&#39;</span><br><span class="line">grant all on school.* to dbuser@&#39;localhost&#39; identified by &#39;123456&#39;</span><br><span class="line">--&#39;%&#39;表示所有主机都可以访问</span><br></pre></td></tr></table></figure><h4 id="使用授权用户登录"><a href="#使用授权用户登录" class="headerlink" title="使用授权用户登录"></a>使用授权用户登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--u和p与参数间可以省略</span><br><span class="line">mysql -udbuser -p123456 -h localhost</span><br></pre></td></tr></table></figure><h3 id="mysql命令参数"><a href="#mysql命令参数" class="headerlink" title="mysql命令参数"></a>mysql命令参数</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>-u</td><td>用户名</td></tr><tr><td>-p</td><td>用户密码</td></tr><tr><td>-h</td><td>服务器ip地址</td></tr><tr><td>-D</td><td>链接的数数据库</td></tr><tr><td>-N</td><td>不输出列信息</td></tr><tr><td>-B</td><td>使用tab键代替默认交互分隔符</td></tr><tr><td>-e</td><td>执行sql语句</td></tr><tr><td>-E</td><td>垂直输出</td></tr><tr><td>-H</td><td>以HTML格式输出</td></tr><tr><td>-X</td><td>以XML格式输出</td></tr></tbody></table><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>-B用来不显示周围一圈分隔符时建议放在选项最后，在-e之前。</p></blockquote><h4 id="查询实例"><a href="#查询实例" class="headerlink" title="查询实例"></a>查询实例</h4><ul><li>写一个脚本，该脚本可以接收一个参数，参数为需要执行的sql语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mysql -u dbuser -p123456 -D school -e <span class="string">"<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><ul><li>查询mysql任意表的数据，并将查询到的结果保存到HTML文件中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mysql -u dbuser -p123456 -D school -H -e <span class="string">"<span class="variable">$1</span>"</span> &gt; <span class="variable">$2</span></span><br></pre></td></tr></table></figure><ul><li>查询mysql任意表的数据，并将查询到的结果保存到XML文件中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mysql -u dbuser -p123456 -D school -X -e <span class="string">"<span class="variable">$1</span>"</span> &gt; <span class="variable">$2</span></span><br></pre></td></tr></table></figure><h4 id="导入实例"><a href="#导入实例" class="headerlink" title="导入实例"></a>导入实例</h4><h5 id="需求一"><a href="#需求一" class="headerlink" title="需求一"></a>需求一</h5><p>处理文本中的数据，将文本中的数据插入mysql</p><blockquote><p>​    1010    jerry    1991-12-13    male</p><p>​    1011    mike    1991-12-13    female</p><p>​    1012    tracy    1991-12-13    male</p><p>​    1013    kobe    1991-12-13    female</p><p>​    1014    allen    1991-12-13    male</p><p>​    1015    curry    1991-12-13    male</p><p>​    1016    tom    1991-12-13    female</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">user=<span class="string">"dbuser"</span></span><br><span class="line">passwd=<span class="string">"123456"</span></span><br><span class="line">database=<span class="string">"school"</span></span><br><span class="line">mysql_conn=<span class="string">"mysql -u"</span><span class="variable">$user</span><span class="string">" -p"</span><span class="variable">$passwd</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">cat data.txt | <span class="keyword">while</span> <span class="built_in">read</span> id name birth sex</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="variable">$mysql_conn</span> -D <span class="variable">$database</span> -e <span class="string">"insert into student1 values('<span class="variable">$id</span>','<span class="variable">$name</span>','<span class="variable">$birth</span>','<span class="variable">$sex</span>')"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="需求二"><a href="#需求二" class="headerlink" title="需求二"></a>需求二</h5><p>同上，但是分隔符变了</p><blockquote><p>​    1010|jerry|1991-12-13|male</p><p>​    1011|mike|1991-12-13|female</p><p>​    1012|tracy|1991-12-13|male</p><p>​    1013|kobe|1991-12-13|female</p><p>​    1014|allen|1991-12-13|male</p><p>​    1015|curry|1991-12-13|male</p><p>​    1016|tom|1991-12-13|female</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">user=<span class="string">"dbuser"</span></span><br><span class="line">passwd=<span class="string">"123456"</span></span><br><span class="line">database=<span class="string">"school"</span></span><br><span class="line"><span class="comment">#mysql_conn="mysql -u"$user" -p"$passwd""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入分隔符指定</span></span><br><span class="line">IFS=<span class="string">"|"</span></span><br><span class="line"></span><br><span class="line">cat data2.txt | <span class="keyword">while</span> <span class="built_in">read</span> id name birth sex</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mysql -u <span class="string">"dbuser"</span> -p<span class="string">"<span class="variable">$passwd</span>"</span> -D <span class="variable">$database</span> -e <span class="string">"insert into student2 values('<span class="variable">$id</span>','<span class="variable">$name</span>','<span class="variable">$birth</span>','<span class="variable">$sex</span>')"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p>需求二有一个坑，在于注释的sql语句那样写在变量里会提示找不到命令，可能时管道符号冲突问题，shll真不规范！！</p><h3 id="mysqldump备份"><a href="#mysqldump备份" class="headerlink" title="mysqldump备份"></a>mysqldump备份</h3><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [OPTIONS] database [tables]</span><br></pre></td></tr></table></figure><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>-u</td><td>用户名</td></tr><tr><td>-p</td><td>密码</td></tr><tr><td>-h</td><td>服务器IP地址</td></tr><tr><td>-d</td><td>等价于–no-data，只导出表结构</td></tr><tr><td>-t</td><td>等价于–no-create-info，只导出数据，不导出建表语句</td></tr><tr><td>-A</td><td>等价于–all-databases</td></tr><tr><td>-B</td><td>等价于–databases，导出一个或多个数据库</td></tr></tbody></table><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>将school中的score备份，并且将备份数据通过ftp传输到xxx.xxx.xxx.xxx的/data/backup目录下</p><p>补充知识</p><blockquote><p>open xxx.xxx.xxx.xxx：用于打开远端连接</p><p>user 用户名 密码：用于登录</p><p>-i：不交互</p><p><strong>-n：自动登录</strong></p><p>-v：显示详细信息</p><p><strong>&lt;&lt; EOF：表示下面将输入长命令，直到遇到EOF结束，且EOF最后一行必须顶格写</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">db_user=<span class="string">"dbuser"</span></span><br><span class="line">db_passwd=<span class="string">"123456"</span></span><br><span class="line"></span><br><span class="line">ftp_user=<span class="string">"ftp_user"</span></span><br><span class="line">ftp_passwd=<span class="string">"redhat"</span></span><br><span class="line">ftp_host=<span class="string">"192.168.184.3"</span></span><br><span class="line"></span><br><span class="line">dst_dir=<span class="string">"/data/backup"</span></span><br><span class="line"></span><br><span class="line">time_date=<span class="string">"`date +%Y%m%d%H%M%S`"</span></span><br><span class="line">file_name=<span class="string">"school_score_<span class="variable">$&#123;time_date&#125;</span>.sql"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> auto_ftp</span><br><span class="line">&#123;</span><br><span class="line">    ftp -niv &lt;&lt; EOF</span><br><span class="line">        open <span class="variable">$ftp_host</span></span><br><span class="line">        user <span class="variable">$ftp_user</span> <span class="variable">$ftp_passwd</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$dst_dir</span></span><br><span class="line">        put <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">bye</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqldump -u<span class="string">"<span class="variable">$db_user</span>"</span> -p<span class="string">"<span class="variable">$db_passwd</span>"</span> school score &gt; ./<span class="variable">$file_name</span> &amp;&amp; auto_ftp ./<span class="variable">$file_name</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（五）：awk</title>
      <link href="/2019/12/29/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Aawk/"/>
      <url>/2019/12/29/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Aawk/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>awk是一个文本处理工具，通常用于处理数据并生成结果报告。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;&#125;pattern&#123;commands&#125;END&#123;&#125;'</span> file_name</span><br><span class="line">stdout | awk <span class="string">'BEGIN&#123;&#125;pattern&#123;commands&#125;END&#123;&#125;'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="语法格式说明"><a href="#语法格式说明" class="headerlink" title="语法格式说明"></a>语法格式说明</h4><table><thead><tr><th>语法格式</th><th>解释</th></tr></thead><tbody><tr><td>BEGIN{}</td><td>正式处理数据之前执行</td></tr><tr><td>pattern</td><td>匹配模式</td></tr><tr><td>{commands}</td><td>处理命令，可能多行</td></tr><tr><td>END{}</td><td>处理完所有匹配数据后执行</td></tr></tbody></table><h3 id="内置变量对照表"><a href="#内置变量对照表" class="headerlink" title="内置变量对照表"></a>内置变量对照表</h3><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>整行内容</td></tr><tr><td>$1-$n</td><td>当前行的第1-n个字段</td></tr><tr><td>NF(Number Field)</td><td>当前行的字段个数</td></tr><tr><td>NR(Number Row)</td><td>当前行行号，从1开始</td></tr><tr><td>FNR(File Number Row)</td><td>多文件每个文件行号单独计数，从0开始</td></tr><tr><td>FS(Field Separator)</td><td>输入字段分隔符，默认空格或tab</td></tr><tr><td>RS(Row Separator)</td><td>输入行分隔符，默认回车换行</td></tr><tr><td>OFS(Output Field Separator)</td><td>输出字段分隔符，默认空格</td></tr><tr><td>ORS(Output Row Separator)</td><td>输出行分隔符，默认回车换行</td></tr><tr><td>FILENAME</td><td>当前输入的文件名字</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr></tbody></table><h3 id="printf详解"><a href="#printf详解" class="headerlink" title="printf详解"></a>printf详解</h3><h4 id="printf格式说明符"><a href="#printf格式说明符" class="headerlink" title="printf格式说明符"></a>printf格式说明符</h4><table><thead><tr><th>格式符</th><th>含义</th></tr></thead><tbody><tr><td><strong>%s</strong></td><td><strong>打印字符串</strong></td></tr><tr><td><strong>%d</strong></td><td><strong>打印十进制数</strong></td></tr><tr><td>%f</td><td>打印浮点数</td></tr><tr><td>%x</td><td>打印十六进制数</td></tr><tr><td>%o</td><td>打印八进制数</td></tr><tr><td>%e</td><td>打印数字科学计数法形式</td></tr><tr><td>%c</td><td>打印单个字符的ASCII</td></tr></tbody></table><h4 id="printf修饰符"><a href="#printf修饰符" class="headerlink" title="printf修饰符"></a>printf修饰符</h4><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>左对齐</td></tr><tr><td>+</td><td>右对齐</td></tr><tr><td>#</td><td>八进制加0，十六进制加0x</td></tr></tbody></table><h4 id="格式符实例"><a href="#格式符实例" class="headerlink" title="格式符实例"></a>格式符实例</h4><ul><li>以字符串格式打印/etc/passwd中的第7个字段，以”:”作为分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%s\n",$7&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以10进制格式打印/etc/passwd中的第3个字段，以”:”作为分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%d\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以浮点数进制格式打印/etc/passwd中的第3个字段，以”:”作为分隔符，小数点保留2位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%0.2f\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以16进制格式打印/etc/passwd中的第3个字段，以”:”作为分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%#x\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以8进制格式打印/etc/passwd中的第3个字段，以”:”作为分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%#o\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以科学技术格式打印/etc/passwd中的第3个字段，以”:”作为分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;printf "%e\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><table><thead><tr><th>语法格式</th><th>含义</th></tr></thead><tbody><tr><td>/RegExp/</td><td>按正则匹配</td></tr><tr><td>关系运算</td><td>按关系匹配</td></tr></tbody></table><h4 id="正则实例"><a href="#正则实例" class="headerlink" title="正则实例"></a>正则实例</h4><ul><li>匹配/etc/passwd文件行中包含有root字符串的所有行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;/root/&#123;printf "%s\n",$0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>匹配/etc/passwd文件行中以frdqy开头的所有行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;/^frdqy/&#123;printf "%s\n",$0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h4 id="关系实例"><a href="#关系实例" class="headerlink" title="关系实例"></a>关系实例</h4><ul><li>以:为分隔符，匹配/etc/passwd文件中第3个字段小于50的所有行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$3&lt;50&#123;printf "%d\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以:为分隔符，匹配/etc/passwd文件中第3个字段大于50的所有行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$3&gt;50&#123;printf "%d\n",$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以:为分隔符，匹配/etc/passwd文件中第7个字段为/bin/bash的所有行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$7=="/bin/bash"&#123;printf "%s\n",$7&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以:为分隔符，匹配/etc/passwd文件中第7个字段不为/bin/bash的所有行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$7!="/bin/bash"&#123;printf "%s\n",$7&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以:为分隔符，匹配/etc/passwd文件中第3个字段包含3个以上数字的所有行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$3~/[0-9]&#123;3,&#125;/&#123;printf "%s\n",$0&#125;'</span> /etc/passwd</span><br><span class="line"><span class="comment">#~表示匹配正则，!~表示不匹配正则</span></span><br></pre></td></tr></table></figure><h4 id="布尔实例"><a href="#布尔实例" class="headerlink" title="布尔实例"></a>布尔实例</h4><ul><li>以:为分隔符，匹配/etc/passwd文件中包含root或frdqy的所有</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$1=="root" || $1=="frdqy"&#123;printf "%s\n",$0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>以:为分隔符，匹配/etc/passwd文件中第3个字段小于50并且第4个字段大于50的所有行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;$3&lt;50 &amp;&amp; $4&gt;50&#123;printf "%s\n",$0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th>运算符</th><th align="left">含义</th></tr></thead><tbody><tr><td>+</td><td align="left">加</td></tr><tr><td>-</td><td align="left">减</td></tr><tr><td>*</td><td align="left">乘</td></tr><tr><td>除</td><td align="left">/</td></tr><tr><td>%</td><td align="left">模</td></tr><tr><td>^或**</td><td align="left">乘方</td></tr><tr><td>++x</td><td align="left">返回变量x之前+1</td></tr><tr><td>x++</td><td align="left">返回变量x之后+1</td></tr><tr><td>x+=y</td><td align="left">x=x+y</td></tr></tbody></table><h4 id="算数实例"><a href="#算数实例" class="headerlink" title="算数实例"></a>算数实例</h4><ul><li>使用awk计算/etc/services中空白行的数量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^$/&#123;sum++&#125;END&#123;printf "%d\n",sum&#125;'</span> /etc/services</span><br></pre></td></tr></table></figure><ul><li><p>计算下列每个同学的平均分数，将其打印在最后一列后</p><blockquote><p>Allen,80,90,96,98</p><p>Mike,93,98,92,91</p><p>Zhang,78,76,87,92</p><p>Jerry,86,89,68,92</p><p>Li,78,88,98,100</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=","&#125;&#123;sum=$2+$3+$4+$5;avg=sum/(NF-1);printf "%-8s%-8d%-8d%-8d%-8d%-0.2f\n",$1,$2,$3,$4,$5,avg&#125;'</span> ./student.txt</span><br></pre></td></tr></table></figure><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)</span><br><span class="line">动作1</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)</span><br><span class="line">动作2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">动作3</span><br></pre></td></tr></table></figure><h4 id="条件实例"><a href="#条件实例" class="headerlink" title="条件实例"></a>条件实例</h4><ul><li>以:为分隔符，只打印/etc/passwd中第3个字段的数值在50-100范围内的行信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125;&#123;if($3&lt;=100&amp;&amp;$3&gt;=50)print $0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li><p>计算下列每个学生的平均分数，并且只打印平均分大于90的学生姓名和分数信息</p><blockquote><p>Allen,80,90,96,98</p><p>Mike,93,98,92,91</p><p>Zhang,78,76,87,92</p><p>Jerry,86,89,68,92</p><p>Li,78,88,98,100</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#过长，写在scripts.awk中</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    FS=<span class="string">","</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    sum=<span class="variable">$2</span>+<span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span>;</span><br><span class="line">    avg=sum/(NF-1);</span><br><span class="line">    <span class="keyword">if</span>(avg&gt;90)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-8s%-8d%-8d%-8d%-8d%-0.2f\n"</span>,<span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>,avg</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#用-f选项调用</span></span><br><span class="line">awk -f ./scripts.awk ./student.txt</span><br></pre></td></tr></table></figure><h4 id="循环语句-while"><a href="#循环语句-while" class="headerlink" title="循环语句-while"></a>循环语句-while</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)</span><br><span class="line">动作</span><br></pre></td></tr></table></figure><h4 id="循环语句-do-while"><a href="#循环语句-do-while" class="headerlink" title="循环语句-do while"></a>循环语句-do while</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">动作</span><br><span class="line"><span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure><h4 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句-for"></a>循环语句-for</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化计数器;测试计数器;计数器变更)</span><br><span class="line">动作</span><br></pre></td></tr></table></figure><h4 id="循环实例"><a href="#循环实例" class="headerlink" title="循环实例"></a>循环实例</h4><ul><li>计算1+2+…+100的和，使用while、do while、for三种实现</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#do-while</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    i=0;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">    i++</span><br><span class="line">    sum+=i</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;100)</span><br><span class="line">    <span class="built_in">print</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#for</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;=100;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数名</th><th>解释</th><th>函数返回值</th></tr></thead><tbody><tr><td>length</td><td>计算字符串长度</td><td>整数长度值</td></tr><tr><td>index(str1,str2)</td><td>在str1中找str2位置</td><td>返回索引，从1开始</td></tr><tr><td>tolower(str)</td><td>转换为小写</td><td>转换后的字符串</td></tr><tr><td>toupper(str)</td><td>转换为大写</td><td>转换后的字符串</td></tr><tr><td>substr(str,m,n)</td><td>从str的m个字符开始，截取n位</td><td>截取后的子串</td></tr><tr><td>match(str,RE)</td><td>在str中按RE查找</td><td>返回索引</td></tr><tr><td>split(str,arr,fs)</td><td>按fs切割字符串，结果存arr中</td><td>切割后的子串个数</td></tr><tr><td>sub(RE,repStr,str)</td><td>在str中找符合RE的子串，将其换为repStr，换一个</td><td>替换个数</td></tr><tr><td>gsub(RE,repStr,str)</td><td>在str中找符合RE的子串，将其换为repStr，换所有</td><td>替换个数</td></tr></tbody></table><h4 id="字符串处理实例"><a href="#字符串处理实例" class="headerlink" title="字符串处理实例"></a>字符串处理实例</h4><ul><li>以:为分隔符，返回/etc/passwd中每行每个字段的长度</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    FS=<span class="string">":"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=1;i&lt;=NF;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=NF)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"%d:"</span>,length(<span class="variable">$i</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==NF)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"%d"</span>,length(<span class="variable">$i</span>)</span><br><span class="line">            <span class="built_in">printf</span> <span class="string">"\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>搜索字符串”I have a dream”中出现”ea”字符串的位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    i=index(<span class="string">"I have a dream"</span>,<span class="string">"ea"</span>)</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#match,可见match功能包含了index</span></span><br><span class="line">BEGIN&#123;</span><br><span class="line">    i=index(<span class="string">"I have a dream"</span>,<span class="string">"ea"</span>)</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字符串”Hadoop is a bigdata Framework”全部转换为小写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=tolower(<span class="string">"Hadoop is a bigdata Framework"</span>)</span><br><span class="line">    <span class="built_in">print</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字符串”Hadoop is a bigdata Framework”全部转换为大写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=toupper(<span class="string">"Hadoop is a bigdata Framework"</span>)</span><br><span class="line">    <span class="built_in">print</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将字符串”Hadoop Kafka Spark Storm HDFS YARN Zookeeper”分割保存到数组arr中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=<span class="string">"Hadoop Kafka Spark Storm HDFS YARN Zookeeper"</span></span><br><span class="line">    len=split(str,arr,<span class="string">" "</span>)</span><br><span class="line">    i=1</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print</span> arr[i]</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>搜素字符串”Transaction 2345 Start:Select * from master”第一个数字出现的位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=<span class="string">"Transaction 2345 Start:Select * from master"</span></span><br><span class="line">    i=match(str,<span class="string">"[0-9]"</span>)</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>截取字符串”Transaction start”的子串，截取条件从第4个字符开始，截取5位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=<span class="string">"Transaction start"</span></span><br><span class="line">    str1=substr(str,4,5)</span><br><span class="line">    <span class="built_in">print</span> str1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>替换字符串”Transaction 243 Start,Event ID:9002”中第一个匹配到数字串替换为$符号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=<span class="string">"Transaction 243 Start,Event ID:9002"</span></span><br><span class="line">    sub(<span class="string">"[0-9]+"</span>,<span class="string">"$"</span>,str)</span><br><span class="line">    <span class="built_in">print</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>替换字符串”Transaction 243 Start,Event ID:9002”中所有匹配到数字串替换为$符号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    str=<span class="string">"Transaction 243 Start,Event ID:9002"</span></span><br><span class="line">    gsub(<span class="string">"[0-9]+"</span>,<span class="string">"$"</span>,str)</span><br><span class="line">    <span class="built_in">print</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-v</td><td>参数传递</td></tr><tr><td><strong>-f</strong></td><td><strong>指定脚本文件</strong></td></tr><tr><td>-F</td><td>指定分隔符</td></tr><tr><td>-V</td><td>查看awk版本号</td></tr></tbody></table><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在使用参数传递时，引用变量建议全部使用""，否则如果引用的字符串内出现空格则会报错。</span></span><br><span class="line">num=20</span><br><span class="line">var=<span class="string">"Hello World"</span></span><br><span class="line"><span class="comment">#下面命令会报错，原因在于var变量字符串包含空格</span></span><br><span class="line">awk -v num2=<span class="variable">$num</span> -v var1=<span class="variable">$var</span> <span class="string">'BEGIN&#123;print num2,var1&#125;'</span></span><br><span class="line"><span class="comment">#遇到上述问题需要将引用用""包含起来</span></span><br><span class="line">awk -v <span class="string">"num2=<span class="variable">$num</span>"</span> -v <span class="string">"var1=<span class="variable">$var</span>"</span> <span class="string">'BEGIN&#123;print num2,var1&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="shell中数组的用法"><a href="#shell中数组的用法" class="headerlink" title="shell中数组的用法"></a>shell中数组的用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义,各元素用空格或tab分隔</span></span><br><span class="line">array=(<span class="string">"Allen"</span> <span class="string">"Mike"</span> <span class="string">"Messi"</span>)</span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>echo ${array[2]}</td><td>打印元素</td></tr><tr><td>echo ${ #array[@]}</td><td>打印元素个数</td></tr><tr><td>echo ${ #array[3]}</td><td>打印元素长度</td></tr><tr><td>array[3]=”Li”</td><td>数组元素赋值</td></tr><tr><td>unset array[2];unset array</td><td>删除元素</td></tr><tr><td>echo ${array[@]:1:3}</td><td>分片访问</td></tr><tr><td>${array[@]/e/E}</td><td>替换第一个e为E</td></tr><tr><td>${array[@]//e/E}</td><td>替换所有的e为E</td></tr></tbody></table><h4 id="awk中数组的用法"><a href="#awk中数组的用法" class="headerlink" title="awk中数组的用法"></a>awk中数组的用法</h4><p>既可以数字作为数组下标也可以字符串作为数组下标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测数组第i+1下标是否存在</span></span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> array</span><br><span class="line"><span class="comment">#删除某个数组元素</span></span><br><span class="line">delete array[i]</span><br><span class="line"><span class="comment">#删除整个数组</span></span><br><span class="line">delete array</span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环语法格式1</span></span><br><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">//代码语句</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#for循环语法格式2</span></span><br><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 数组) &#123;</span><br><span class="line">//代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组实例"><a href="#数组实例" class="headerlink" title="数组实例"></a>数组实例</h4><ul><li>统计主机上所有的TCP连接状态数，按照每个TCP状态分类</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep tcp | awk <span class="string">'&#123;array[$6]++&#125;END&#123;for(a in array) print a,array[a]&#125;'</span></span><br></pre></td></tr></table></figure><ul><li><p>计算横向数据总和，计算纵向数据总和</p><blockquote><p>allen    80    90    87    91</p><p>mike    78    86    93    96</p><p>Kobe    66    92    82    78</p><p>Jerry    98    74    66    54</p><p>Wang    87    21    100    43</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-10s%-10s%-10s%-10s%-10s%-10s\n"</span>,<span class="string">"Name"</span>,<span class="string">"Yuwen"</span>,<span class="string">"Math"</span>,<span class="string">"English"</span>,<span class="string">"Physical"</span>,<span class="string">"total"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    total=<span class="variable">$2</span>+<span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span></span><br><span class="line">    sum+=total</span><br><span class="line">    i=2</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=NF)</span><br><span class="line">    &#123;</span><br><span class="line">        array[i]+=<span class="variable">$i</span></span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-10s%-10d%-10d%-10d%-10d%-10d\n"</span>,<span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>,total</span><br><span class="line">&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-10s%-10d%-10d%-10d%-10d%-10d\n"</span>,<span class="string">"sum_c"</span>,array[2],array[3],array[4],array[5],sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><h4 id="模拟脚本"><a href="#模拟脚本" class="headerlink" title="模拟脚本"></a>模拟脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#数据生成脚本，模拟大型数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> create_random</span><br><span class="line">&#123;</span><br><span class="line">    min=<span class="variable">$1</span></span><br><span class="line">    max=$((<span class="variable">$2</span>-<span class="variable">$min</span>+1))</span><br><span class="line">    num=`date +%s%N`</span><br><span class="line">    <span class="built_in">echo</span> $((<span class="variable">$num</span>%<span class="variable">$max</span>+<span class="variable">$min</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">INDEX=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> allen mike jerry tracy han lilei</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        COUNT=<span class="variable">$RANDOM</span></span><br><span class="line">        NUM1=`create_random 1 <span class="variable">$COUNT</span>`</span><br><span class="line">        NUM2=`expr <span class="variable">$COUNT</span> - <span class="variable">$NUM1</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"`date '+%Y-%m-%d %H:%M:%S'` <span class="variable">$INDEX</span> Batches: user <span class="variable">$user</span> insert <span class="variable">$COUNT</span> records into database:product table:detal, insert <span class="variable">$NUM1</span> records successfully,failed <span class="variable">$NUM2</span> records"</span> &gt;&gt; ./db.log.`date +%Y%m%d`</span><br><span class="line">        INDEX=`expr <span class="variable">$INDEX</span> + 1`</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="需求及解决方案"><a href="#需求及解决方案" class="headerlink" title="需求及解决方案"></a>需求及解决方案</h4><ul><li>统计每个人分别插入多少条record进数据库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    array[<span class="variable">$6</span>]+=<span class="variable">$8</span></span><br><span class="line">&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-10s%-10d\n"</span>,i,array[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>统计每个人分别插入成功多少record，失败多少record</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    array[<span class="variable">$6</span>]+=<span class="variable">$14</span></span><br><span class="line">    array1[<span class="variable">$6</span>]+=<span class="variable">$17</span></span><br><span class="line">&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-10s   %-10d successed!\n"</span>,i,array[i]</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> array1)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-10s   %-10d Failed!\n"</span>,j,array[j]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将1和2结合起来一起输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-20s%-20s%-20s%-20s\n"</span>,<span class="string">"Name"</span>,<span class="string">"Sum"</span>,<span class="string">"Successed"</span>,<span class="string">"Failed"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    array[<span class="variable">$6</span>]+=<span class="variable">$8</span></span><br><span class="line">    array1[<span class="variable">$6</span>]+=<span class="variable">$14</span></span><br><span class="line">    array2[<span class="variable">$6</span>]+=<span class="variable">$17</span></span><br><span class="line">&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-20s%-20d%-20d%-20d\n"</span>,i,array[i],array1[i],array2[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在3结尾加上统计全部插入记录、失败记录数、成功记录数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-20s%-20s%-20s%-20s\n"</span>,<span class="string">"Name"</span>,<span class="string">"Sum"</span>,<span class="string">"Successed"</span>,<span class="string">"Failed"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    array[<span class="variable">$6</span>]+=<span class="variable">$8</span></span><br><span class="line">    array1[<span class="variable">$6</span>]+=<span class="variable">$14</span></span><br><span class="line">    array2[<span class="variable">$6</span>]+=<span class="variable">$17</span></span><br><span class="line">&#125;</span><br><span class="line">END&#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array)</span><br><span class="line">    &#123;</span><br><span class="line">        total_sum+=array[i]</span><br><span class="line">        total_successed+=array1[i]</span><br><span class="line">        total_failed+=array2[i]</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-20s%-20d%-20d%-20d\n"</span>,i,array[i],array1[i],array2[i]</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-20s%-20d%-20d%-20d\n"</span>,<span class="string">"total"</span>,total_sum,total_successed,total_failed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找丢失数据的现象(成功+失败不等于插入的记录数)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$8</span>!=<span class="variable">$14</span>+<span class="variable">$17</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="variable">$0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（四）：sed</title>
      <link href="/2019/12/28/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Ased/"/>
      <url>/2019/12/28/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Ased/</url>
      
        <content type="html"><![CDATA[<h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><p>sed(Stream Editor)，流编辑器。对标准输出或文件<strong>逐行</strong>进行处理(修改、删除、打印等)。</p><a id="more"></a><h4 id="pattern-space"><a href="#pattern-space" class="headerlink" title="pattern space"></a>pattern space</h4><p>模式空间，每一个被pattern所匹配到的行都放到pattern space中等待进一步处理</p><h4 id="hold-space"><a href="#hold-space" class="headerlink" title="hold space"></a>hold space</h4><p>保持空间，内存中另一块可以存放sed匹配行的空间，可以使操作更灵活。但主要是用来炫技，实际很少使用。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed [option] <span class="string">"pattern command"</span> file<span class="comment">#对文件逐行操作</span></span><br><span class="line">stdout | sed [option] <span class="string">"pattern command"</span><span class="comment">#对标注输出逐行操作</span></span><br><span class="line"><span class="comment">#sed用parttern来匹配每一行，如果某一行符合pattern模式被匹配到，就用command对那一行进行执行</span></span><br></pre></td></tr></table></figure><h3 id="sed选项"><a href="#sed选项" class="headerlink" title="sed选项"></a>sed选项</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>只打印模式匹配行(静默模式)</td></tr><tr><td>-e</td><td>直接在命令行进行sed编辑,默认选项;适用于多个匹配模式和命令</td></tr><tr><td>-f</td><td>编辑动作保存在文件中，指定文件执行</td></tr><tr><td>-r</td><td>支持扩展正则表达式</td></tr><tr><td><strong>-i</strong></td><td><strong>直接修改文件内容</strong></td></tr></tbody></table><h3 id="pattern用法"><a href="#pattern用法" class="headerlink" title="pattern用法"></a>pattern用法</h3><table><thead><tr><th>匹配模式</th><th>含义</th></tr></thead><tbody><tr><td>10command</td><td>匹配到第10行</td></tr><tr><td>10,20command</td><td>匹配从第10行开始，到第20行结束</td></tr><tr><td>10,+5command</td><td>匹配从第10行开始，到第16行结束</td></tr><tr><td><strong>/pattern1/command</strong></td><td><strong>匹配到pattern1的行</strong></td></tr><tr><td><strong>/pattern1/,/pattern2/command</strong></td><td><strong>匹配到pattern1开始，pattern2结束的行</strong></td></tr><tr><td>10,/pattern1/command</td><td>匹配从第10行开始，到匹配到pattern1的行结束</td></tr><tr><td>/pattern1/,10command</td><td>匹配到pattern1的行开始到第10行结束</td></tr><tr><td>1~2command</td><td>步长为2：从第一行开始每两行执行一次</td></tr></tbody></table><h3 id="编辑命令对照表"><a href="#编辑命令对照表" class="headerlink" title="编辑命令对照表"></a>编辑命令对照表</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><table><thead><tr><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>p</td><td>打印</td></tr></tbody></table><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><table><thead><tr><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>往后追加</td></tr><tr><td>i</td><td>往前追加</td></tr><tr><td>r</td><td>外部文件读入，行后追加</td></tr><tr><td>w</td><td>匹配行写入外部文件</td></tr></tbody></table><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><table><thead><tr><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>d</td><td>删除</td></tr></tbody></table><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><table><thead><tr><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>s/old/new</td><td>将行内第一个old替换为new</td></tr><tr><td>s/old/new/g</td><td>将行内全部的old替换为new</td></tr><tr><td>s/old/new/2g</td><td>将行内从第两个old开始到最后所有的old替换为new</td></tr><tr><td>s/old/new/ig</td><td>将行内old全部替换为new，忽略大小写</td></tr></tbody></table><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>编辑命令</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>显示行号</td></tr><tr><td>n</td><td>覆盖读取下一行</td></tr><tr><td>N</td><td>追加读取下一行</td></tr><tr><td>h</td><td>把模式空间的内容覆盖至保持空间</td></tr><tr><td>H</td><td>把模式空间的内容追加至保持空间</td></tr><tr><td>g</td><td>把保持空间的内容覆盖至模式空间</td></tr><tr><td>G</td><td>把保持空间的内容追加至模式空间</td></tr><tr><td>x</td><td>把模式空间与保持空间内容互换</td></tr><tr><td>！</td><td>条件取反，例如！1表示除了第一行</td></tr></tbody></table><h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;#引用匹配的整个串</span><br><span class="line">\1#引用匹配的第一个分组，需要&quot;()&quot;将待匹配括起来</span><br><span class="line">#例如：</span><br><span class="line">sed &#39;s&#x2F;\(l..e\)&#x2F;\1r&#x2F;g&#39;#表示将以l开头e结尾的四字串替换为结尾加e</span><br><span class="line">#注意：&amp;只能匹配整个串，而\1可以匹配一部分串，更加灵活</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>当写脚本时使用sed匹配模式中包含变量时，要用双引号将整个匹配模式括起来。也可以对引用变量使用单引号单独括起来，效果一样。</p><h3 id="查询实例"><a href="#查询实例" class="headerlink" title="查询实例"></a>查询实例</h3><ul><li>打印/etc/passwd中第20行内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'20p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中从第8行开始，到第15行结束的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'8,15p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中从第8行开始，然后+5行结束的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'8,+5p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中开头匹配frdqy字符串的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^frdqy/p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中开头为root的行开始，到开头为frdqy的行结束的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^root/,/^frdqy/p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中第8行开始，到含有/sbin/nologin的内容的行结束的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'8,/\/sbin\/nologin/p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>打印/etc/passwd中第一个包含/bin/bash内容的行开始，到第五行结束的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/\/bin\/bash/,5p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="删除实例"><a href="#删除实例" class="headerlink" title="删除实例"></a>删除实例</h3><ul><li>删除/etc/passwd中的第15行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'15d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中的第8行到第14行的所有内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'8,14d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中的不能登录的用户(/sbin/nologin)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中以mail开头的行，到以backup开头的行的所有内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^mail/,/^backup/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中第一个不能登录的用户，到第13行的所有内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/,13d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中第5行到以ftp开头的所有行的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'5,/^ftp/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除/etc/passwd中以backup开头的行到最后行的所有内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^backup/,$d'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>删除配置文件的注释行和空行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^#/d;/^$/d'</span></span><br><span class="line"><span class="comment">#只能删除#在开头的注释，例如代码内部注释就删不了。</span></span><br><span class="line">sed -i <span class="string">'/^[:blank:]*#/d'</span> ./nginx</span><br><span class="line"><span class="comment">#只删除代码内部的注释</span></span><br></pre></td></tr></table></figure><ul><li>在配置文件中所有不以#开头的行前面添加*符号，注意：以#开头的行不添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/^[^#]/\*&amp;/g'</span> ./nginx</span><br><span class="line"><span class="comment">#中括号外的^表示行首，中括号内的^表示取反，即不取中括号内的值。</span></span><br></pre></td></tr></table></figure><h3 id="修改实例"><a href="#修改实例" class="headerlink" title="修改实例"></a>修改实例</h3><ul><li>修改/etc/passwd中第1行中第一个root为ROOT</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'1s/root/ROOT/'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>修改/etc/passwd中第5行到第10行中所有的/sbin/nologin为/bin/bash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'5,10/\/sbin\/nologin/\/bin\/bash/g'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>修改/etc/passwd中匹配到/sbin/nologin的行，将匹配到行中的login改为大写LOGIN</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/\(\/sbin\/no\)login/\1LOGIN/g'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>修改/etc/passwd从匹配到以root开头的行，到匹配到行中包括mail的所有行，将bin改为dqy</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^root/,/mail/s/bin/dqy/g'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>修改/etc/passwd从匹配到以root开头的行，到第15行中所有行的nologin修改为frdqy</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^root/,15s/nologin/frdqy/g'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>修改/etc/passwd从第15行开始，到匹配到以frdqy开头的所有行的bin修改为BIN</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'15,/^frdqy/s/bin/BIN/g'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="追加实例"><a href="#追加实例" class="headerlink" title="追加实例"></a>追加实例</h3><ul><li>在/etc/passwd文件第10行后面追加”Add Line Behind”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10a Add Line Behind'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>在/etc/passwd文件第10行到第20行，每行后面追加”Test Line Behind”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10,20a Test Line Behind'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>在/etc/passwd文件匹配到/bin/bash的行后追加”Insert Line For /bin/bash Behind”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/bin\/bash/a Insert Line For /bin/bash Behind'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>在/etc/passwd文件匹配到以gdm开头的行，在匹配行前面追加”Add Line Before”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^gdm/i Add Line Before'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>在/etc/passwd文件每一行前面都追加”Insert Line Before Every Line”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'i Insert Line Before Every Line'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>将/etc/fstab文件内容追加到/etc/passwd文件第 20行后</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'20r /etc/fstab'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>将/etc/inittab文件内容追加到/etc/passwd文件匹配/sbin/nologin行后</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/r /etc/inittab'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>将/etc/vconsole.conf文件内容追加到/etc/passwd文件匹配以sync开头到18行的所有行后</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^sync/,18r /etc/vconsole.conf'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>将/etc/passwd文件匹配到/bin/bash的行追加到/tmp/sed.txt中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/bin\/bash/w /tmp/sed.txt'</span> /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>将/etc/passwd文件从第10行开始到匹配到frdqy开头的所有行追加到/tmp/sed_1.txt中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10,/^frdqy/w /tmp/sed_1.txt'</span> /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则知识补充</title>
      <link href="/2019/12/27/%E6%AD%A3%E5%88%99%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
      <url>/2019/12/27/%E6%AD%A3%E5%88%99%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">^ <span class="comment">#行首</span></span><br><span class="line">$ <span class="comment">#行尾</span></span><br><span class="line">\&lt; <span class="comment">#词首</span></span><br><span class="line">\&gt; <span class="comment">#词尾</span></span><br><span class="line">\b <span class="comment">#单词边界</span></span><br><span class="line">\B <span class="comment">#单词非边界</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#  #表示前面的字符连续出现任意次，包括0次。</span><br><span class="line">.  #表示任意单个字符。</span><br><span class="line">.* #表示任意长度的任意字符，与通配符中的*的意思相同。</span><br><span class="line">\? #表示匹配其前面的字符0或1次</span><br><span class="line">\+ #表示匹配其前面的字符至少1次，或者连续多次，连续次数上不封顶。</span><br><span class="line">\&#123;n\&#125;#表示前面的字符连续出现n次，将会被匹配到。</span><br><span class="line">\&#123;x,y\&#125; #表示之前的字符至少连续出现x次，最多连续出现y次，都能被匹配到，换句话说，只要之前的字符连续出现的次数在x与y之间，即可被匹配到。</span><br><span class="line">\&#123;,n\&#125; #表示之前的字符连续出现至多n次，最少0次，都会陪匹配到。</span><br><span class="line">\&#123;n,\&#125; #表示之前的字符连续出现至少n次，才会被匹配到.</span><br><span class="line">.  #表示匹配任意单个字符</span><br><span class="line">S* #表示匹配前面的字符任意次，包括0次</span><br><span class="line">[  ] #表示匹配指定范围内的任意单个字符</span><br><span class="line">[^  ]#表示匹配指定范围外的任意单个字符</span><br><span class="line"> </span><br><span class="line">[[:alpha:]]  #表示任意大小写字母</span><br><span class="line">[[:lower:]]  #表示任意小写字母</span><br><span class="line">[[:upper:]]  #表示任意大写字母</span><br><span class="line">[[:digit:]]  #表示0到9之间的任意单个数字（包括0和9）</span><br><span class="line">[[:alnum:]]  #表示任意数字或字母</span><br><span class="line">[[:space:]]  #表示任意空白字符，包括&quot;空格&quot;、&quot;tab键&quot;等。</span><br><span class="line">[[:punct:]]  #表示任意标点符号</span><br><span class="line"> </span><br><span class="line">[0-9]与[[:digit:]]等效</span><br><span class="line">[a-z]与[[:lower:]]等效</span><br><span class="line">[A-Z]与[[:upper:]]等效</span><br><span class="line">[a-zA-Z]与[[:alpha:]]等效</span><br><span class="line">[a-zA-Z0-9]与[[:alnum:]]等效</span><br><span class="line"> </span><br><span class="line">[^0-9]与[^[:digit:]]等效</span><br><span class="line">[^a-z]与[^[:lower:]]等效</span><br><span class="line">[^A-Z]与[^[:upper:]]等效</span><br><span class="line">[^a-zA-Z]与[^[:alpha:]]等效</span><br><span class="line">[^a-zA-Z0-9]与[^[:alnum:]]等效</span><br><span class="line"> </span><br><span class="line">#简短格式并非所有正则表达式解析器都可以识别</span><br><span class="line">\d #表示任意单个0到9的数字</span><br><span class="line">\D #表示任意单个非数字字符</span><br><span class="line">\t #表示匹配单个横向制表符（相当于一个tab键）</span><br><span class="line">\s #表示匹配单个空白字符，包括&quot;空格&quot;，&quot;tab制表符&quot;等</span><br><span class="line">\S #表示匹配单个非空白字符</span><br><span class="line"></span><br><span class="line">\(\)#表示分组，且可以嵌套</span><br><span class="line">\(ab\)#表示将ab作为一个整体处理</span><br><span class="line">\1 #表示引用整个表达式中第一个分组中的正则表达式</span><br><span class="line">\2 #表示引用整个表达式中第二个分组中的正则表达式</span><br><span class="line">#若分组嵌套，以左括号为基准判断是第几个分组</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（三）：常用查找工具</title>
      <link href="/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%9F%A5%E6%89%BE%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%9F%A5%E6%89%BE%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h3><blockquote><pre><code>语法格式：find [路径] [选项] [操作]</code></pre><blockquote><pre><code>选项：    -name(大小写敏感)    -iname(忽略大小写)    -perm    -prune(排除某些目录，通常与path一起使用)    如：find . -path ./test -prune -o -type f(-o表示或者)    -user    -group    -mtime -n | +n    -nogroup(无效组)    -nouser(无效用户)    -newer file1 ! file2    -type    -size -n | +n    -mindepth n    -maxdepth n</code></pre><a id="more"></a><pre><code>操作：    -print(默认)    -ok(与exec相似，会给用户提示)    -exec     删除etc下conf结尾的文件        find ./etc -name &apos;*.conf&apos; -exec rm -rf {} \;     复制         find ./etc -size +1M -exec cp {} ./test/ \;     删除/var/log下以.log结尾的7天以前的文件         find /var/log -name &apos;*.log&apos; -mtime +7 -exec rm -rf {} \;     搜素etc下以conf结尾的且大于10k的文件，复制到root/conf目录下         find /etc/ -name &apos;*.conf&apos; -size +10k -exec cp {} /root/conf/ \;</code></pre></blockquote></blockquote><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><blockquote><pre><code>locate在数据库文件中查找，而find在整个磁盘中查找由系统定时任务负责更新数据库find默认全部匹配，locate默认部分匹配updatedb命令：更新/var/lib/mlocate/mlocate.db配置文件为：/etc/updatedb.conf</code></pre></blockquote><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><blockquote><p>-b查找二进制文件</p><p>-m查找帮助文件</p><p>-s查找源代码文件</p></blockquote><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><blockquote><p>查找二进制文件(查用于查找程序绝对路径)</p></blockquote><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote><pre><code>形式一：grep [option] [pattern] [file1,file2...]形式二：command | grep [option] [pattern]    参数：        -v     不显示匹配行        -i     忽略大小写        -n     显示行号        -r     递归搜索(当前目录下搜索所有文件)        -E     支持扩展正则        -F     不按正则        -c     输出匹配行的数量        -w     匹配整个单词        -x     匹配整行        -l     只列出匹配的文件名</code></pre></blockquote><h3 id="逻辑运算："><a href="#逻辑运算：" class="headerlink" title="逻辑运算："></a>逻辑运算：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a<span class="comment">#与</span></span><br><span class="line">-o<span class="comment">#或</span></span><br><span class="line">-not|! <span class="comment">#非</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（二）：函数的使用</title>
      <link href="/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="函数命名格式"><a href="#函数命名格式" class="headerlink" title="函数命名格式"></a>函数命名格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name()</span><br><span class="line">&#123;</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> name</span><br><span class="line">&#123;</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#调用函数时直接用函数名调用即可，像一条shell命令一样</span></span><br><span class="line"><span class="comment">#函数内部参数使用$1,$2...$n</span></span><br><span class="line"><span class="comment">#调用函数例子：function_name $1 $2</span></span><br></pre></td></tr></table></figure><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> name</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span><span class="comment">#第一个参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$2</span><span class="comment">#第二个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name zhangsan lisi</span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><blockquote><p>返回0：成功<br>返回1~255：失败</p><p>echo返回单一字符串或数据列表</p><p>echo $$：返回脚本执行的进程pid，用于解决脚本自身名字包含所要管    理的服务引起冲突的情况。<br>守护进程(daemon)：通过脚本判断某个服务是否正常，不正常就启动</p><p>netstat -tnlp：查看网络状态</p></blockquote><h3 id="全局变量与局部变量的定义"><a href="#全局变量与局部变量的定义" class="headerlink" title="全局变量与局部变量的定义"></a>全局变量与局部变量的定义</h3><blockquote><p>不做特殊说明，shell中变量都是全局变量(不建议在大型脚本中使用全    局变量)</p><p>定义变量时使用local关键字<br>函数内外若存在同名变量，则函数内部变量覆盖外部变量</p><p>库函数：用于封装常用函数，后缀通常以.lib结尾。<br>引用库函数时，用. base_function即可，推荐用绝对路径(点后有一个    空格)</p></blockquote><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意.和文件名中间有空格</span></span><br><span class="line">. file_name</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="built_in">source</span> file_name</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>只强调一个while循环的特殊用法，即依次读取文件的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">done</span> &lt; /path/file</span><br><span class="line"><span class="comment">#上述可以实现一次读取file中的每一行并赋值给line变量</span></span><br></pre></td></tr></table></figure><h3 id="case选择"><a href="#case选择" class="headerlink" title="case选择"></a>case选择</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$var</span> <span class="keyword">in</span></span><br><span class="line">par1)</span><br><span class="line">分支1</span><br><span class="line">;;</span><br><span class="line">part2)</span><br><span class="line">分支2</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#上述都不匹配则匹配此选项</span></span><br><span class="line">*)</span><br><span class="line">分支n</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程之（一）：变量的用法</title>
      <link href="/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/12/27/Shell%E7%BC%96%E7%A8%8B%E4%B9%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="定义范围"><a href="#定义范围" class="headerlink" title="定义范围"></a>定义范围</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示1到100的数</span></span><br><span class="line"><span class="built_in">echo</span> &#123;1..100&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#表示从1到10，步长为2</span></span><br><span class="line">seq 1 2 10</span><br></pre></td></tr></table></figure><h3 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#String&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr length <span class="string">"<span class="variable">$String</span>"</span></span><br></pre></td></tr></table></figure><h3 id="获取子串在字符串中的索引位置"><a href="#获取子串在字符串中的索引位置" class="headerlink" title="获取子串在字符串中的索引位置"></a>获取子串在字符串中的索引位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr index <span class="variable">$String</span> <span class="variable">$subString</span>  <span class="comment">#切片,字符查找，返回第一个</span></span><br></pre></td></tr></table></figure><h3 id="计算子串长度"><a href="#计算子串长度" class="headerlink" title="计算子串长度"></a>计算子串长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr match <span class="variable">$String</span> subString</span><br></pre></td></tr></table></figure><h3 id="抽取子串"><a href="#抽取子串" class="headerlink" title="抽取子串"></a>抽取子串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;string:position:length&#125;</span><span class="comment">#从position取length个</span></span><br><span class="line"><span class="variable">$&#123;String:position&#125;</span><span class="comment">#从String中的position开始</span></span><br><span class="line"><span class="variable">$&#123;String: -position&#125;</span><span class="comment">#从右往左(注意空格)</span></span><br><span class="line"><span class="variable">$&#123;String:(position)&#125;</span><span class="comment">#从左往右</span></span><br><span class="line"><span class="variable">$expr</span> substr <span class="variable">$String</span> <span class="variable">$position</span> <span class="variable">$length</span><span class="comment">#与二类似</span></span><br></pre></td></tr></table></figure><h3 id="变量替换："><a href="#变量替换：" class="headerlink" title="变量替换："></a>变量替换：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;变量名#正则&#125;</span><span class="comment">#从开头匹配最短删除</span></span><br><span class="line"><span class="variable">$&#123;变量名##正则&#125;</span><span class="comment">#从开头匹配最长删除</span></span><br><span class="line"><span class="variable">$&#123;变量名%正则&#125;</span><span class="comment">#从尾部匹配最短删除</span></span><br><span class="line"><span class="variable">$&#123;变量名%%正则&#125;</span><span class="comment">#从尾部匹配最长删除</span></span><br><span class="line"><span class="variable">$&#123;变量名/旧字符串/新字符串&#125;</span><span class="comment">#第一个字符串替换</span></span><br><span class="line"><span class="variable">$&#123;变量名//旧字符串/新字符串&#125;</span><span class="comment">#全部字符串替换</span></span><br><span class="line"><span class="comment">#注意：使用expr索引计数从1开始，使用$&#123;&#125;索引计数从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置默认值</span></span><br><span class="line"><span class="variable">$&#123;NAME:-tom&#125;</span><span class="comment">#若NAME没有值，其值为tom</span></span><br><span class="line"><span class="variable">$&#123;NAME:+tom&#125;</span><span class="comment">#若NAME有值，则将其值改为tom</span></span><br></pre></td></tr></table></figure><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">``</span><br><span class="line">$()</span><br></pre></td></tr></table></figure><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$[a+b]</span><br><span class="line">$((a+b))<span class="comment">#注意与命令替换区分</span></span><br></pre></td></tr></table></figure><h3 id="有类型变量"><a href="#有类型变量" class="headerlink" title="有类型变量"></a>有类型变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -r<span class="comment">#声明变量为只读类型</span></span><br><span class="line"><span class="built_in">declare</span> -i <span class="comment">#声明变量为整型</span></span><br><span class="line"><span class="built_in">declare</span> -f <span class="comment">#在脚本中显示定义的函数和内容</span></span><br><span class="line"><span class="built_in">declare</span> -F <span class="comment">#在脚本中显示定义的函数</span></span><br><span class="line"><span class="built_in">declare</span> -a <span class="comment">#声明数组</span></span><br><span class="line">arr=(<span class="string">"jones"</span> <span class="string">"mike"</span> <span class="string">"kobe"</span> <span class="string">"jordan"</span>) <span class="comment">#以空格分隔</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[@]&#125;</span><span class="comment">#获取整个数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#arr[@]&#125;</span>  <span class="comment">#获取整个数组长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#arr[i]&#125;</span><span class="comment">#获取某个数组元素长度</span></span><br><span class="line"><span class="built_in">declare</span> -x <span class="comment">#声明环境变量</span></span><br><span class="line"><span class="comment">#取消某个设置只需要“-”改为“+”即可</span></span><br></pre></td></tr></table></figure><h3 id="expr语法格式"><a href="#expr语法格式" class="headerlink" title="expr语法格式"></a>expr语法格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="variable">$num1</span> operator <span class="variable">$num2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#操作符对照表(注意转义)</span></span><br><span class="line">num1 | num2num1<span class="comment">#不为空且非0，返回num1；否则返回num2</span></span><br><span class="line">num1 &amp; num2 num1  <span class="comment">#不为空且非0，返回num1；否则返回0</span></span><br><span class="line"><span class="comment">#判断整数</span></span><br><span class="line">expr <span class="variable">$num</span> + 1<span class="comment">#如果执行成功则为整数(成功返回1)</span></span><br></pre></td></tr></table></figure><h3 id="bc进行浮点数计算"><a href="#bc进行浮点数计算" class="headerlink" title="bc进行浮点数计算"></a>bc进行浮点数计算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"23 + 5"</span> | bc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"23.15 + 4.3"</span> | bc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"scale=4;23.5/3.5"</span> | bc</span><br></pre></td></tr></table></figure><h3 id="let自增"><a href="#let自增" class="headerlink" title="let自增"></a>let自增</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#let后变量不需要$引用，一般直接++即可</span></span><br><span class="line"><span class="built_in">let</span> i++</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/27/hello-world/"/>
      <url>/2019/12/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Strat"><a href="#Quick-Strat" class="headerlink" title="Quick Strat"></a>Quick Strat</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
