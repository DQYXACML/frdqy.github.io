<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frdqy的博客</title>
  
  <subtitle>记录默默到无闻的学习路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-18T10:04:50.348Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Frdqy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>05重建二叉树</title>
    <link href="http://yoursite.com/2020/02/18/05%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/02/18/05%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-02-18T10:03:45.000Z</published>
    <updated>2020-02-18T10:04:50.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><a id="more"></a><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：</p><p>​    3<br>   / <br>  9  20<br>​      /  <br>​    15   7</p><p>限制：</p><p>0 &lt;= 节点个数 &lt;= 5000</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据前序和中序建树，首先前序第一个元素为根，按这个根找到中序的索引，根据索引将中序切分成两个，前序就依次往后进行递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder: List[int], inorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> len(inorder) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 找中序根节点索引下标，将树拆开</span></span><br><span class="line">        idx = inorder.index(preorder[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 左子树</span></span><br><span class="line">        root.left = self.buildTree(preorder[<span class="number">1</span>:idx+<span class="number">1</span>], inorder[:idx])</span><br><span class="line">        <span class="comment"># 右子树</span></span><br><span class="line">        root.right = self.buildTree(preorder[idx+<span class="number">1</span>:], inorder[idx+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct TreeNode* <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>* preorder, <span class="keyword">int</span> preorderSize, <span class="keyword">int</span>* inorder, <span class="keyword">int</span> inorderSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (preorder == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">root</span> = (<span class="title">struct</span> <span class="title">TreeNode</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">TreeNode</span>));</span></span><br><span class="line">root-&gt;val = preorder[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//找中序下标</span></span><br><span class="line"><span class="keyword">while</span> (index &lt; inorderSize&amp;&amp;inorder[index] != preorder[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分左右子树进行递归</span></span><br><span class="line">root-&gt;left = buildTree(preorder + <span class="number">1</span>, index, inorder, index);</span><br><span class="line">root-&gt;right = buildTree(preorder + <span class="number">1</span> + index, preorderSize - (index + <span class="number">1</span>), inorder + index + <span class="number">1</span>, inorderSize - (index + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>04从尾到头打印链表</title>
    <link href="http://yoursite.com/2020/02/18/04%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/02/18/04%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-18T10:03:02.000Z</published>
    <updated>2020-02-18T10:04:47.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><a id="more"></a><p>示例 1：</p><p>输入：head = [1,3,2]<br>输出：[2,3,1]</p><p>限制：</p><p>0 &lt;= 链表长度 &lt;= 10000</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将链表放到列表中，列表从后往前放到新的列表中。尽量不使用reverse</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePrint</span><span class="params">(self, head:ListNode)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        sc=[]</span><br><span class="line">        result=[]</span><br><span class="line">        hd=head</span><br><span class="line">        <span class="keyword">while</span> hd:</span><br><span class="line">            sc.append(hd.val)</span><br><span class="line">            hd=hd.next</span><br><span class="line">        <span class="keyword">while</span> sc:</span><br><span class="line">            result.append(sc.pop(<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">reversePrint</span><span class="params">(struct ListNode* head, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">hd</span> = <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">int</span>* ret = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">10000</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">memset</span>(ret, <span class="number">0</span>, <span class="number">10000</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//将链表转为数组</span></span><br><span class="line"><span class="keyword">while</span> (hd)</span><br><span class="line">&#123;</span><br><span class="line">ret[index++] = hd-&gt;val;</span><br><span class="line">hd = hd-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//数组前后调换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">ceil</span>(index/<span class="number">2</span>) ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = ret[i];</span><br><span class="line">ret[i] = ret[index - i - <span class="number">1</span>];</span><br><span class="line">ret[index - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">*returnSize = index;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>03替换空格</title>
    <link href="http://yoursite.com/2020/02/18/03%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2020/02/18/03%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2020-02-18T10:02:24.000Z</published>
    <updated>2020-02-18T10:04:43.642Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><a id="more"></a><p>示例 1：</p><p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p><p>限制：</p><p>0 &lt;= s 的长度 &lt;= 10000</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串转列表判断完再拼成字符串</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lst = list(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst)):</span><br><span class="line">            <span class="keyword">if</span> lst[i] == <span class="string">' '</span>:</span><br><span class="line">                lst[i] = <span class="string">'%20'</span></span><br><span class="line">        s = <span class="string">''</span>.join(lst)</span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span>* s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* str = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[j++] = <span class="string">'%'</span>;</span><br><span class="line">str[j++] = <span class="string">'2'</span>;</span><br><span class="line">str[j++] = <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">str[j++] = s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    str[j]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请实现一个函数，把字符串 s 中的每个空格替换成”%20”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>02二维数组中的查找</title>
    <link href="http://yoursite.com/2020/02/18/02%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2020/02/18/02%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2020-02-18T10:01:43.000Z</published>
    <updated>2020-02-18T10:04:41.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><p>示例:</p><p>现有矩阵 matrix 如下：</p><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p><p>限制：</p><p>0 &lt;= n &lt;= 1000</p><p>0 &lt;= m &lt;= 1000</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上下都有序，可以从第一排的最后一个开始比较，如果大于它说明大于整个第一排的元素，行指针加1，直到比较到一个小于的，再列指针减少，到最小仍未匹配说明不存在</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNumberIn2DArray</span><span class="params">(self, matrix, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> matrix==[]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i,j=[<span class="number">0</span>,len(matrix[<span class="number">0</span>])<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(matrix) <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j]==target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; matrix[i][j]:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#测试用例有一个[]和[[]]，需要特殊化处理；或者先判断长度</span></span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixSize, <span class="keyword">int</span>* matrixColSize, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = *matrixColSize;</span><br><span class="line"><span class="keyword">if</span> (matrixSize==<span class="number">0</span>||matrix==<span class="literal">NULL</span>||matrixColSize==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i&lt;matrixSize&amp;&amp;j&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (matrix[i][j]=target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j]&lt;target)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>01数组中重复的数字</title>
    <link href="http://yoursite.com/2020/02/18/01%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/02/18/01%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-02-18T09:59:43.000Z</published>
    <updated>2020-02-18T10:00:47.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>找出数组中重复的数字。</p><a id="more"></a><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p><p>限制：</p><p>2 &lt;= n &lt;= 100000</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标记已出现的数字个数，并同时判断</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatNumber</span><span class="params">(self, nums:List[int])</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        arr=[<span class="number">0</span>]*len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            arr[nums[i]]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(arr[nums[i]]&gt;<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="comment">#优化：使用字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatNumber</span><span class="params">(self, nums:List[int])</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        repeatDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> repeatDict:</span><br><span class="line">                repeatDict[num] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> num</span><br><span class="line">        </span><br><span class="line"><span class="comment">#优化：原地hash</span></span><br><span class="line"><span class="comment">#如果num[i]的值和以num[i]为下标的值相等，那么就出现过，如果不相等就元素互换</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatNumber</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">while</span> i != nums[i]:</span><br><span class="line">                <span class="keyword">if</span> nums[i] == nums[nums[i]]:</span><br><span class="line">                    <span class="keyword">return</span> nums[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nums[nums[i]], nums[i] = nums[i], nums[nums[i]]</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原地hash</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize ; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=nums[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">                nums[i] = nums[nums[i]];</span><br><span class="line">                nums[temp] = temp;<span class="comment">//此处是坑点，第一次没发现nums[i]已经变了，不能正常交换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;找出数组中重复的数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis(6)-集群</title>
    <link href="http://yoursite.com/2020/02/14/Redis-6-%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2020/02/14/Redis-6-%E9%9B%86%E7%BE%A4/</id>
    <published>2020-02-14T08:27:10.000Z</published>
    <updated>2020-02-14T08:31:03.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h3><p>考虑一种场景：现在后端有多个redis服务器提供<strong>缓存</strong>功能，客户端向redis写时想要实现在不同的redis服务器中写，从而使得redis服务器的压力减少，这里就需要算法来将数据映射到某个redis服务器上，从而引出一致性hash算法。</p><a id="more"></a><p>一致性hash是在0~2^32次方之间进行映射，将每个物理节点按照该算法映射到一个逻辑圆上，有数据到达时将数据也hash，然后也会映射到逻辑圆上，然后顺时针找一个最近的物理节点，将数据存储到该物理节点。</p><p>但是这样会引起一个新的问题，即数据倾斜问题，例如一批数据总是映射到一个分段上，因此会存储到同一个物理节点上，这样该物理节点会有很大的存储压力。为了解决该问题提出了虚拟节点的概念，即将一个物理节点逻辑上分成多份，映射到逻辑圆的其他地方，这样就一定程度上减少数据倾斜现象的出现。</p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>redis集群就是一个分布式数据库，通过分片机制进行数据分布，集群内的每个节点仅拥有数据库的一部分数据。redis集群是去中心化集群，即客户端访问该集群的任意一个节点都可以获取全部数据。这是因为集群内的每个节点都拥有全局键的元数据表，即如果当前节点没有客户端访问的键时，会将真正的键的位置告诉客户端，客户端程序会自动去真正的节点寻找。</p><p>分片机制就是上面说的hash计算，不过不是一致性hash，采用的是取模运算，只不过这个模数很大(16384)可以方便后续增加。每个数据经过取模运算后会得到一个数，这个数叫做槽位，每个redis服务器存放不同的槽位的数据，并且当有新的redis服务器加入时会将现有的每个redis服务器的一部分槽位进行迁移，当然槽位对应的数据也会迁移。</p><p>集群内部中也需要配置主从，并且内部也是采用哨兵模式，如果有半数节点发现某个异常节点，共同决定更改异常节点的状态，如果改节点是主节点，则对应的从节点自动顶替为主节点，当原先的主节点上线后，则会变为从节点。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="twemproxy"><a href="#twemproxy" class="headerlink" title="twemproxy"></a>twemproxy</h4><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译安装twemproxy</span></span><br><span class="line"><span class="comment">#https://github.com/twitter/twemproxy</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/twitter/twemproxy.git</span><br><span class="line">autoreconf -fvi</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">src/nutcracker -h</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建配置文件目录</span></span><br><span class="line">mkdir /etc/nutcracker</span><br><span class="line"><span class="comment">#移动配置文件到该目录下</span></span><br><span class="line">mv ~/soft/twemproxy/twemproxy/conf/nutcracker.* .</span><br><span class="line"><span class="comment">#移动可执行文件</span></span><br><span class="line">mv nutcracker /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建twemproxy.service</span></span><br><span class="line"><span class="comment">#vim /lib/systemd/system/twemproxy.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=twemproxy Service</span><br><span class="line">After=syslog.target network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/nutcracker -d -c /etc/nutcracker/nutcracker.yml</span><br><span class="line">ExecStop=<span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/&amp;&amp;pkill nutcracker</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">ln -s /lib/systemd/system/twemproxy.Service /etc/systemd/system/multi-user.target.wants/twemproxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#重载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> twemproxy</span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alpha:<span class="comment">#随便一个名字</span></span><br><span class="line">  listen: 0.0.0.0:22121<span class="comment">#监听端口</span></span><br><span class="line">  <span class="built_in">hash</span>: crc16<span class="comment">#hash算法</span></span><br><span class="line">  distribution: ketama<span class="comment">#一致性hash</span></span><br><span class="line">  auto_eject_hosts: <span class="literal">true</span><span class="comment">#用于控制twemproxy是否应该根据server的连接状态重建群集 </span></span><br><span class="line">  backlog: 2048<span class="comment">#TCP的backlog长度</span></span><br><span class="line">  redis: <span class="literal">true</span><span class="comment">#默认代理memcache，设置为true代理redis</span></span><br><span class="line">  server_retry_timeout: 200<span class="comment">#控制服务器连接的时间间隔</span></span><br><span class="line">  server_failure_limit: 1<span class="comment">#控制连接服务器的次数</span></span><br><span class="line">  servers:<span class="comment">#代理的后端服务器ip和端口，1为权重</span></span><br><span class="line">  -127.0.0.1:6379:1</span><br><span class="line">  -127.0.0.1:6380:1</span><br><span class="line">  </span><br><span class="line"><span class="comment">#配置好后重启并使用redis-cli进入22121端口，之后对22121访问即可访问后端主机</span></span><br><span class="line">systemctl restart twemproxy</span><br><span class="line">redis-cli -p 22121</span><br></pre></td></tr></table></figure><h4 id="predixy"><a href="#predixy" class="headerlink" title="predixy"></a>predixy</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/joyieldInc/predixy</span></span><br><span class="line">wget https://github.com/joyieldInc/predixy/releases/download/1.0.5/predixy-1.0.5-bin-amd64-linux.tar.gz</span><br></pre></td></tr></table></figure><h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#详情见https://github.com/joyieldInc/predixy/blob/master/doc/config_CN.md</span></span><br><span class="line"><span class="comment">#通用</span></span><br><span class="line">Name<span class="comment">#定义名称</span></span><br><span class="line">Bind 0.0.0.0:7617<span class="comment">#定义端口和地址，也可以使用socket</span></span><br><span class="line">WorkerThreads<span class="comment">#线程数</span></span><br><span class="line">MaxMemory<span class="comment">#最大可使用内存</span></span><br><span class="line">ClientTimeout<span class="comment">#客户端连接超时</span></span><br><span class="line">BufSize<span class="comment">#用于实现零拷贝</span></span><br><span class="line">Log<span class="comment">#日志</span></span><br><span class="line">LogRotate<span class="comment">#日志切分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sentinel实例</span></span><br><span class="line">SentinelServerPool &#123;</span><br><span class="line">    Databases 16</span><br><span class="line">    Hash crc16</span><br><span class="line">    HashTag <span class="string">"&#123;&#125;"</span></span><br><span class="line">    Distribution modula</span><br><span class="line">    MasterReadPriority 60</span><br><span class="line">    StaticSlaveReadPriority 50</span><br><span class="line">    DynamicSlaveReadPriority 50</span><br><span class="line">    RefreshInterval 1</span><br><span class="line">    ServerTimeout 1</span><br><span class="line">    ServerFailureLimit 10</span><br><span class="line">    ServerRetryTimeout 1</span><br><span class="line">    KeepAlive 120</span><br><span class="line">    Sentinels &#123;</span><br><span class="line">        + 10.2.2.2:7500</span><br><span class="line">        + 10.2.2.3:7500</span><br><span class="line">        + 10.2.2.4:7500</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#定义一个redis组，Group的名字应该和redis sentinel里面的名字一致；有几个主从设置几个group</span></span><br><span class="line">    Group shard001 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Group shard002 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">多个主从时不能使用事务，只有一个主从时才能使用事务</span><br></pre></td></tr></table></figure><h4 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis-cluster"></a>redis-cluster</h4><p>redis自身的集群已经在源码包里编译过了，实际就是一个脚本命令。该集群去中心化，原理在上面讲过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/root/soft/redis-5.0.7/utils/create-cluster目录下create-cluster脚本，实际是调用redis-cli --cluster</span></span><br><span class="line"><span class="comment">#启动集群</span></span><br><span class="line">create-cluster start</span><br><span class="line"><span class="comment">#分配槽点，可以手动redis-cli --cluster设置</span></span><br><span class="line">create-cluster create</span><br><span class="line"><span class="comment">#redis-cli --cluster手动分配槽点</span></span><br><span class="line">redis-cli --cluster create ip:port[ ip:port....] --cluster-replicas</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本设置，create-cluster脚本内容</span></span><br><span class="line">PORT=30000<span class="comment">#端口</span></span><br><span class="line">TIMEOUT=2000<span class="comment">#超时时长</span></span><br><span class="line">NODES=6<span class="comment">#几个redis节点</span></span><br><span class="line">REPLICAS=1<span class="comment">#NODES*REPLICAS为redis实例个数，此处为6表示3个主，3个从</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接集群入口，-c表示是集群，会自动重定向</span></span><br><span class="line">redis-cli -c -p 30001</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新分配槽位，可以手动指定移动的槽位数、目标redis的id等</span></span><br><span class="line">redis-cli --cluster reshard ip:port</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">这时可以使用事务操作，但是可能会导致不同的key在不同的redis实例上导致事务失败。</span><br><span class="line">可以人为的给key设置前缀使得其分配到同一个rendis上，这样就可以使用事务</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一致性hash&quot;&gt;&lt;a href=&quot;#一致性hash&quot; class=&quot;headerlink&quot; title=&quot;一致性hash&quot;&gt;&lt;/a&gt;一致性hash&lt;/h3&gt;&lt;p&gt;考虑一种场景：现在后端有多个redis服务器提供&lt;strong&gt;缓存&lt;/strong&gt;功能，客户端向redis写时想要实现在不同的redis服务器中写，从而使得redis服务器的压力减少，这里就需要算法来将数据映射到某个redis服务器上，从而引出一致性hash算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="predixy" scheme="http://yoursite.com/tags/predixy/"/>
    
      <category term="twemproxy" scheme="http://yoursite.com/tags/twemproxy/"/>
    
  </entry>
  
  <entry>
    <title>Redis(5)-主从复制</title>
    <link href="http://yoursite.com/2020/02/14/Redis-5-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2020/02/14/Redis-5-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2020-02-14T08:26:42.000Z</published>
    <updated>2020-02-14T08:28:01.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>redis的主从复制与mysql类似，将数据从master复制到slave，从而实现数据集的冗余。用户向master端写数据时，redis通过sync以非阻塞方式向slave发送数据，从而slave执行相同操作。另外每个master可以有多个slave，每个slave也可以有slave，即支持串行链式复制。</p><a id="more"></a><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p><p>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p><p>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p><p>读写分离：可以用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量；</p><p>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>master以ping的方式来检测slave是否在线(也可以被动接收slave的sync请求)，如果slave在线则master启动子进程将内存中的数据以快照方式(RDB)保存到文件中并将该文件发送给slave，这个文件保存在slave的磁盘中，之后再将slave磁盘中的数据装载到其内存中(slave装载前会将自身FLUSHALL)。第一次建立时会消耗很多时间将整个数据集同步，后来master会持续将新的写操作发送给slave从而保持一致性操作。</p><p>注意，如果slave挂了再重启，如果是RDB模式，dump文件中会保存master的id，从而实现增量恢复。而如果使用AOF模式，那么即使现在AOF采用RDB先备份，也无法实现增量，而是全量恢复。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在slave服务器的配置文件中加入：</span></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者在slave命令行(redis-cli)中使用slaveof命令，5.0后改成replicaof</span></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#/etc/redis/目录下配置文件</span></span><br><span class="line">replica-serve-stale-data<span class="comment">#主从复制时如何处理客户端请求，默认yes表示正常应答(会有过时数据)，no表示拒绝并返回错误提示</span></span><br><span class="line">replica-read-only<span class="comment">#从节点是否处理写请求，默认为yes</span></span><br><span class="line">repl-diskless-sync<span class="comment">#主从数据复制是否使用无硬盘复制功能。默认值为no。</span></span><br><span class="line">repl-diskless-sync-delay<span class="comment">#当启用无硬盘备份，服务器等待一段时间后才会通过套接字向从站传送RDB文件，这个等待时间是可配置的。这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段时间以期更多的从站到达。延迟时间以秒为单位，默认为5秒。要关掉这一功能只需将它设置为0秒，传送会立即启动。默认值为5。</span></span><br><span class="line">repl-disable-tcp-nodelay<span class="comment">#默认值为no。yes表示redis会使用较少量的TCP包和带宽向从站发送数据。但这会导致在从站增加一点数据的延时。Linux内核默认配置情况下最多40毫秒的延时。如果选择no，从站的数据延时不会那么多，但备份需要的带宽相对较多。</span></span><br><span class="line">repl-backlog-size 1mb<span class="comment">#redis内存维护的队列，用于存储增量备份时的增量，给slave进行增量恢复</span></span><br><span class="line">slave-priority 100<span class="comment">#指明slave的优先级，数字越小优先级越低</span></span><br><span class="line">min-slaves-to-write 3<span class="comment">#如果slave服务器小于3个，master服务器就拒绝写请求</span></span><br><span class="line">min-slaves-max-lag 10<span class="comment">#slave服务器不能滞后于master10s以上，否则master拒绝写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">设置主从复制时，从服务器的<span class="built_in">bind</span>地址和主服务地址必须是同一网段的，或者直接0.0.0.0更好，否则会无法连接</span><br><span class="line">如果master使用requirepass开启认证功能，slave需要使用masterauth &lt;password&gt;进行认证</span><br></pre></td></tr></table></figure><h3 id="sentinel哨兵"><a href="#sentinel哨兵" class="headerlink" title="sentinel哨兵"></a>sentinel哨兵</h3><p>哨兵，是独立进程(redis-sentinel)，它用于监视主从多个redis服务器中master服务器的工作状态(它只监视master是因为可以从master中获取slave信息)。它获取master的信息并通过master就可以获取它的从节点的信息，一旦master挂了就可以调度slave充当master。当然为了避免哨兵误判master，哨兵的个数一般也是3个以上的奇数个，当一个哨兵检测不到master时会判断其他哨兵能否检测，如果所有哨兵都检测不到master则说明master真正挂了，从而调度slave成为master。</p><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>服务器自身初始化，运行redis-sentinel或者redis-server中专用sentinel的代码；然后初始化sentinel状态，根据给定的配置文件初始化监控的master服务器列表；最后创建连接master的连接。</p><p>sentinel会以秒级为单位向各个master发送ping命令，对方必须回复pong，否则就会判定主观下线，若多个sentinel都ping不通该master则表示master挂了，即为客观下线。</p><ul><li>主观下线：一个sentinel判断master下线</li><li>客观下线：多个sentinel均判断master下线</li></ul><p>当过半的sentinel发现某master下线，之后即判定该master已故障下线。然后sentinel根据各个slave的优先级来投票选举新的master，将选举出来的slave切换为master，然后将原来的master变为slave并添加到新的master的slave信息中，同步数据并修改sentinel的新master地址，至此，故障转移结束。</p><p>需要过半的原因是考虑到脑裂问题(也叫做网络分区问题)，比如有3个sentinel，其中3个分别独立监控master，那么如果一个sentienl发现master下线，另一个发现sentienl在线，那么是不能判断master到底是否在线。因此需要过半的sentinel一致判断master下线才能说明master真下线。</p><p>sentinel通常使用奇数，考虑一种情况：3个sentinel和4个sentinel的模型，由于需要过半的sentinel决策才不会出现脑裂问题，那么3个sentinel需要2个决策，允许1个发生错误；4个sentinel需要3个决策，容许1个发生错误，考虑到4个sentinel发生1个故障的风险肯定要比3个sentinel发生1个故障的风险要大，因此只考虑奇数个sentinel。(这不仅仅是钱的问题，更是风险问题)</p><p>另外，我们知道一个sentinel通过它监控的master可以获得其他slave的信息，但是sentinel是如何知道其他sentinel的存在的呢？这里使用了消息订阅机制，即所有sentinel都不断的在一个channel叫做<code>&quot;__sentinel__&quot;</code>的频道发送hello消息，其他sentinel只要订阅这个channel就可以知道还有哪些sentinel在线。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sentinel配置文件需要手动创建，此处创建为sentinel-6379.conf</span></span><br><span class="line"><span class="comment">#在源码目录的src里也有配置文件实例</span></span><br><span class="line"><span class="comment">#设置监听端口</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="comment">#是否运行为守护进程</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment">#日志syslog</span></span><br><span class="line">logfile <span class="string">"26379.log"</span></span><br><span class="line"><span class="comment">#临时文件目录</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment">#指明监控的主节点，mymaster表示自定义的master名称，后接主节点ip和port；2表示sentinel同意的数量；可以定义多个，即一组sentinel集群可以监控多个m/s集群</span></span><br><span class="line">sentinel monitor mymaster 192.168.250.132 7000 2</span><br><span class="line"><span class="comment">#判断master不在线的超时时长，单位为ms</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"><span class="comment">#新创建master时允许多少slave向其发送请求</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment">#故障转移的超时时长，即master挂了后slave变为新master的超时时长，单位为ms</span></span><br><span class="line">sentinel failover-timeout mymaster 15000</span><br><span class="line"><span class="comment">#master启动auth时需要验证</span></span><br><span class="line">sentinel auth-pass mymaster 123</span><br></pre></td></tr></table></figure><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用该命令根据PATH位置的配置文件启动一个sentinel</span></span><br><span class="line">redis-sentinel PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用redis-cli可以进入交互式</span></span><br><span class="line">redis-cli -h IP -p PORT</span><br><span class="line"></span><br><span class="line"><span class="comment">#相关命令</span></span><br><span class="line"><span class="comment">#查看master信息</span></span><br><span class="line">sentinel masters</span><br><span class="line"><span class="comment">#查看slave信息，需要指明是哪个master集群的</span></span><br><span class="line">sentinel slaves &lt;master name&gt;</span><br><span class="line"><span class="comment">#根据master名称获取master地址</span></span><br><span class="line">sentinel get-master-addr-by-name &lt;master name&gt;</span><br><span class="line"><span class="comment">#重置所有操作</span></span><br><span class="line">sentinel reset</span><br><span class="line"><span class="comment">#手动执行故障转移</span></span><br><span class="line">sentinel failover &lt;master name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主从复制&quot;&gt;&lt;a href=&quot;#主从复制&quot; class=&quot;headerlink&quot; title=&quot;主从复制&quot;&gt;&lt;/a&gt;主从复制&lt;/h3&gt;&lt;p&gt;redis的主从复制与mysql类似，将数据从master复制到slave，从而实现数据集的冗余。用户向master端写数据时，redis通过sync以非阻塞方式向slave发送数据，从而slave执行相同操作。另外每个master可以有多个slave，每个slave也可以有slave，即支持串行链式复制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="主从复制" scheme="http://yoursite.com/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis(4)-持久化</title>
    <link href="http://yoursite.com/2020/02/13/Redis-4-%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/13/Redis-4-%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2020-02-13T14:01:13.000Z</published>
    <updated>2020-02-13T14:05:28.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>redis数据全部保存在内存中，因此它处理请求很快，但是为了长久保存这些数据还需要将内存中的数据保存到磁盘中，这就引出持久化概念。需要注意的是，持久化不能取代备份，仍然要指定相关的备份策略。</p><a id="more"></a><h4 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h4><p>当我们使用fork系统调用生成一个子进程时，为了提高进程创建的速度，子进程的内存不使用调度的方式分配，而是使用类似页面共享的方法，即子进程的虚拟地址和物理地址的映射和父进程映射是相同的，子进程的地址空间相当于父进程的副本。</p><p>当子进程或者父进程发生写操作时，将需要写的物理内存地址空间作复制一份，即写在新的物理地址空间，这样就不会影响原来的地址空间内的数据。即不管父进程还是子进程对其共享的内存中的数据进行修改都不会影响对方的访问，对方仍然访问的是fork是的数据。</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>以fork方式生成一个子进程以快照模式保存整个数据集，保存格式是二进制格式。它按照事先定义的策略，周期性地将数据全部保存至磁盘(不是增量)，其数据文件默认为dump.rdb。linux操作系统有<strong>写时复制</strong>机制，父进程和子进程会共享相同的物理页面，当父进程处理写请求时，操作系统为父进程修改的页面创建副本，因此此时子进程快照保存时一定是时间点一致的数据。(RDB时只有父进程写，子进程负责读进行备份)</p><p>客户端也可以显示使用SAVE和BGSAVE命令启动快照保存机制</p><ul><li>SAVE：同步，在主进程中保存快照，此时会阻塞所有客户端请求</li><li>BGSAVE：异步，fork子进程在后台执行，不会阻塞主进程处理请求</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RDB配置文件，保存在/etc/redis目录中</span></span><br><span class="line">save<span class="comment">#这里是用来配置触发Redis的持久化条件，也就是什么时候将内存中的数据保存到硬盘，格式为save num1 num2表示num1秒内有num2个key发生变化则同步到磁盘，使用的是bgsave机制</span></span><br><span class="line">rdbcompression<span class="comment">#对于存储在磁盘的快照是否压缩存储，默认为yes</span></span><br><span class="line">rdbchecksum<span class="comment">#对于存储的快照是否校验，默认yes</span></span><br><span class="line">dbfilename<span class="comment">#设置快照名称，默认为dump.rdb</span></span><br><span class="line">dir<span class="comment">#设置快照文件的存放路径，这个配置项一定是个目录，使用dbfilename作为文件名</span></span><br><span class="line">stop-writes-on-bgsave-error<span class="comment">#当同步磁盘失败时是否停止接收数据，默认为yes</span></span><br></pre></td></tr></table></figure><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>Append only file，表示将所有写操作都追加到AOF文件的末尾，但是这样可能会因为重复冗余的写操作导致文件过大，因此redis提供合并冗余操作的机制BGREWRITEAOF来优化。例如重复1000次incr命令，这样会导致大量的incr命令附加到AOF文件末尾，这效率极低，而使用BGREWRITEAOF优化后会将重复的写命令以少量的已存在的命令进行替换。这种优化策略根据redis版本分为两种：</p><ul><li>4.0以前：BGREWRITEAOF实际上是对内存中现存的AOF文件进行重写，首先主进程fork一个子进程来处理，它不会读取内存中已存的AOF文件，而是通过将内存中的数据以命令的方式保存到临时文件中，在这个过程中主进程仍然会接收客户端请求，且将这些请求的写操作依然保存于原来的AOF文件中且同时保存在一个缓冲队列中(依旧保存在老的AOF文件中是防止重写AOF失败导致这期间的写操作请求丢失)，子进程重写入临时文件结束后通知父进程，父进程将保存在缓冲队列中的命令追加写入临时文件中，然后父进程用临时文件替换老的AOF文件。</li><li>4.0以后：采取的策略也是重写，它虽然使用BGREWRITEAOF机制来优化但优化机制不一样，新版使用的是RDB和AOF结合的方式。它将老的数据RDB到AOF文件中，将增量的数据以指令的方式追加到AOF中。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AOF配置文件，保存在/etc/redis目录中</span></span><br><span class="line">appendonly<span class="comment">#使用AOF主从方式，默认为no</span></span><br><span class="line">appendfilename<span class="comment">#文件名称</span></span><br><span class="line">appendfsync<span class="comment">#持久策略，no表示不执行fsync，由内核保证数据同步到磁盘(内核缓冲区满后写入磁盘)，可能会丢失一个缓冲区大小的数据(一般位4k)；always表示每次写入都执行fsync，以保证数据同步到磁盘；everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line">auto-aof-rewrite-percentage 100<span class="comment">#表示当前AOF文件已经是上次重写AOF是的二倍，立即触发重写AOF</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb<span class="comment">#表示当前AOF文件大小超过64mb时进行AOF重写操作</span></span><br><span class="line">no-appendfsync-on-rewrite no<span class="comment">#表示是否在重写AOF时将新写操作进行缓存，yes表示缓存</span></span><br><span class="line">aof-use-rdb-preamble yes<span class="comment">#是否使用老数据rdb，新数据AOF的方式进行持久化</span></span><br></pre></td></tr></table></figure><h4 id="AOF文件格式"><a href="#AOF文件格式" class="headerlink" title="AOF文件格式"></a>AOF文件格式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#假设写一个set k1 hello</span></span><br><span class="line"><span class="string">*2</span></span><br><span class="line"><span class="string">$6</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">$1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">*3</span></span><br><span class="line"><span class="string">$3</span></span><br><span class="line"><span class="string">set</span></span><br><span class="line"><span class="string">$2</span></span><br><span class="line"><span class="string">k1</span></span><br><span class="line"><span class="string">$5</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">第一行*2表示这一部分有两段，分别是$开头的两个</span></span><br><span class="line"><span class="string">$6表示下一个操作的字符数</span></span><br><span class="line"><span class="string">可以手动删除操作过的序列，没写入磁盘时可以重启redis进行恢复</span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果RDB和AOF同时启用，则BGSAVE和BGREWRITEAOF不会同时执行，且在redis服务器启动用于恢复数据时，优先使用AOF。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;持久化&quot;&gt;&lt;a href=&quot;#持久化&quot; class=&quot;headerlink&quot; title=&quot;持久化&quot;&gt;&lt;/a&gt;持久化&lt;/h3&gt;&lt;p&gt;redis数据全部保存在内存中，因此它处理请求很快，但是为了长久保存这些数据还需要将内存中的数据保存到磁盘中，这就引出持久化概念。需要注意的是，持久化不能取代备份，仍然要指定相关的备份策略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="写时复制" scheme="http://yoursite.com/tags/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis(3)-事务、订阅、缓存</title>
    <link href="http://yoursite.com/2020/02/13/Redis-3-%E4%BA%8B%E5%8A%A1%E3%80%81%E8%AE%A2%E9%98%85%E3%80%81%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2020/02/13/Redis-3-%E4%BA%8B%E5%8A%A1%E3%80%81%E8%AE%A2%E9%98%85%E3%80%81%E7%BC%93%E5%AD%98/</id>
    <published>2020-02-13T14:00:46.000Z</published>
    <updated>2020-02-13T14:05:13.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>redis事务通过Multi、Exec、Watch等命令实现。它只是将一些列命令打包执行，当这些命令没有执行完时不会处理其他命令。不支持回滚操作。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先在redis-cli中执行MULTI命令启动事务</span></span><br><span class="line">MULTI</span><br><span class="line"><span class="comment">#使用MULTI后直接写各个命令即可，注意这些命令没有被执行</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#执行上述MULTI定义的命令序列，即执行事务，并一次性返回所有操作结果</span></span><br><span class="line">EXEC</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">WATCH命令用于在EXEC执行前监视指定的任意数量的键，如果有键发生改变则拒绝执行事务</span><br><span class="line">WATCH命令在MULTI之前使用，且指定键名，如：WATCH IP表示监听名称为IP的键</span><br></pre></td></tr></table></figure><h3 id="消息订阅"><a href="#消息订阅" class="headerlink" title="消息订阅"></a>消息订阅</h3><p>由list实现消息队列，每个list相当于一个channel频道。由list维护消息队列的效率很高，因为list相当于一个链表，在它left和right进行元素的插入和删除的复杂度是常量级别。</p><p>使用subscribe和publish实现消息的订阅和推送，用unsubscribe进行退订，用psubscribe进行模式订阅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#订阅名为news的channel</span></span><br><span class="line">subscribe news</span><br><span class="line"></span><br><span class="line"><span class="comment">#另起一个终端进行消息推送，即可在订阅端接收到消息</span></span><br><span class="line">publish news hello</span><br><span class="line"></span><br><span class="line"><span class="comment">#模式订阅，表示订阅了new.io和new.it两个</span></span><br><span class="line">psubscribe new.i[to]</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>redis既可以作数据库也可以作缓存，缓存的数据肯定不是全量的数据库而是一些所谓的热数据，那么如何定义热数据呢？这就引入了key的有效期机制和redis的内存调度机制。</p><h4 id="有效期"><a href="#有效期" class="headerlink" title="有效期"></a>有效期</h4><p>在set命令时就可以设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置key和value</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">set</span></span><br><span class="line">SET key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">NX：键存在时不能操作，类似于新建</span><br><span class="line">XX：键存在时才能操作，类似于更新</span><br><span class="line">EX seconds：键多少秒后到期，设置存活时间(注意存活时间不会因为访问次数而增加)，如果发生写操作会修改过期时间</span><br></pre></td></tr></table></figure><p>当某个键过期时，redis不会立刻在内存中删除这个数据，这里有两种方式来处理有效期到期的键</p><ul><li>被动方式：当客户端访问时发现ttl到期说明key过期从而删除</li><li>主动方式：redis以轮询方式查询一部分key来检测是否过期</li></ul><h4 id="内存调度"><a href="#内存调度" class="headerlink" title="内存调度"></a>内存调度</h4><p>当redis内存占满了时又不断接收到写操作请求，那么就会引起内存调度，常见的调度方式有：</p><ul><li>noeviction：只返回错误信息，不做key的删除</li><li>LRU：删除最近最少使用的key</li><li>LFU：删除使用次数最少的key</li></ul><h4 id="bloom过滤器"><a href="#bloom过滤器" class="headerlink" title="bloom过滤器"></a>bloom过滤器</h4><p>考虑一种情况，当客户端请求一个key时redis内存中没有，那么这个请求会查询关系型数据库，如果关系型数据库也没有，那么才返回查找失败，这个行为叫做缓存穿透，这会浪费关系型数据库的大量时间消耗。鉴于这种情况提出了bloom过滤器的概念。</p><p>bloom过滤器是一个redis的第三方插件，它实现将关系型数据库中有的数据进行三次hash映射函数的映射，并在内存中维护一个bitmap数组，将每个元素的三次hash值依次存放在对应的bitmap位中。</p><p>在经过上述处理后，假设现在有一个请求到达，这个请求如果没有被redis名字，那么进行hash计算，看看计算的结果有没有与bitmap匹配的结果，如果有说明关系型数据库中有该值，如果没有则说明不匹配，则不查询后端数据库。但这里要考虑一种特殊情况，即假设请求的是关系型数据库不存在的键，但是hash的值却与现存的bitmap重复了(可能一部分是一个键，一部分是另一个键)，那么这种情况也会查询关系型数据库，会造成一定的损耗(出现该情况可以将该key加入到redis中，值设置为空，以防下次穿透)。因此，bloom过滤器是概率性解决问题，但是概率很大且维护bitmap的开销很小，因此性能较好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/RedisBloom/RedisBloom.git</span><br><span class="line"><span class="comment">#编译，编译后出现.so文件，即为redis模块</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#启动时加载，或者在配置文件中loadmodule均可，路径必须是绝对路径</span></span><br><span class="line">redis-server --loadmodule /path/to/redisbloom.so</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令</span></span><br><span class="line"><span class="comment">#将键foo添加到过滤器newfilter</span></span><br><span class="line">BF.ADD newFilter foo</span><br><span class="line"><span class="comment">#判断键是否存在</span></span><br><span class="line">BF.EXISTS newFilter foo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h3&gt;&lt;p&gt;redis事务通过Multi、Exec、Watch等命令实现。它只是将一些列命令打包执行，当这些命令没有执行完时不会处理其他命令。不支持回滚操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="bloom过滤" scheme="http://yoursite.com/tags/bloom%E8%BF%87%E6%BB%A4/"/>
    
      <category term="缓存穿透" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis(2)-数据类型和常用命令</title>
    <link href="http://yoursite.com/2020/02/12/Redis-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/02/12/Redis-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-12T06:31:28.000Z</published>
    <updated>2020-02-13T14:11:52.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>redis中存储的是KV键值对，其中key是一个对象，其内存储与value类型有关。</p><p>value是有类型的值，包括string、hash、list、set等。</p><a id="more"></a><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查key对应值的数据类型</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">type</span></span><br><span class="line">TYPE key</span><br></pre></td></tr></table></figure><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取redis对象的信息</span></span><br><span class="line"><span class="built_in">help</span> object</span><br><span class="line">OBJECT subcommand [arguments [arguments ...]]</span><br><span class="line">[subcommand]</span><br><span class="line">encoding：查看key对应value的编码格式</span><br></pre></td></tr></table></figure><h4 id="flushall"><a href="#flushall" class="headerlink" title="flushall"></a>flushall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#情空所有key</span></span><br><span class="line"><span class="built_in">help</span> flushall</span><br><span class="line">FLUSHALL [ASYNC]</span><br></pre></td></tr></table></figure><h4 id="flushdb"><a href="#flushdb" class="headerlink" title="flushdb"></a>flushdb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清空当前db的所有key</span></span><br><span class="line"><span class="built_in">help</span> flushdb</span><br><span class="line">FLUSHDB [ASYNC]</span><br></pre></td></tr></table></figure><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取匹配pattern的所有key</span></span><br><span class="line"><span class="built_in">help</span> keys</span><br><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line"><span class="built_in">help</span> select</span><br><span class="line">SELECT INDEX</span><br></pre></td></tr></table></figure><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重命名key</span></span><br><span class="line"><span class="built_in">help</span> rename</span><br><span class="line">RENAME key newkey</span><br></pre></td></tr></table></figure><h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以秒为单位返回指定key剩余生存时间</span></span><br><span class="line"><span class="built_in">help</span> ttl</span><br><span class="line">TTL key</span><br></pre></td></tr></table></figure><h4 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给指定key设置生存时间</span></span><br><span class="line"><span class="built_in">help</span> expire</span><br><span class="line">EXPIRE key seconds</span><br></pre></td></tr></table></figure><h4 id="expireat"><a href="#expireat" class="headerlink" title="expireat"></a>expireat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在指定时间过期</span></span><br><span class="line"><span class="built_in">help</span> expireat</span><br><span class="line">EXPIREAT key timestamp</span><br></pre></td></tr></table></figure><h4 id="persist"><a href="#persist" class="headerlink" title="persist"></a>persist</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定key的生存时间</span></span><br><span class="line"><span class="built_in">help</span> persist</span><br><span class="line">PERSIST key</span><br></pre></td></tr></table></figure><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除给定的key</span></span><br><span class="line"><span class="built_in">help</span> del</span><br><span class="line">DEL key [key ...]</span><br></pre></td></tr></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">help</span> exists</span><br><span class="line">EXISTS key [key ...]</span><br></pre></td></tr></table></figure><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将当前数据库的指定key转移到指定数据库中</span></span><br><span class="line"><span class="built_in">help</span> move</span><br><span class="line">MOVE key db</span><br></pre></td></tr></table></figure><h4 id="randomkey"><a href="#randomkey" class="headerlink" title="randomkey"></a>randomkey</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从当前数据库随机返回一个key，不删除</span></span><br><span class="line"><span class="built_in">help</span> randomkey</span><br><span class="line">RANDOMKEY -</span><br></pre></td></tr></table></figure><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><h4 id="client-getname"><a href="#client-getname" class="headerlink" title="client getname"></a>client getname</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取当前连接名称</span></span><br><span class="line"><span class="built_in">help</span> client getname</span><br><span class="line">CLIENT GETNAME</span><br></pre></td></tr></table></figure><h4 id="client-setname"><a href="#client-setname" class="headerlink" title="client setname"></a>client setname</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置当前连接的名称</span></span><br><span class="line"><span class="built_in">help</span> client setname</span><br><span class="line">CLIENT SETNAME</span><br></pre></td></tr></table></figure><h4 id="client-kill"><a href="#client-kill" class="headerlink" title="client kill"></a>client kill</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#杀死指定连接的客户端</span></span><br><span class="line"><span class="built_in">help</span> clent <span class="built_in">kill</span></span><br><span class="line">CLIENT KILL ip:port</span><br></pre></td></tr></table></figure><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取当前服务器信息</span></span><br><span class="line"><span class="built_in">help</span> info</span><br><span class="line">INFO [section]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">section可以查看指定段的状态信息</span><br></pre></td></tr></table></figure><h4 id="config-resetstat"><a href="#config-resetstat" class="headerlink" title="config resetstat"></a>config resetstat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重置info统计的数据</span></span><br><span class="line"><span class="built_in">help</span> config resetstat</span><br><span class="line">CONFIG RESETSTAT</span><br></pre></td></tr></table></figure><h4 id="config-get"><a href="#config-get" class="headerlink" title="config get"></a>config get</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取配置文件各个属性</span></span><br><span class="line"><span class="built_in">help</span> config get</span><br><span class="line">CONFIG GET parameter</span><br></pre></td></tr></table></figure><h4 id="config-set"><a href="#config-set" class="headerlink" title="config set"></a>config set</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置redis配置文件参数</span></span><br><span class="line"><span class="built_in">help</span> config <span class="built_in">set</span></span><br><span class="line">CONFIG SET parameter value</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">上述修改方式只是在内存中修改，不会写入到内存中</span><br></pre></td></tr></table></figure><h4 id="config-rewrite"><a href="#config-rewrite" class="headerlink" title="config rewrite"></a>config rewrite</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将config set修改的配置信息写入磁盘中的配置文件中</span></span><br><span class="line"><span class="built_in">help</span> config rewrite</span><br><span class="line">CONFIG REWRITE</span><br></pre></td></tr></table></figure><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同步内存到磁盘</span></span><br><span class="line"><span class="built_in">help</span> save</span><br><span class="line">SAVE</span><br></pre></td></tr></table></figure><h4 id="bgrewriteaof"><a href="#bgrewriteaof" class="headerlink" title="bgrewriteaof"></a>bgrewriteaof</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#异步方式重写AOF文件</span></span><br><span class="line"><span class="built_in">help</span> bgrewriteaof</span><br><span class="line">BGREWRITEAOF</span><br></pre></td></tr></table></figure><h4 id="lastsave"><a href="#lastsave" class="headerlink" title="lastsave"></a>lastsave</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取最后一次保存磁盘的时间戳</span></span><br><span class="line"><span class="built_in">help</span> lastsave</span><br><span class="line">LASTSAVE</span><br></pre></td></tr></table></figure><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同步数据到磁盘后关闭服务</span></span><br><span class="line"><span class="built_in">help</span> shutdown</span><br><span class="line">SHUTDOWN [NOSAVE|SAVE]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">nosave表示不启用安全检查</span><br><span class="line">save表示启用安全检查</span><br></pre></td></tr></table></figure><h4 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#监听服务器上所有的请求</span></span><br><span class="line"><span class="built_in">help</span> monitor</span><br><span class="line">MONITOR</span><br></pre></td></tr></table></figure><h4 id="slaveof"><a href="#slaveof" class="headerlink" title="slaveof"></a>slaveof</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置主从</span></span><br><span class="line"><span class="built_in">help</span> slaveof</span><br><span class="line">SLAVEOF host port</span><br></pre></td></tr></table></figure><h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主从节点同步</span></span><br><span class="line"><span class="built_in">help</span> sync</span><br><span class="line">SYNC</span><br></pre></td></tr></table></figure><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><h4 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标记开启事务，后续输入的命令加入缓冲队列</span></span><br><span class="line"><span class="built_in">help</span> multi</span><br><span class="line">MULTI</span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标记事务开始执行，执行事务定义的一系列命令</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">exec</span></span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure><h4 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#丢弃multi定义的所有命令</span></span><br><span class="line"><span class="built_in">help</span> discard</span><br><span class="line">DISCARD</span><br></pre></td></tr></table></figure><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于multi之前，如果监控的key发生变化则事务不执行</span></span><br><span class="line"><span class="built_in">help</span> watch</span><br><span class="line">WATCH key [key ...]</span><br></pre></td></tr></table></figure><h4 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消所有监控的值</span></span><br><span class="line"><span class="built_in">help</span> unwatch</span><br><span class="line">UNWATCH</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>string数据类型具体编码格式分为字符串、bitmap、数值。它是二进制安全的，即redis与socket交互时使用的是字节流而不是字符流。因为不同编程语言对字符流的理解不同(长度等)，可能会出现截断溢出等，而字节流只需要收发双发能够编码与解码即可。</p><p>value为String类型的key，key中存储有type、encoding、length等对应value的属性，存储type是为了快速判断对value的操作是否合法，length等属性也是为了加速操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看string类型所有操作，本篇文章所有操作都在redis-cli中运行</span></span><br><span class="line"><span class="built_in">help</span> @string</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置key和value</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">set</span></span><br><span class="line">SET key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">NX：键存在时不能操作，类似于新建</span><br><span class="line">XX：键存在时才能操作，类似于更新</span><br><span class="line">EX seconds：键多少秒后到期，设置存活时间(注意存活时间不会因为访问次数而增加)，如果发生写操作会修改过期时间</span><br></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取对应key的value</span></span><br><span class="line"><span class="built_in">help</span> get</span><br><span class="line">GET key</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">value不存在时返回nil</span><br><span class="line">key存储的不是字符串时返回错误，get只能获取字符串</span><br></pre></td></tr></table></figure><h5 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同时设置多个key的value</span></span><br><span class="line"><span class="built_in">help</span> mset</span><br><span class="line">MSET key value [key value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">mset是一个原子操作，不存在部分更新</span><br></pre></td></tr></table></figure><h5 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#同时获取多个key的value</span></span><br><span class="line"><span class="built_in">help</span> mget</span><br><span class="line">MGET key [key ...]</span><br></pre></td></tr></table></figure><h5 id="msetnx"><a href="#msetnx" class="headerlink" title="msetnx"></a>msetnx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#key存在时更新，原子操作</span></span><br><span class="line"><span class="built_in">help</span> msetnx</span><br><span class="line">MSETNX key value [key value ...]</span><br></pre></td></tr></table></figure><h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#追加字符串</span></span><br><span class="line"><span class="built_in">help</span> append</span><br><span class="line">APPEND key value</span><br></pre></td></tr></table></figure><h5 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定范围的字符串</span></span><br><span class="line"><span class="built_in">help</span> getrange</span><br><span class="line">GETRANGE key [start end]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">给定字符串例如<span class="string">"Hello"</span>，它存在正向索引和反向索引。正向索引是从左到右0、1...反向索引是从右到左-1、-2...</span><br></pre></td></tr></table></figure><h5 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置某个范围的值</span></span><br><span class="line"><span class="built_in">help</span> setrange</span><br><span class="line">SETRANGE key offset value</span><br></pre></td></tr></table></figure><h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取字符串长度，包括空格</span></span><br><span class="line"><span class="built_in">help</span> strlen</span><br><span class="line">STRLEN key</span><br></pre></td></tr></table></figure><h5 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改key值为给出的value，并返回旧的value值，可以减少依次网络io</span></span><br><span class="line"><span class="built_in">help</span> getset</span><br><span class="line">GETSET key value</span><br></pre></td></tr></table></figure><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><h5 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#key值加1</span></span><br><span class="line"><span class="built_in">help</span> incr</span><br><span class="line">INCR key</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">key不存在时初始为0后加1</span><br><span class="line">范围为64位有符号数</span><br></pre></td></tr></table></figure><h5 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#key值减1</span></span><br><span class="line"><span class="built_in">help</span> decr</span><br><span class="line">DECR key</span><br></pre></td></tr></table></figure><h5 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加指定数值</span></span><br><span class="line"><span class="built_in">help</span> incrby</span><br><span class="line">INCRBY key increment</span><br></pre></td></tr></table></figure><h5 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#减少指定数值</span></span><br><span class="line"><span class="built_in">help</span> decrby</span><br><span class="line">DECRBY key decrement</span><br></pre></td></tr></table></figure><h5 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加浮点数</span></span><br><span class="line"><span class="built_in">help</span> incrbyfloat</span><br><span class="line">INCRBYFLOAT key increment</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">increment为正表示增加</span><br><span class="line">increment为负表示减少</span><br></pre></td></tr></table></figure><h4 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h4><h5 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置对应二进制偏移的值</span></span><br><span class="line"><span class="built_in">help</span> setbit</span><br><span class="line">SETBIT key offset value</span><br></pre></td></tr></table></figure><h5 id="bitpos"><a href="#bitpos" class="headerlink" title="bitpos"></a>bitpos</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找bit第一次出现的位置</span></span><br><span class="line"><span class="built_in">help</span> bitpos</span><br><span class="line">BITPOS key bit [start] [end]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">[start]和[end]表示字符序号，返回值为出现给定bit的字节序号</span><br></pre></td></tr></table></figure><h5 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计指定bit出现次数</span></span><br><span class="line"><span class="built_in">help</span> bitcount</span><br><span class="line">BITCOUNT key [start end]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">[start]和[end]表示字符序号</span><br></pre></td></tr></table></figure><h5 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#位操作</span></span><br><span class="line"><span class="built_in">help</span> bitop</span><br><span class="line">BITOP operation destkey key [key ...]</span><br><span class="line">and：与操作</span><br><span class="line">or：或操作</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>list类型的value对应的key对象存储着value链表的head和tail指针，key也存储value类型type为list。</p><p>list可以实现栈、队列、数组、阻塞单播队列</p><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从链表左端放入值</span></span><br><span class="line"><span class="built_in">help</span> lpush</span><br><span class="line">LPUSH key value [value ...]</span><br></pre></td></tr></table></figure><h4 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从链表右边放入值</span></span><br><span class="line"><span class="built_in">help</span> rpush</span><br><span class="line">RPUSH key value [value ...]</span><br></pre></td></tr></table></figure><h4 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#左侧出第一个值</span></span><br><span class="line"><span class="built_in">help</span> lpop</span><br><span class="line">LPOP key</span><br></pre></td></tr></table></figure><h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取list链表start开始stop结束的值，正反索引都可以</span></span><br><span class="line"><span class="built_in">help</span> lrange</span><br><span class="line">LRANGE key [start] [stop]</span><br></pre></td></tr></table></figure><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定下标的值</span></span><br><span class="line"><span class="built_in">help</span> lindex</span><br><span class="line">LINDEX key index</span><br></pre></td></tr></table></figure><h4 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置指定index的value</span></span><br><span class="line"><span class="built_in">help</span> lset</span><br><span class="line">LSET key index value</span><br></pre></td></tr></table></figure><h4 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从指定pivot前或后插入指定value，pivot是存在的元素值，不是索引</span></span><br><span class="line"><span class="built_in">help</span> linsert</span><br><span class="line">LINSERT key BEFORE|AFTER pivot value</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">如果pivot存在多个，只在第一个匹配处操作</span><br></pre></td></tr></table></figure><h4 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除list链表中指定个数的指定value</span></span><br><span class="line"><span class="built_in">help</span> lrem</span><br><span class="line">LREM key count value</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">count为正数时表示下标从0开始从前往后匹配</span><br><span class="line">count为负数时表示下标从-1开始从后往前匹配</span><br></pre></td></tr></table></figure><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取list链表长度</span></span><br><span class="line"><span class="built_in">help</span> llen</span><br><span class="line">LLEN key</span><br></pre></td></tr></table></figure><h4 id="blpop"><a href="#blpop" class="headerlink" title="blpop"></a>blpop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阻塞式获取左侧第一个list的值</span></span><br><span class="line"><span class="built_in">help</span> blpop</span><br><span class="line">BLPOP key [key ...] timeout</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">若有多个客户端对同一个key进行blpop，那么会按照阻塞队列顺序进行获取值(先来后到)</span><br></pre></td></tr></table></figure><h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对给定start和stop的两端数据进行删除</span></span><br><span class="line"><span class="built_in">help</span> ltrim</span><br><span class="line">LTRIM key start stop</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>表示value的类型为hash键值对，即KV类型的值中V的值本身又是一个hash键值对。</p><h4 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个键值对</span></span><br><span class="line"><span class="built_in">help</span> hset</span><br><span class="line">HSET key field value</span><br></pre></td></tr></table></figure><h4 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取一个键值对</span></span><br><span class="line"><span class="built_in">help</span> hget</span><br><span class="line">HGET key field</span><br></pre></td></tr></table></figure><h4 id="hemset"><a href="#hemset" class="headerlink" title="hemset"></a>hemset</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置多个键值对</span></span><br><span class="line"><span class="built_in">help</span> hmset</span><br><span class="line">HMSET key field value [field value ...]</span><br></pre></td></tr></table></figure><h4 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取多个键值对</span></span><br><span class="line"><span class="built_in">help</span> hmget</span><br><span class="line">HMGET key field [field ...]</span><br></pre></td></tr></table></figure><h4 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定key的所有"键"</span></span><br><span class="line"><span class="built_in">help</span> hkeys</span><br><span class="line">HKEYS key</span><br></pre></td></tr></table></figure><h4 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定key的所有"值"</span></span><br><span class="line"><span class="built_in">help</span> hvals</span><br><span class="line">HVALS key</span><br></pre></td></tr></table></figure><h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定key的所有键值对，一键一值显示</span></span><br><span class="line"><span class="built_in">help</span> hgetall</span><br><span class="line">HGETALL key</span><br></pre></td></tr></table></figure><h4 id="hincrbyfloat"><a href="#hincrbyfloat" class="headerlink" title="hincrbyfloat"></a>hincrbyfloat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#浮点数增加</span></span><br><span class="line"><span class="built_in">help</span> hincrbyfloat</span><br><span class="line">HINCRBYFLOAT key field increment</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">increment为正表示增加</span><br><span class="line">increment为负表示减少</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>可以理解为去重的list，但是list是有序的(存储顺序，不是排序)，而set是<strong>无序</strong>的。元素类型为string。</p><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将一个或多个member加入到key中</span></span><br><span class="line"><span class="built_in">help</span> sadd</span><br><span class="line">SADD key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定的key的所有成员</span></span><br><span class="line"><span class="built_in">help</span> smembers</span><br><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure><h4 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取指定集合的交集</span></span><br><span class="line"><span class="built_in">help</span> sinter</span><br><span class="line">SINTER key [key ...]</span><br></pre></td></tr></table></figure><h4 id="sinterstore"><a href="#sinterstore" class="headerlink" title="sinterstore"></a>sinterstore</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#和sinter类似，它是将交集存到指定集合中</span></span><br><span class="line"><span class="built_in">help</span> sinterstore</span><br><span class="line">SINTERSTORE destination key [key ...]</span><br></pre></td></tr></table></figure><h4 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回多个集合的并集</span></span><br><span class="line"><span class="built_in">help</span> sunio</span><br><span class="line">SUNION key [key ...]</span><br></pre></td></tr></table></figure><h4 id="sunionstore"><a href="#sunionstore" class="headerlink" title="sunionstore"></a>sunionstore</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#和sunion类似，它是将并集存到指定集合中</span></span><br><span class="line"><span class="built_in">help</span> sunionstore</span><br><span class="line">SUNIONSTORE destination key [key ...]</span><br></pre></td></tr></table></figure><h4 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断指定key中是否存在指定member</span></span><br><span class="line"><span class="built_in">help</span> sismember</span><br><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回key对应的集合中的元素数量</span></span><br><span class="line"><span class="built_in">help</span> scard</span><br><span class="line">SCARD key</span><br></pre></td></tr></table></figure><h4 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将member元素从source集合移动到destination集合中</span></span><br><span class="line"><span class="built_in">help</span> smove</span><br><span class="line">SMOVE <span class="built_in">source</span> destination member</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">若destination集合中已包含了<span class="built_in">source</span>要移动的元素则单纯的删除<span class="built_in">source</span>集合中的待移动元素</span><br></pre></td></tr></table></figure><h4 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除并返回集合中的count个随机元素，如果count不指定那么随机返回一个元素</span></span><br><span class="line"><span class="built_in">help</span> spop</span><br><span class="line">SPOP key [count]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">count为正数且小于集合大小时返回指定数量的随机元素(各不相同)</span><br><span class="line">count为正数但大于集合大小时返回全部集合元素</span><br><span class="line">count为负数则返回其绝对值个数个随机元素(元素可能重复)</span><br></pre></td></tr></table></figure><h4 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除指定集合的一个或多个集合</span></span><br><span class="line"><span class="built_in">help</span> srem</span><br><span class="line">SREM key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回指定集合内的count个随机元素</span></span><br><span class="line"><span class="built_in">help</span> srandmember</span><br><span class="line">SRANDMEMBER key [count]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">count为正数且小于集合大小时返回指定数量的随机元素(各不相同)</span><br><span class="line">count为正数但大于集合大小时返回全部集合元素</span><br><span class="line">count为负数则返回其绝对值个数个随机元素(元素可能重复)</span><br></pre></td></tr></table></figure><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>它和set一样都是集合，但是它是string类型<strong>有序</strong>集合。</p><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将一个或多个member及其socre添加到set中</span></span><br><span class="line"><span class="built_in">help</span> zadd</span><br><span class="line">ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">NX：键存在时不能操作，类似于新建</span><br><span class="line">XX：键存在时才能操作，类似于更新</span><br></pre></td></tr></table></figure><h4 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回集合中元素个数</span></span><br><span class="line"><span class="built_in">help</span> zcard</span><br><span class="line">ZCARD key</span><br></pre></td></tr></table></figure><h4 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回指定集合中score值在min和max之间的member</span></span><br><span class="line"><span class="built_in">help</span> zcount</span><br><span class="line">ZCOUNT key min max</span><br></pre></td></tr></table></figure><h4 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回指定集合中区间内的成员，按score从小到大排序</span></span><br><span class="line"><span class="built_in">help</span> zrange</span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">若score相同则按字典顺序排列</span><br><span class="line">若想要从大到小排列则使用zrevrange</span><br><span class="line">下标支持正反索引</span><br><span class="line">WITHSCORES表示member和score一并返回</span><br></pre></td></tr></table></figure><h4 id="zrank"><a href="#zrank" class="headerlink" title="zrank"></a>zrank</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回有序集合中member的排名，从0开始，且score从小到大</span></span><br><span class="line"><span class="built_in">help</span> zrank</span><br><span class="line">ZRANK key member</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">若想要从大到小排列则使用zrevrank</span><br></pre></td></tr></table></figure><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除一个或多个member</span></span><br><span class="line"><span class="built_in">help</span> zrem</span><br><span class="line">ZREM key member [member ...]</span><br></pre></td></tr></table></figure><h4 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank"></a>zremrangebyrank</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除有序集合中指定区间内的所有成员</span></span><br><span class="line"><span class="built_in">help</span> zremrangebyrank</span><br><span class="line">ZREMRANGEBYRANK key start stop</span><br></pre></td></tr></table></figure><h4 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore"></a>zremrangebyscore</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除有序集合中score值在指定范围的member</span></span><br><span class="line"><span class="built_in">help</span> zremrangebyscore</span><br><span class="line">ZREMRANGEBYSCORE key min max</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;redis中存储的是KV键值对，其中key是一个对象，其内存储与value类型有关。&lt;/p&gt;
&lt;p&gt;value是有类型的值，包括string、hash、list、set等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis(1)-基本原理和安装配置</title>
    <link href="http://yoursite.com/2020/02/11/Redis-1-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/02/11/Redis-1-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-11T09:34:30.000Z</published>
    <updated>2020-02-13T14:12:08.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Redis是一个KV型存储引擎，为了提高效率，它的所有工作都在内存中实现(可以做缓存)，但为了持久存储也会在磁盘上做冗余。它用作数据结构服务器，即存储例如String、list、Hash、Set、Bitmap等类型的数据。</p><p>Redis工作在单线程单进程单实例模式，它通过内核的epoll系统调用来处理多路并行请求。</p><a id="more"></a><h4 id="epoll原理"><a href="#epoll原理" class="headerlink" title="epoll原理"></a>epoll原理</h4><p>早期的内核程序处理多路请求时使用read系统调用来处理，用户空间的进程如果没有读取到对应的文件描述符fd就会一直阻塞，从而妨碍其他进程处理请求。这就是初期的BIO阻塞模型。</p><p>随后为了解决阻塞问题，提出了同步非阻塞的NIO模型。它支持单进程在用户空间通过轮询的方式处理多个并发请求，这样就不会阻塞(多个进程会阻塞，这里就使用单进程轮询处理)。</p><p>NIO又引出新的问题，即如果请求量很大那么进程将频繁的在用户空间和内核空间进行切换(之所以不停切换是用户空间进程不知道哪些fd已经准备好需要被使用)，会消耗大量CPU资源。为了解决这个问题，内核进行了修改，出现了新的系统调用select。select实现了将多个可以使用的fd同时从内核发送给用户空间进程，由用户空间进程遍历选择依次进行read系统调用读取该连接，这样就大大减少了进程切换的开销。</p><p>上述select方法已经很大程度上减少了资源消耗，但是仍然需要将fd相关数据从内核态内存拷贝到用户空间进程的内存空间，以及select并不知道哪个fd是有数据状态，它自身也需要不断遍历来选择，有没有办法减少这种开销呢？这就引出了epoll机制。它实际上是使用mmap系统调用将用户空间的一块内存和内核空间的一块内存作为共享内存空间，其内维护着数据结构(红黑树和双向链表)，其中红黑树用于管理哪些fd需要被监视，双向链表实现队列。其中双向链表由内核维护，当进程在等待fd时，会创建了一个epoll对象(epoll对象本身也是文件系统资源，也拥有自己的等待队列)并且该epoll对象会被添加到fd等待队列中(如果是多个fd就将epoll放到每个fd等待队列中)。当某个进程调用epoll_wait等待时，内核将该进程添加到epoll对象的等待队列中，当某个fd收到数据时中断程序会修改epoll的双向链表(就绪队列)，添加fd引用并且唤醒阻塞的进程，从而该进程再次得到CPU调用且根据双向链表知道是哪个fd有数据。</p><p>epoll是三个系统调用：</p><ul><li><p>epoll_create：用户创建epoll对象，该对象的成员包括内核维护的双向链表</p></li><li><p>epoll_wait：用于epoll对象等待数据</p></li><li><p>epoll_cli：用于给epoll对象添加需要监控的fd，将fd添加到红黑树上</p></li></ul><h4 id="持久存储"><a href="#持久存储" class="headerlink" title="持久存储"></a>持久存储</h4><p>redis持久存储主要有两种方式：快照和AOF</p><ul><li>snapshotting：快照，数据异步从内存传输到磁盘</li><li>AOF：即将每次的写操作附加在一个文件后面写入磁盘，类似于mysql的事务日志</li></ul><h4 id="NoSql特性"><a href="#NoSql特性" class="headerlink" title="NoSql特性"></a>NoSql特性</h4><p>Redis属于NoSql存储，NoSql存储主要分为四种：KV键值型、Column列式存储、Documentation文档存储、Graph图表存储</p><h4 id="与memcached区别"><a href="#与memcached区别" class="headerlink" title="与memcached区别"></a>与memcached区别</h4><p>memcached也是KV键值对的NoSql型数据库系统，他们都工作在内存中，一个重要的区别是memcached的value是没有数据类型的，而Redis的value是有数据类型的。memcached存储时将所有键值对都获取然后客户端通过程序解码(解析json格式数据)进行特定数据获取，而Redis由于有数据类型且提供了每种类型特定的获取方法(index、lpop等)，因此可以直接获取对应数据，不需要加载全部数据，换句话说所有的计算都是在server端实现不需要客户端额外的解码等消耗，因此大大提高了效率。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官网http://download.redis.io/releases/redis-5.0.7.tar.gz，此处使用编译安装</span></span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar xf redis-5.0.7.tar.gz</span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#安装，将可执行文件迁移</span></span><br><span class="line">make install</span><br><span class="line"><span class="comment">#服务安装，切换至util目录下进行，全部默认即可</span></span><br><span class="line">./install_server.sh</span><br><span class="line"><span class="comment">#启动，名字后面为端口号，根据不同端口进行修改</span></span><br><span class="line">systemctl start redis_6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，如果make失败产生垃圾需要清除，具体命令以README.md为准</span></span><br><span class="line">make distclean</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">redis根据监听端口号不同区分不同的服务</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>redis配置文件根据不同的端口号命名不同，通常以xxxx.conf(其中xxxx为端口号)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">loadmoudle<span class="comment">#加载自定义模块</span></span><br><span class="line"><span class="built_in">bind</span><span class="comment">#redis服务允许访问的地址</span></span><br><span class="line">port<span class="comment">#redis服务运行端口，默认为6379</span></span><br><span class="line">timeout<span class="comment">#客户端连接超时时长，即多久没有操作则关闭连接，0表示不设置时长</span></span><br><span class="line">tcp-keepalive<span class="comment">#周期性检测客户端监控状态，同样0表示不检测</span></span><br><span class="line">protected-mode<span class="comment">#是否开启保护模式，即是否允许客户端连接，默认为yes</span></span><br><span class="line">tcp-backlog<span class="comment">#tcp等待队列长度满后，找其他地方存储请求</span></span><br><span class="line">daemonize<span class="comment">#redis是否运行为守护进程</span></span><br><span class="line">pidfile<span class="comment">#配置PID文件路径</span></span><br><span class="line">loglevel<span class="comment">#定义日志级别debug(开发测试)、verbose、notice(生产环境)、warning，默认为notice</span></span><br><span class="line">logfile<span class="comment">#配置log文件地址,默认打印在命令行终端的窗口上</span></span><br><span class="line">databases<span class="comment">#设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select &lt;dbid&gt;命令选择一个不同的数据库，dbid是一个介于0到databases-1之间的数值。默认值是16，也就是说默认Redis有16个数据库。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内存相关</span></span><br><span class="line">maxmemory<span class="comment">#允许使用的最大内存大小，一般限制在1-10G</span></span><br><span class="line">maxmemory-policy<span class="comment">#内存回收策略，一般有noeviction只返回错误，释放任何键(仅当redis作数据库时设置)；LRU最近最少使用的释放；ttl将设置了ttl的且存活时间较短的键释放；random随机释放；LFU：使用次数最少的释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RDB持久存储相关</span></span><br><span class="line">save<span class="comment">#这里是用来配置触发Redis的持久化条件，也就是什么时候将内存中的数据保存到硬盘，格式为save num1 num2表示num1秒内有num2个key发生变化则同步到磁盘</span></span><br><span class="line">rdbcompression<span class="comment">#对于存储在磁盘的快照是否压缩存储，默认为yes</span></span><br><span class="line">rdbchecksum<span class="comment">#对于存储的快照是否校验，默认yes</span></span><br><span class="line">dbfilename<span class="comment">#设置快照名称，默认为dump.rdb</span></span><br><span class="line">dir<span class="comment">#设置快照文件的存放路径，这个配置项一定是个目录，使用dbfilename作为文件名</span></span><br><span class="line">stop-writes-on-bgsave-error<span class="comment">#当同步磁盘失败时是否停止接收数据，默认为yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主从复制相关</span></span><br><span class="line">replica-serve-stale-data<span class="comment">#主从复制时如何处理客户端请求，默认yes表示正常应答(会有过时数据)，no表示拒绝并返回错误提示</span></span><br><span class="line">replica-read-only<span class="comment">#从节点是否处理请求，默认为yes</span></span><br><span class="line">repl-diskless-sync<span class="comment">#主从数据复制是否使用无硬盘复制功能。默认值为no。</span></span><br><span class="line">repl-diskless-sync-delay<span class="comment">#当启用无硬盘备份，服务器等待一段时间后才会通过套接字向从站传送RDB文件，这个等待时间是可配置的。这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段时间以期更多的从站到达。延迟时间以秒为单位，默认为5秒。要关掉这一功能只需将它设置为0秒，传送会立即启动。默认值为5。</span></span><br><span class="line">repl-disable-tcp-nodelay<span class="comment">#默认值为no。yes表示redis会使用较少量的TCP包和带宽向从站发送数据。但这会导致在从站增加一点数据的延时。Linux内核默认配置情况下最多40毫秒的延时。如果选择no，从站的数据延时不会那么多，但备份需要的带宽相对较多。</span></span><br><span class="line">slave-priority 100<span class="comment">#指明slave的优先级，数字越小优先级越低</span></span><br><span class="line">min-slaves-to-write 3<span class="comment">#如果slave服务器小于3个，master服务器就拒绝写请求</span></span><br><span class="line">min-slaves-max-lag 10<span class="comment">#slave服务器不能滞后于master10s以上，否则master拒绝写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#AOF主从相关</span></span><br><span class="line">appendonly<span class="comment">#使用AOF主从方式，默认为no</span></span><br><span class="line">appendfilename<span class="comment">#文件名称</span></span><br><span class="line">appendfsync<span class="comment">#持久策略，no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快；always表示每次写入都执行fsync，以保证数据同步到磁盘；everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line">auto-aof-rewrite-percentage 100<span class="comment">#表示当前AOF文件已经是上次重写AOF是的二倍，立即触发重写AOF</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb<span class="comment">#表示当前AOF文件大小超过64mb时进行AOF重写操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群相关</span></span><br><span class="line">cluster-enabled<span class="comment">#是否开启集群，默认为no</span></span><br><span class="line">cluster-config-file<span class="comment">#集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息</span></span><br><span class="line">cluster-node-timeout<span class="comment">#节点互连超时的阀值，集群节点超时毫秒数</span></span><br><span class="line">cluster-slave-validity-factor<span class="comment">#可以配置值为10。在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period。如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移</span></span><br><span class="line">cluster-migration-barrier<span class="comment">#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;Redis是一个KV型存储引擎，为了提高效率，它的所有工作都在内存中实现(可以做缓存)，但为了持久存储也会在磁盘上做冗余。它用作数据结构服务器，即存储例如String、list、Hash、Set、Bitmap等类型的数据。&lt;/p&gt;
&lt;p&gt;Redis工作在单线程单进程单实例模式，它通过内核的epoll系统调用来处理多路并行请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="epoll" scheme="http://yoursite.com/tags/epoll/"/>
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>k8s(9)-helm程序包管理</title>
    <link href="http://yoursite.com/2020/02/10/k8s-9-helm%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/02/10/k8s-9-helm%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2020-02-10T06:05:12.000Z</published>
    <updated>2020-02-10T06:05:56.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>为了解决各个服务安装pod时的依赖以及资源文件修改编写等问题从而提出helm。helm和yum类似，可以理解为包管理工具。</p><a id="more"></a><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ul><li><p>chart：一个helm程序包，是创建一个应用的信息集合，包含各种Kubernetes对象的配置模板、参数定义、依赖关系、文档说明等。可以将Chart比喻为yum中的软件安装包；char包括参数模板和值模板，因此可以自定义对其进行修改。</p></li><li><p>Repository：Charts仓库，本质是一个http服务器，用于集中存储和分发Charts；</p></li><li><p>Config：应用程序实例化安装运行时所需要的配置信息；就是chart模板的值文件</p></li><li><p>Release：特定的Chart部署于目标集群上的一个实例，代表这一个正在运行的应用。当chart被安装到Kubernetes集群，就会生成一个release，chart可以多次安装到同一个集群，每次安装都是一个release。</p></li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li>helm：客户端，实现管理本地的Chart仓库，可管理Chart，与Tiller服务进行交互，用于发送Chart，实例安装、查询、卸载等操作。</li><li>Tiller：服务端，通常运行在K8S集群之上。用于接收helm发来的Charts和Conifg，合并生成release，完成部署。</li></ul><p>Helm把Kubernetes资源(比如deployments、services或 ingress等) 打包到一个chart中，而chart被保存到chart仓库，通过chart仓库可用来存储和分享chart。在k8s集群上想要创建pod必须通过APIServer，因此helm客户端将创建请求以及需要的文件发往Tiller服务端，由其向APIServer交互实现pod的创建。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="部署helm"><a href="#部署helm" class="headerlink" title="部署helm"></a>部署helm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载https://github.com/helm/helm/releases编译好的版本，此处使用2.11版本</span></span><br><span class="line">wget https://get.helm.sh/helm-v2.11.0-linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#解压出linux-amd64文件</span></span><br><span class="line">tar xf helm-v2.11.0-linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#将二进制文件复制到/usr/bin下直接命令行运行</span></span><br><span class="line"><span class="built_in">cd</span> </span><br><span class="line">mv helm /usr/bin</span><br><span class="line">mv tiller /usr/bin</span><br></pre></td></tr></table></figure><h4 id="部署Tiller"><a href="#部署Tiller" class="headerlink" title="部署Tiller"></a>部署Tiller</h4><p>3.0之后的helm部署时就没有这一步了，此处使用2.11部署。</p><p>部署Tiller就是执行helm的init指令。helm第一次init时，需要APIServer进行创建部署pod，因此需要链接api-server并进行认证，所以在运行helm时，会去读取kube-config文件，所以必须确认当前用户存在kube-config文件。</p><p>Tiller运行在K8s集群之上，也必须拥有集群的管理权限，也就是需要一个serviceaccount，进行一个clusterrolebinding到cluster-admin。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建rbac</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化，使用阿里云镜像，初始化之后会在kube-system中创建pod</span></span><br><span class="line"><span class="string">helm</span> <span class="string">init</span> <span class="string">--service-account</span> <span class="string">tiller</span> <span class="string">--upgrade</span> <span class="string">-i</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.11.0</span> <span class="string">--stable-repo-url</span> <span class="string">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否安装完成，正确的话可以看到helm和tiller的版本</span></span><br><span class="line"><span class="string">helm</span> <span class="string">version</span></span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">helm常用命令：</span><br><span class="line">search:    <span class="comment">#搜索charts</span></span><br><span class="line">fetch:     <span class="comment">#下载charts到本地目录</span></span><br><span class="line">install:   <span class="comment">#安装charts</span></span><br><span class="line">list:      <span class="comment">#列出charts的所有版本</span></span><br><span class="line">repo list: <span class="comment">#列出仓库</span></span><br><span class="line">repo add:  <span class="comment">#添加仓库</span></span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">  helm [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">命令可用选项:</span><br><span class="line">  completion  <span class="comment">#为指定的shell生成自动补全脚本（bash或zsh）</span></span><br><span class="line">  create      <span class="comment">#创建一个新的charts</span></span><br><span class="line">  delete      <span class="comment">#删除指定版本的release</span></span><br><span class="line">  dependency  <span class="comment">#管理charts的依赖</span></span><br><span class="line">  fetch       <span class="comment">#下载charts并解压到本地目录</span></span><br><span class="line">  get         <span class="comment">#下载一个release</span></span><br><span class="line">  <span class="built_in">history</span>     <span class="comment">#release历史信息</span></span><br><span class="line">  home        <span class="comment">#显示helm的家目录</span></span><br><span class="line">  init        <span class="comment">#在客户端和服务端初始化helm</span></span><br><span class="line">  inspect     <span class="comment">#查看charts的详细信息</span></span><br><span class="line">  install     <span class="comment">#安装charts</span></span><br><span class="line">  lint        <span class="comment">#检测包的存在问题</span></span><br><span class="line">  list        <span class="comment">#列出release</span></span><br><span class="line">  package     <span class="comment">#将chart目录进行打包</span></span><br><span class="line">  plugin      <span class="comment">#add(增加), list（列出）, or remove（移除） Helm 插件</span></span><br><span class="line">  repo        <span class="comment">#add(增加), list（列出）, remove（移除）, update（更新）, and index（索引） chart仓库</span></span><br><span class="line">  reset       <span class="comment">#卸载tiller</span></span><br><span class="line">  rollback    <span class="comment">#release版本回滚</span></span><br><span class="line">  search      <span class="comment">#关键字搜索chart</span></span><br><span class="line">  serve       <span class="comment">#启动一个本地的http server</span></span><br><span class="line">  status      <span class="comment">#查看release状态信息</span></span><br><span class="line">  template    <span class="comment">#本地模板</span></span><br><span class="line">  <span class="built_in">test</span>        <span class="comment">#release测试</span></span><br><span class="line">  upgrade     <span class="comment">#release更新</span></span><br><span class="line">  verify      <span class="comment">#验证chart的签名和有效期</span></span><br><span class="line">  version     <span class="comment">#打印客户端和服务端的版本信息</span></span><br></pre></td></tr></table></figure><h3 id="chart"><a href="#chart" class="headerlink" title="chart"></a>chart</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>下载下来的chart放在/root/.helm/cache/archive下，为压缩文件。其内部由多个yaml文件组成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看jenkins打包目录</span></span><br><span class="line">[root@localhost archive]@ tree jenkins</span><br><span class="line">jenkins</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── OWNERS</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── config.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── home-pvc.yaml</span><br><span class="line">│   ├── jenkins-agent-svc.yaml</span><br><span class="line">│   ├── jenkins-master-deployment.yaml</span><br><span class="line">│   ├── jenkins-master-ingress.yaml</span><br><span class="line">│   ├── jenkins-master-networkpolicy.yaml</span><br><span class="line">│   ├── jenkins-master-svc.yaml</span><br><span class="line">│   ├── jenkins-test.yaml</span><br><span class="line">│   ├── jobs.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── rbac.yaml</span><br><span class="line">│   ├── secret.yaml</span><br><span class="line">│   ├── service-account.yaml</span><br><span class="line">│   └── <span class="built_in">test</span>-config.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line"></span><br><span class="line">1 directory, 19 files</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">template中放的yaml文件和平时定义的差不多，但是都是以模板定义，通过values.yaml进行默认赋值。我们可以自定义该文件进行赋值</span><br></pre></td></tr></table></figure><h4 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以jenkins为例</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">"<span class="template-variable">&#123;&#123; .Release.Name &#125;&#125;</span>-ui-test-<span class="template-variable">&#123;&#123; randAlphaNum 5 | lower &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">"helm.sh/hook":</span> <span class="string">test-success</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.Master.NodeSelector</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.Values.Master.NodeSelector</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">if</span> <span class="string">.Values.Master.Tolerations</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">tolerations:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.Values.Master.Tolerations</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">4</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"test-framework"</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">"dduportal/bats:0.4.0"</span></span><br><span class="line">      <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"bash"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">        <span class="string">set</span> <span class="string">-ex</span></span><br><span class="line">        <span class="comment"># copy bats to tools dir</span></span><br><span class="line">        <span class="string">cp</span> <span class="string">-R</span> <span class="string">/usr/local/libexec/</span> <span class="string">/tools/bats/</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tools</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tools</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Name</span> <span class="string">&#125;&#125;-ui-test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.Master.Image</span> <span class="string">&#125;&#125;:&#123;&#123;</span> <span class="string">.Values.Master.ImageTag</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">["/tools/bats/bats",</span> <span class="string">"-t"</span><span class="string">,</span> <span class="string">"/tests/run.sh"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tests</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tools</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tools</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">template</span> <span class="string">"jenkins.fullname"</span> <span class="string">.</span> <span class="string">&#125;&#125;-tests</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tools</span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#解释</span></span><br><span class="line"><span class="string">.Release.Name：是Chart内置变量，表示创建的release的名称，其他类似</span></span><br><span class="line"><span class="string">.Chart.Name：也是内置变量，表示chart名称</span></span><br><span class="line"><span class="string">.Values.Master.NodeSelector：.Values表示的是Value.yaml文件，Master是一级字段(顶格写)，依次如此</span></span><br><span class="line"><span class="string">template</span> <span class="string">"jenkins.fullname"</span><span class="string">：表示引用template目录下的其他模板的某个属性字段</span></span><br><span class="line"><span class="string">randAlphaNum</span> <span class="number">5</span> <span class="string">|</span> <span class="string">lower：前者是Go模板的函数，通过|传递结果</span></span><br></pre></td></tr></table></figure><h4 id="自定义chart"><a href="#自定义chart" class="headerlink" title="自定义chart"></a>自定义chart</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建chart基本目录结构</span></span><br><span class="line"><span class="string">helm</span> <span class="string">create</span> <span class="string">myapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#目录结构为</span></span><br><span class="line"><span class="string">myapp/</span></span><br><span class="line"><span class="string">├──</span> <span class="string">charts</span></span><br><span class="line"><span class="string">├──</span> <span class="string">Chart.yaml</span></span><br><span class="line"><span class="string">├──</span> <span class="string">templates</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">deployment.yaml</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">_helpers.tpl</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">ingress.yaml</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">NOTES.txt</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">service.yaml</span></span><br><span class="line"><span class="string">└──</span> <span class="string">values.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改Chart.yaml文件，里面是基本描述信息</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">"1.0"</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">maintainer:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dqy</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">1259178786</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://www.frdqy.top</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#template/deployment文件</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"myapp.fullname"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"myapp.name"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"myapp.chart"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Service</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.replicaCount</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"myapp.name"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">&#123;&#123;</span> <span class="string">include</span> <span class="string">"myapp.name"</span> <span class="string">.</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">&#123;&#123;</span> <span class="string">.Release.Name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">.Chart.Name</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">"<span class="template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>"</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&#123;&#123;</span> <span class="string">.Values.image.pullPolicy</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.Values.resources</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">12</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">with</span> <span class="string">.Values.nodeSelector</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">8</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">with</span> <span class="string">.Values.affinity</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">8</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">with</span> <span class="string">.Values.tolerations</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">toYaml</span> <span class="string">.</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">8</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">&#123;&#123;-</span> <span class="string">end</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">myapp.fullname：是当前chart的完整名称，其他类似。myapp就是当前chart的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑完后，需要检查语法，需要在myapp目录外面使用</span></span><br><span class="line"><span class="string">helm</span> <span class="string">lint</span> <span class="string">./myapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打包，默认放在本地的仓库local中</span></span><br><span class="line"><span class="string">helm</span> <span class="string">package</span> <span class="string">myapp/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启仓库，监听本地8879端口</span></span><br><span class="line"><span class="string">helm</span> <span class="string">serve</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装，可以通过目录安装，压缩包安装，仓库安装以及URL安装</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">--name</span> <span class="string">myapp</span> <span class="string">local/myapp</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">--name</span> <span class="string">myapp</span> <span class="string">./myapp</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">--name</span> <span class="string">myapp</span> <span class="string">./myapp-0.1.0.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除，使用purge删除占用的名字</span></span><br><span class="line"><span class="string">helm</span> <span class="string">delete</span> <span class="string">--purge</span> <span class="string">myapp</span></span><br></pre></td></tr></table></figure><h4 id="自定义仓库"><a href="#自定义仓库" class="headerlink" title="自定义仓库"></a>自定义仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在node1上运行httpd，存储卷绑定于/var/www目录</span></span><br><span class="line">docker run -d -p 8080:80 -v /var/www/:/usr/<span class="built_in">local</span>/apache2/htdocs/ httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行index命令生成页面。myrepo是目录，目录内放打包好的压缩文件</span></span><br><span class="line">helm repo index myrepo/ --url http://192.168.163.135:8080/charts</span><br><span class="line"></span><br><span class="line"><span class="comment">#将mychart-0.1.0.tgz和index.yaml上传到k8s-node1的/var/www/charts目录。</span></span><br><span class="line">scp ./* root@node01:/var/www/charts/</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加仓库源</span></span><br><span class="line">helm repo add newrepo http://192.168.163.135:8080/charts</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;为了解决各个服务安装pod时的依赖以及资源文件修改编写等问题从而提出helm。helm和yum类似，可以理解为包管理工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="helm" scheme="http://yoursite.com/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>k8s(8)-资源指标和监控</title>
    <link href="http://yoursite.com/2020/02/09/k8s-8-%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E5%92%8C%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2020/02/09/k8s-8-%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E5%92%8C%E7%9B%91%E6%8E%A7/</id>
    <published>2020-02-09T04:24:08.000Z</published>
    <updated>2020-02-09T04:28:23.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见指标"><a href="#常见指标" class="headerlink" title="常见指标"></a>常见指标</h3><p>request：需求，pod内容器运行时的资源最低保障</p><p>limits：限制，pod内容器可占用的最大资源阈值</p><p>CPU：一个物理CPU可分成多个逻辑CPU(根据核心数划分)，每个逻辑CPU又可以分为1000个微核心(millicores)</p><p>内存：以E、P、T、G、M、K为计量单位，特别的当以Ei、Pi等作为计量单位时表示使用1024作为单位</p><p>QoS：作资源限制后每个pod会自动分配QoS类别，主要分三种：</p><a id="more"></a><ul><li>Guaranteed：pod内每个容器同时设置CPU和内存的requests和limits且值相等，这类pod具有最高优先级</li><li>Burstable：pod内至少一个容器定义了CPU或者内存的requests属性，具有中等优先级</li><li>BestEffort：pod内容器没有定义资源限制，具有最低优先级</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义在pod.containers.spec.resources</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-demo</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">contaniers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">  <span class="attr">cpu:</span> <span class="string">"200m"</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">"256Mi"</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="attr">cpu:</span> <span class="string">"500m"</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">"512Mi"</span></span><br></pre></td></tr></table></figure><h3 id="HeapSter"><a href="#HeapSter" class="headerlink" title="HeapSter"></a>HeapSter</h3><p>k8s集群上可以使用top命令查看各pod和node的资源使用情况，但是默认情况下无法使用，因为该命令实际上需要HeapSter来收集监控数据从而显示出来，因此需要先安装HeapSter。</p><p>我们知道每个node节点上都有一个kubelet程序，该程序用于管理node以及其上pod资源，它靠其插件cAdvisor来收集当前node节点上各pod内容器资源以及node资源的占用量。但是由于cAdvisor只能收集单个node节点的资源使用情况，因此使用HeapSter来收集cAdvisor收集的数据，即HeapSter是统一的多个指标的收集工具。另外，为了使得HeapSter能够存储收集的数据以便查看长久的趋势数据，它使用influxDB时序数据库系统来持久存储。最后可以使用Grafana作为前端显示监控工具，它可以连接influxDB数据库。</p><h4 id="部署influxDB"><a href="#部署influxDB" class="headerlink" title="部署influxDB"></a>部署influxDB</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#资源文件https://raw.githubusercontent.com/kubernetes-retired/heapster/master/deploy/kube-config/influxdb/influxdb.yaml，需要修改为如下样式</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitoring-influxdb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">influxdb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/heapster-influxdb-amd64:v1.5.2</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">influxdb-storage</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb-storage</span></span><br><span class="line">        <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">'true'</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">monitoring-influxdb</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitoring-influxdb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8086</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">influxdb</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">influxdb.yaml</span></span><br></pre></td></tr></table></figure><h4 id="部署RBAC"><a href="#部署RBAC" class="headerlink" title="部署RBAC"></a>部署RBAC</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#资源文件，https://raw.githubusercontent.com/kubernetes-retired/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml，不需要修改</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:heapster</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">heapster-rbac.yaml</span></span><br></pre></td></tr></table></figure><h4 id="部署heapster"><a href="#部署heapster" class="headerlink" title="部署heapster"></a>部署heapster</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#资源文件https://raw.githubusercontent.com/kubernetes-retired/heapster/master/deploy/kube-config/influxdb/heapster.yaml，需要修改为如下样式</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">heapster</span> </span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">heapster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">heapster</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/heapster-amd64:v1.5.4</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/heapster</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--source=kubernetes:https://kubernetes.default</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">'true'</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">Heapster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heapster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">heapster</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">heapster.yaml</span></span><br></pre></td></tr></table></figure><h4 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#资源文件，https://raw.githubusercontent.com/kubernetes-retired/heapster/master/deploy/kube-config/influxdb/grafana.yaml，需要修改为如下样式</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitoring-grafana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">monitoring</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/heapster-grafana-amd64:v5.0.4</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ca-certificates</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">grafana-storage</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">INFLUXDB_HOST</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">monitoring-influxdb</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_SERVER_HTTP_PORT</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"3000"</span></span><br><span class="line">          <span class="comment"># The following env variables are required to make Grafana accessible via</span></span><br><span class="line">          <span class="comment"># the kubernetes api-server proxy. On production clusters, we recommend</span></span><br><span class="line">          <span class="comment"># removing these env variables, setup auth for grafana, and expose the grafana</span></span><br><span class="line">          <span class="comment"># service using a LoadBalancer or a public IP.</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_BASIC_ENABLED</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"false"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">Admin</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_SERVER_ROOT_URL</span></span><br><span class="line">          <span class="comment"># If you're only using the API Server proxy, set this value instead:</span></span><br><span class="line">          <span class="comment"># value: /api/v1/namespaces/kube-system/services/monitoring-grafana/proxy</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ca-certificates</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-storage</span></span><br><span class="line">        <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">'true'</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">monitoring-grafana</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitoring-grafana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># In a production setup, we recommend accessing Grafana through an external Loadbalancer</span></span><br><span class="line">  <span class="comment"># or through a public IP.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># You could also use NodePort to expose the service at a randomly-generated port</span></span><br><span class="line">  <span class="comment"># type: NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">grafana.yaml</span></span><br></pre></td></tr></table></figure><h3 id="新监控体系"><a href="#新监控体系" class="headerlink" title="新监控体系"></a>新监控体系</h3><p>上面讲的HeapSter监控体系在k8s1.11时已经被废弃，现在是普遍使用的是metrics-server来代替HeapSter进行资源指标的获取。另外，现在还使用prometheus进行自定义资源指标的获取(需要k8s-prometheus-adapter将自定义的监控数据转换成指标格式)，并且它本身还是一个监控系统，用于监控例如CPU、内存、报文收发、进程切换等指标。</p><p>整体监控体系主要分两部分：</p><ul><li><p>核心指标流水线：由kubelet、metrics-server以及由APIServer提供的api组成，主要有：CPU累计使用率、内存实时使用率、Pod资源占用率及容器的磁盘占用率等。这些资源需要被系统其他进程所使用，例如top。</p></li><li><p>监控流水线：用于从系统收集各种指标数据并提供中断用户、存储系统及HPA，它包含核心指标和非核心指标。但是非核心指标本身不能被k8s所解析，需要转换成固定指标格式才可以。</p></li></ul><h4 id="metrics-server"><a href="#metrics-server" class="headerlink" title="metrics-server"></a>metrics-server</h4><p>由于k8s不支持heapSter，为了获取系统核心指标而提出了metrics-server。它作为一个server工作，类似于APIServer，它拓展了k8s本身所没有的群组，从而实现资源监控功能。在多个server模型下，需要一个kube-aggregator聚合器来实现对外统一，以后用户访问时都通过这个聚合器进行访问，这样就可以即访问k8s原生的k8s群组，也可以使用拓展的metrics-server群组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> auth-delegator.yaml auth-reader.yaml metrics-apiservice.yaml metrics-server-deployment.yaml metrics-server-service.yaml resource-reader.yaml ;<span class="keyword">do</span> wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/metrics-server/<span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line">kubectl apply -f .</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">下载下来的yaml文件不能直接使用，需要修改两个文件</span><br><span class="line"><span class="comment">#修改resource-reader.yaml，在resources字段下增加node/stats，这是节点数据获取的资源路径</span></span><br><span class="line">resources:</span><br><span class="line">  - node/stats</span><br><span class="line"><span class="comment">#修改metrics-server-deployment.yaml，在deployment的command字段修改端口为10250，为kubelet</span></span><br><span class="line"><span class="built_in">command</span>:</span><br><span class="line">- --kubelet-port=10250</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用top命令不出错说明配置成功</span></span><br><span class="line">kubectl top</span><br></pre></td></tr></table></figure><h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><p><img src="/2020/02/09/k8s-8-%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E5%92%8C%E7%9B%91%E6%8E%A7/k8s-prometheus.png" alt></p><p>它本身是一个监控工具，分为server端和agent端，server端从被监控主机获取数据，而agent端需要部署一个node_exporter，主要用于数据采集和暴露node节点的数据，对于获取Pod级别或者是mysql等多种应用的数据时，需要部署相关的exporter来暴露。Prometheus部署过后会自动通过metricURL向各个pod采集数据，可以通过PromQL的方式对数据进行查询，但是由于本身prometheus属于第三方的解决方案，原生的k8s系统并不能对Prometheus的自定义指标进行解析，需要使用kube-state-metrics来转换，然后借助于k8s-prometheus-adapter将其配置为APIServer聚合到一起，从而能被访问。</p><p><img src="/2020/02/09/k8s-8-%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E5%92%8C%E7%9B%91%E6%8E%A7/k8s-prometheus-2.png" alt></p><p>Prometheus通过pull metrics向每个exporter获取指标数据。也可以被动的接收，各个组件可以将数据推送至Push Gateway，由Prometheus从push gateway获取数据。获取到数据后，将这些数据存储到自己内建的时序存储数据库中。Prometheus通过Service Discovery来发现服务，从而知道需要监控哪些服务。对于获取的数据来说它支持API client、web UI、grafana来显示数据(将prometheus当作数据源)。当Prometheus发生异常时会将信息发送给一个外部独立组件Alertmanager，它负责发送报警信息。</p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/iKubernetes/k8s-prom</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iKubernetes/k8s-prom.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建名称空间prom</span></span><br><span class="line">kubectl apply -f namespace.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署exporter，在prom名称空间中创建DaemonSet</span></span><br><span class="line"><span class="built_in">cd</span> node_exporter/</span><br><span class="line">kubectl apply -f .</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署Prometheus，需要删除deploy的资源限制</span></span><br><span class="line"><span class="built_in">cd</span> prometheus/</span><br><span class="line">kubectl apply -f .</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署kube-state-metrics，用于转换指标</span></span><br><span class="line"><span class="built_in">cd</span> kube-state-metrics/</span><br><span class="line">kubectl apply -f .</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署k8s-prometheus-adapter，本身是http协议，需要k8s签署一个证书给他</span></span><br><span class="line"><span class="comment">#制作证书</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes/pki/</span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out serving.key 2048)</span><br><span class="line">openssl req -new -key serving.key -out serving.csr -subj <span class="string">"/CN=serving"</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> serving.csr -CA ./ca.crt -CAkey ./ca.key -CAcreateserial -out serving.crt -days 3650</span><br><span class="line"><span class="comment">#创建secret</span></span><br><span class="line">kubectl create secret generic cm-adapter-serving-certs --from-file=serving.crt=./serving.crt --from-file=serving.key -n prom</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署k8s-prometheus-adapter，注意自带的custom-metrics-apiserver-deployment.yaml和custom-metrics-config-map.yaml有问题，需要重新下载，并且修改名称空间为prom</span></span><br><span class="line">wget https://raw.githubusercontent.com/DirectXMan12/k8s-prometheus-adapter/master/deploy/manifests/custom-metrics-apiserver-deployment.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/DirectXMan12/k8s-prometheus-adapter/master/deploy/manifests/custom-metrics-config-map.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">部署后可以使用grafana进行数据绑定</span><br><span class="line">需要注意grafana和Prometheus通信属于pod通信，配置时的url写为http://prometheus.prom.svc:9090表示prom名称空间内的service，注意端口是9090，不是NodePort暴露出集群的端口</span><br></pre></td></tr></table></figure><h3 id="HPA"><a href="#HPA" class="headerlink" title="HPA"></a>HPA</h3><p>Horizontal Pod Autoscaling，简称HPA，用于实现Pod的动态增减功能。HPA会从Heapster或者用户自定义的RESTclient端获取每个Pod利用率或原始值的平均值，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值并进行相应的操作。HPA也是k8s集群的资源对象。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建pod</span></span><br><span class="line">kubectl run nginx --image=nginx --replicas=1 --requests=<span class="string">'cpu=50m,memory=256Mi'</span> --limits=<span class="string">'cpu=50m,memory=256Mi'</span> --labels=<span class="string">'app=nginx'</span> --expose --port=80</span><br><span class="line"><span class="comment">#设置autoscale</span></span><br><span class="line">kubectl autoscale deployment nginx --min=1 --max=8 --cpu-percent=60</span><br><span class="line"><span class="comment">#暴露service端口进行压测</span></span><br><span class="line">kubectl patch svc nginx -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span></span><br><span class="line"><span class="comment">#压测</span></span><br><span class="line">ab -c 1000 -n 500000 http://192.168.163.135:32126</span><br></pre></td></tr></table></figure><h4 id="资源定义"><a href="#资源定义" class="headerlink" title="资源定义"></a>资源定义</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngixn-hpa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">10</span>                   <span class="comment">#最大pod数量</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">1</span>                    <span class="comment">#最小pod数量</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span>           <span class="comment">#针对扩容deployment</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span>        <span class="comment">#需要扩容的类型</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span>        <span class="comment">#需要扩容的deployment名称</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">90</span>  <span class="comment">#CPU使用率，平均数</span></span><br><span class="line">  <span class="attr">metrics:</span><span class="comment">#对哪些指标进行评估</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">  <span class="attr">resource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">    <span class="attr">targetAverageUtilization:</span> <span class="number">55</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">memory</span></span><br><span class="line">      <span class="attr">targetAverageValue:</span> <span class="string">50Mi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见指标&quot;&gt;&lt;a href=&quot;#常见指标&quot; class=&quot;headerlink&quot; title=&quot;常见指标&quot;&gt;&lt;/a&gt;常见指标&lt;/h3&gt;&lt;p&gt;request：需求，pod内容器运行时的资源最低保障&lt;/p&gt;
&lt;p&gt;limits：限制，pod内容器可占用的最大资源阈值&lt;/p&gt;
&lt;p&gt;CPU：一个物理CPU可分成多个逻辑CPU(根据核心数划分)，每个逻辑CPU又可以分为1000个微核心(millicores)&lt;/p&gt;
&lt;p&gt;内存：以E、P、T、G、M、K为计量单位，特别的当以Ei、Pi等作为计量单位时表示使用1024作为单位&lt;/p&gt;
&lt;p&gt;QoS：作资源限制后每个pod会自动分配QoS类别，主要分三种：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="metrics" scheme="http://yoursite.com/tags/metrics/"/>
    
      <category term="prometheus" scheme="http://yoursite.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>k8s(7)-调度</title>
    <link href="http://yoursite.com/2020/02/07/k8s-7-%E8%B0%83%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/02/07/k8s-7-%E8%B0%83%E5%BA%A6/</id>
    <published>2020-02-07T06:00:34.000Z</published>
    <updated>2020-02-07T06:01:50.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当APIServer收到新的pod创建请求时会根据请求的资源清单使用schedule进行node节点调度。调度分为三个阶段：节点预选(Predicate)-&gt;节点优选(Priority)-&gt;节点选定(Select)</p><ul><li>节点预选：基于一系列的预选规则对每个节点进行检查，将那些不符合条件的节点过滤(如端口冲突、资源不足等)，从而完成节点的预选</li><li>节点优选：对预选出的节点进行优先级排序，以便选出最合适运行Pod对象的节点</li><li>节点选定：从优先级排序结果中挑选出优先级最高的节点运行Pod，当这类节点多于1个时，则进行随机选择<a id="more"></a></li></ul><h3 id="节点预选"><a href="#节点预选" class="headerlink" title="节点预选"></a>节点预选</h3><p>若定义多个预选策略，必须全部满足才可以通过预选。下面是常见的一些预算策略：</p><ul><li>CheckNodeCondition：检查节点是否工作正常</li><li>HostName：如果Pod对象拥有pod.spec.hostname属性，则检查节点名称字符串是否和该属性值匹配。</li><li>PodFitsHostPorts：如果Pod对象定义了pod.spec.container.ports.hostPort属性，则检查Pod指定的端口是否已经被节点上的其他容器或服务占用。</li><li>MatchNodeSelector：如果Pod对象定义了pod.spec.nodeSelector属性，则检查节点标签是否和该属性匹配。</li><li>NoDiskConflict：检查Pod对象请求的存储卷在该节点上可用。</li><li>PodFitsResources：检查节点上的资源（CPU、内存）可用性是否满足Pod对象的运行需求。</li><li>PodToleratesNodeTaints：如果Pod对象中定义了pod.spec.tolerations属性，则需要检查该属性值是否可以接纳节点定义的污点（taints），且node污点改变后默认仍接收。</li><li>PodToleratesNodeNoExecuteTaints：如果Pod对象定义了pod.spec.tolerations属性，检查该属性是否接纳节点的NoExecute类型的污点，node污点改变后如果不容忍则不接受。</li><li>CheckNodeLabelPresence：仅检查节点上指定的所有标签的存在性，要检查的标签以及其可否存在取决于用户的定义。</li><li>CheckServiceAffinity：将同一Service下的pod节点优先放在一个node上。</li><li>MaxEBSVolumeCount：检查节点上是否已挂载EBS存储卷数量是否超过了设置的最大值，默认值：39</li><li>MaxGCEPDVolumeCount：检查节点上已挂载的GCE PD存储卷是否超过了设置的最大值，默认值：16</li><li>MaxAzureDiskVolumeCount：检查节点上已挂载的Azure Disk存储卷数量是否超过了设置的最大值，默认值：16</li><li>CheckVolumeBinding：检查节点上已绑定和未绑定的PVC是否满足Pod对象的存储卷需求。</li><li>NoVolumeZoneConflct：在给定了区域限制的前提下，检查在该节点上部署Pod对象是否存在存储卷冲突。</li><li>CheckNodeMemoryPressure：在给定了节点已经上报了存在内存资源压力过大的状态，则需要检查该Pod是否可以调度到该节点上。</li><li>CheckNodePIDPressure：如果给定的节点已经报告了存在PID资源压力过大的状态，则需要检查该Pod是否可以调度到该节点上。</li><li>CheckNodeDiskPressure：如果给定的节点存在磁盘资源压力过大，则检查该Pod对象是否可以调度到该节点上。</li><li>MatchInterPodAffinity：检查给定的节点能否可以满足Pod对象的亲和性和反亲和性条件，用来实现Pod亲和性调度或反亲和性调度。</li></ul><h3 id="节点优选"><a href="#节点优选" class="headerlink" title="节点优选"></a>节点优选</h3><p>预选后的一些列节点列表会进入优选阶段，在这个过程schedule会向每个通过预选的节点传递一系列的优选函数来计算其优先级分值，优先级分值介于0-10之间，其中0表示不适用，10表示最适合托管该Pod对象。另外，调度器还支持给每个优选函数指定一个简单的值，表示权重，进行节点优先级分值计算时，它首先将每个优选函数的计算得分乘以权重，然后再将所有优选函数的得分相加，从而得出节点的最终优先级分值。权重可以让管理员定义优选函数倾向性的能力，其计算优先级的得分公式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">finalScoreNode = (weight1 * priorityFunc1) + (weight2 * priorityFunc2) + ......</span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">weight表示该优选函数的权重</span><br><span class="line">priorityFunc表示该优选函数的优先级</span><br></pre></td></tr></table></figure><ul><li>least_requested：选择消耗最小的节点（根据空闲比率评估 cpu((总容量-已使用)*10/总容量) ）</li><li>most_requested：选择消耗最大的节点上（尽量将一个节点上的资源用完）</li><li>balanced_resource_allocation：从节点列表中选出各项资源使用率最均衡的节点（CPU和内存）</li><li>node_prefer_avoid_pods：节点倾向。判断节点是否有注解”scheduler.alpha.kubernetes.io/preferAvoidPods”，如果有就权重为0，没有则权重为10000。</li><li>taint_toleration：将pod对象的spec.toleration与节点的taints列表项进行匹配度检查，匹配的条目越多，得分越低。</li><li>selector_spreading：与services上其他pod尽量不在同一个节点上，节点上通一个service的pod越少得分越高。</li><li>interpod_affinity：遍历node上的亲和性条目，与pod亲和性匹配项越多的得分越高</li><li>node_label：根据节点标签得分，存在标签既得分，没有标签没得分。标签越多得分越高。</li><li>image_locality：节点上有所需要的镜像既得分，所需镜像越多得分越高。（根据已有镜像体积大小之和）</li></ul><h3 id="节点亲和性"><a href="#节点亲和性" class="headerlink" title="节点亲和性"></a>节点亲和性</h3><p>节点亲和性指的是pod定义的pod.spec.affinity.nodeAffinity字段定义的标签列表和node节点的标签的匹配程度。</p><p>定义节点亲和性规则有2种：</p><ul><li><p>硬亲和性（require）：实现的是强制性规则，是Pod调度时必须满足的规则，否则Pod对象的状态会一直是Pending</p></li><li><p>软亲和性（preferred）：实现的是一种柔性调度限制，在Pod调度时可以尽量满足其规则，在无法满足规则时，可以调度到一个不匹配规则的节点之上。</p></li></ul><h4 id="硬亲和性实例"><a href="#硬亲和性实例" class="headerlink" title="硬亲和性实例"></a>硬亲和性实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义pod-nodeaffinity-demo.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-require-nodeaffinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">zone</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">foo</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">bar</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure><h4 id="软亲和性实例"><a href="#软亲和性实例" class="headerlink" title="软亲和性实例"></a>软亲和性实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义pod-nodeaffinity-demo.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">with-prefered-nodeaffinity</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">preference:</span></span><br><span class="line">  <span class="attr">matchExpressions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">zone</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">    <span class="attr">values:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">foo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bar</span></span><br><span class="line"><span class="attr">weight:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure><h3 id="Pod亲和性"><a href="#Pod亲和性" class="headerlink" title="Pod亲和性"></a>Pod亲和性</h3><p>pod之间也需要亲和性调度。比如NMP架构，NMP三种服务的pod放在一个物理主机或者同一个机柜的物理主机上，那么他们的通信效率肯定是很高的。</p><p>调度器把第一个Pod放到任意位置，然后和该Pod有亲和或反亲和关系的Pod根据该动态完成位置编排，这就是Pod亲和性和反亲和性调度的作用。Pod的亲和性定义也存在硬亲和性和软亲和性的区别，其约束的意义和节点亲和性类似。</p><p>另外，对于同一位置的理解是根据不同的。例如可以根据主机名来作为同一位置的标准，那么具有亲和性的pod都会被调度到同一主机上；再比如将同一机架上的主机打上标签标明是同一组主机，亲和性以该标签为标准，那么pod调度时就会被调度到一组主机的一个上面。</p><h4 id="硬亲和实例"><a href="#硬亲和实例" class="headerlink" title="硬亲和实例"></a>硬亲和实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-first</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-second</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx-back</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend-back</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffninity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIngnoreDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">      <span class="attr">matchExpressions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">labelSelector</span> <span class="string">&lt;Object&gt;：指明与哪些pod亲和</span></span><br><span class="line"><span class="string">namespace</span> <span class="string">&lt;[]string&gt;：指明labelSelector选中的pod匹配哪个名称空间的pod，不指默认该pod当前名称空间</span></span><br><span class="line"><span class="string">topologyKey</span> <span class="string">&lt;string&gt;：用于定义位置标准，kubernetes.io/hostname表示以node节点的主机名作为位置判断</span></span><br></pre></td></tr></table></figure><h4 id="软亲和实例"><a href="#软亲和实例" class="headerlink" title="软亲和实例"></a>软亲和实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大体上与节点亲和一样</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-first-prefer</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-second-prefer</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx-back</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend-back</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAffninity:</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">podAffinityTerm:</span></span><br><span class="line">        <span class="attr">labelSelector:</span></span><br><span class="line">               <span class="attr">matchExpressions:</span></span><br><span class="line">               <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                 <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                 <span class="attr">values:</span></span><br><span class="line">                 <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">         <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><h4 id="反亲和实例"><a href="#反亲和实例" class="headerlink" title="反亲和实例"></a>反亲和实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给node节点打标，使得第一个pod配到一个node后由于反亲和，另一个pod必然处于pending状态</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">label</span> <span class="string">nodes</span> <span class="string">node1.day.com</span> <span class="string">zone=foo</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">label</span> <span class="string">nodes</span> <span class="string">node2.day.com</span> <span class="string">zone=foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资源</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-first</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-second</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">myapp:</span> <span class="string">nginx-back</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend-back</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">affinity:</span></span><br><span class="line">    <span class="attr">podAntiAffninity:</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIngnoreDuringExecution:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">      <span class="attr">matchExpressions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">in</span></span><br><span class="line">        <span class="attr">values:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">topologyKey:</span> <span class="string">zone</span></span><br></pre></td></tr></table></figure><h3 id="污点调度"><a href="#污点调度" class="headerlink" title="污点调度"></a>污点调度</h3><p>污点是定义在node上的一组键值型数据，用来让node拒绝将Pod调度到该节点上，除非该Pod对象具有容纳节点污点的容忍度。而容忍度是定义在Pod对象上的键值型数据，用来配置让Pod对象可以容忍节点的污点。</p><p>前面的节点选择器和节点亲和性的调度方式都是通过在Pod对象上添加标签选择器来完成对特定类型node标签的匹配，实现的是Pod选择节点的方式。而污点和容忍度则是通过对node添加污点信息来控制Pod对象的调度结果，让node拥有了控制哪种Pod对象可以调度到该节点上的 一种方式。</p><p>Kubernetes使用PodToleratesNodeTaints预选策略和TaintTolerationPriority优选函数来完成这种调度方式。</p><h4 id="定义污点"><a href="#定义污点" class="headerlink" title="定义污点"></a>定义污点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node.spec.taints.effect定义node对pod的排斥效果</span></span><br><span class="line">NoSchedule：只影响调度过程，对已有的pod不产生影响</span><br><span class="line">NoExecute：既影响调度过程也影响现存的pod对象，不容忍的pod会被驱逐</span><br><span class="line">PreferNoSchedule：程度比第一个轻，无其他可调度的node时可以调度到该node</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义taint格式</span></span><br><span class="line">key=value:effect</span><br><span class="line">表示对于该键值的污点如果pod不能容忍，那么执行effect相对应的排斥效果</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令</span></span><br><span class="line">kubectl taint node node1.dqy.com node-type=production:NoSchedule</span><br></pre></td></tr></table></figure><h4 id="定义容忍度"><a href="#定义容忍度" class="headerlink" title="定义容忍度"></a>定义容忍度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Equal</span></span><br><span class="line">tolerations:</span><br><span class="line">- key: <span class="string">"node-type"</span></span><br><span class="line">  operator: <span class="string">"Equal"</span></span><br><span class="line">  value: <span class="string">"production"</span></span><br><span class="line">  effect: <span class="string">"Noexecute"</span></span><br><span class="line">  tolerationSeconds: 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#Exists</span></span><br><span class="line">tolerations: </span><br><span class="line">- key: <span class="string">"node-type"</span> </span><br><span class="line">  operator: <span class="string">"Exists"</span></span><br><span class="line">  value:<span class="string">""</span></span><br><span class="line">  effect: <span class="string">"Noexecute"</span> </span><br><span class="line">  tolerationSeconds: 3600</span><br><span class="line"></span><br><span class="line"><span class="comment">#operator字段选项</span></span><br><span class="line">Equal：等值比较，表示容忍度和污点必须在key、value、effect三者之上完全匹配。</span><br><span class="line">Exists：存在性判断，表示二者的key和effect必须完全匹配，而容忍度中的value字段使用空值。</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">第一个使用Equal操作模式，表示node上的node-type字段的值为production，且Noexecute的污点可以容忍</span><br><span class="line">第二个使用Exists操作模式，表示node上只要存在node-type字段且Noexecute的污点，可以容忍</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;当APIServer收到新的pod创建请求时会根据请求的资源清单使用schedule进行node节点调度。调度分为三个阶段：节点预选(Predicate)-&amp;gt;节点优选(Priority)-&amp;gt;节点选定(Select)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点预选：基于一系列的预选规则对每个节点进行检查，将那些不符合条件的节点过滤(如端口冲突、资源不足等)，从而完成节点的预选&lt;/li&gt;
&lt;li&gt;节点优选：对预选出的节点进行优先级排序，以便选出最合适运行Pod对象的节点&lt;/li&gt;
&lt;li&gt;节点选定：从优先级排序结果中挑选出优先级最高的节点运行Pod，当这类节点多于1个时，则进行随机选择&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="污点" scheme="http://yoursite.com/tags/%E6%B1%A1%E7%82%B9/"/>
    
      <category term="容忍度" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%BF%8D%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>k8s(6)-网络配置</title>
    <link href="http://yoursite.com/2020/02/06/k8s-6-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/02/06/k8s-6-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-06T06:36:03.000Z</published>
    <updated>2020-02-17T05:26:21.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><ul><li>容器间通信：同一个pod内的多个容器间的通信，使用lo接口</li><li>pod间通信：overlay叠加网络实现。直达，不要经过NAT转换</li><li>pod与service通信：由iptables规则或者lvs规则实现。直达，不要经过NAT转换</li><li>service与集群外部通信：配置nodePort或者ingress<a id="more"></a><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4></li></ul><p>k8s集群自身不提供网络解决方案，它支持CNI接口的插件来解决。CNI的主要核心是：在创建容器时，先创建好网络名称空间（netns），然后调用CNI插件为这个netns配置网络，最后在启动容器内的进程。每次Pod被初始化或删除，kubelet都会调用默认的CNI插件去创建一个虚拟设备接口附加到相关的底层网络，为Pod去配置IP地址、路由信息并映射到Pod对象的网络名称空间。网络插件存放在/etc/cni/net.d目录下，由kubelet加载该目录下的网络插件，根据其type属性到/opt/cni/bin中查找相关的插件二进制文件，由这些二进制文件和配置文件代为分配网络地址、创建等信息。常见的插件有：flannel、calico、canel等。</p><ul><li>Flannel：为Kubernetes提供叠加网络的网络插件，基于TUN/TAP隧道技术，使用UDP封装IP报文进行创建叠加网络，借助etcd维护网络的分配情况，缺点：无法支持网络策略访问控制。</li><li>Calico：基于BGP的三层网络插件，也支持网络策略进而实现网络的访问控制；它在每台主机上都运行一个虚拟路由，利用Linux内核转发网络数据包，并借助iptables实现防火墙功能。实际上Calico最后的实现就是将每台主机都变成了一台路由器，将各个网络进行连接起来，实现跨主机通信的功能。</li><li>Canal：由Flannel和Calico联合发布的一个统一网络插件，提供CNI网络插件，并支持网络策略实现。</li><li>其他的还包括Weave Net、Contiv、OpenContrail、Romana、NSX-T、kube-router等等。而Flannel和Calico是目前最流行的选择方案。</li></ul><h3 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h3><p>flannel使用叠加式网络进行pod间通信，通过节点上的flannel.1网卡实现隧道来通信。当前节点有pod时会创建一个eni接口的网卡，它的地址是与flannel.1网卡同网络，用于隧道通信。flannel作为pod以daemonset的方式工作在各个具有kubelet的node节点上，用于kubelet调用flannel进行网络部署。因此，有多少node节点(拥有kubelet)就有多少个flannel pod。</p><p>创建flannel的过程在第一章讲过，此处不再赘述。</p><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看配置信息</span></span><br><span class="line">kubectl get configmap kube-flannel-cfg -o yaml -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment">#常见参数</span></span><br><span class="line">Network：flannel使用的CIDR格式的网络地址，用于为Pod配置网络功能</span><br><span class="line">例如Network：10.244.0.0/16，代表master：10.244.0.0/24、node1：10.244.1.0/24以此类推</span><br><span class="line">Subnetlen：把network切分子网供个节点使用时，使用多长的掩码进行切分，默认为24位，表示每个node可以创建256个pod</span><br><span class="line">SubnetMin：子网起始</span><br><span class="line">SubnetMax：子网最大</span><br><span class="line">Backend：指明pod间通信方式vxlan、host-gw、udp</span><br></pre></td></tr></table></figure><h4 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h4><p>容器先通过虚拟网桥将报文发送给cni，cni功能类似docker0桥的功能，它对报文进行SNAT后发往flannel.01桥，flannel桥根据目标ip进行隧道封装然后交给物理网卡，物理网卡收到后根据ip发往对方pod的node；对方node接收后因为传输层端口指向的是flannel监听端口，因此会被flannel获取并拆掉隧道后根据路由表发往cni并由其DNAT后发往目标容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看master网卡，会发现几个特殊的，有flannel、cni和一些veth开头的网卡</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看master路由信息</span></span><br><span class="line">ip route show</span><br><span class="line">default via 192.168.163.2 dev ens33 proto dhcp metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 </span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink </span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.163.0/24 dev ens33 proto kernel scope link src 192.168.163.132 metric 100</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看cni0网卡的虚拟网桥信息</span></span><br><span class="line">brctl show cni0</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">cni08000.eae2fc220dbanoveth2bdcb591</span><br><span class="line">veth3648ee64</span><br><span class="line">veth6cca7eb2</span><br><span class="line">veth899cf515</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">cni为flannel创建的虚拟网桥，用于pod本地通信使用</span><br><span class="line">flannel为每个Pod创建一对veth虚拟设备，一端放在容器接口上，一端放在cni0桥上(和docker一样)</span><br><span class="line">上面这些路由信息可以看出，发送到主机10.244.2.0/24及10.244.1.0/24网段的报文都通过flannel.1网卡接口进行隧道封装(VxLAN协议)</span><br></pre></td></tr></table></figure><h4 id="VxLAN"><a href="#VxLAN" class="headerlink" title="VxLAN"></a>VxLAN</h4><p>默认情况下使用VxLAN协议实现隧道方式进行不通过主机间pod通信，其报文格式如下图：</p><p><img src="/2020/02/06/k8s-6-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/k8s-VxLAN.png" alt></p><p>它支持两种方式：</p><ul><li>第一种是当运行pod的node节点处于 同一网段中时使用Directrouting方式进行通信，即将该pod的物理主机网卡当作网关，发往其他主机的报文通过网卡查路由表进行转发；这种方式传输效率很高，类似host-gw模式</li><li>第二种是当pod处于不同网段时，使用隧道进行叠加式网络通信，其中隧道是以太网帧的二层隧道。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认为VxLAN隧道模式，此处演示修改为Directrouting模式</span></span><br><span class="line"><span class="comment">#修改configmap</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,   <span class="comment">#默认网段</span></span><br><span class="line">    <span class="string">"Backend"</span>: &#123;</span><br><span class="line"><span class="string">"Type"</span>: <span class="string">"vxlan"</span>,</span><br><span class="line"><span class="string">"Directrouting"</span>: <span class="literal">true</span>   <span class="comment">#增加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新应用</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">修改flannel时使用edit不能生效，需要重新部署</span><br></pre></td></tr></table></figure><h4 id="host-gw"><a href="#host-gw" class="headerlink" title="host-gw"></a>host-gw</h4><p>该方式类似于VxLAN的Directrouting模式，即不同node节点处于同一网段中时，其上的pod直接使用node物理网卡进行通信，网卡上维护路由表用于路由转发，因此必须处于同一网段，否则可能会被路由转发到其他主机。</p><p>具体配置只需要改Backend字段的type字段即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,   <span class="comment">#默认网段</span></span><br><span class="line">    <span class="string">"Backend"</span>: &#123;</span><br><span class="line"><span class="string">"Type"</span>: <span class="string">"host-gw"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h3><p>上文提到的Flannel只是一款网络地址分配的插件，它不具备网络策略功能。即在Flannel插件工作下，整个网络各个pod之间都可以通信，它不具备隔离某些pod间通信的功能。因此为了实现网络策略功能，通常使用Calico实现网络策略功能，而flannel实现地址分配功能，二者结合就变成了Canal。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署RBAC</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署canal</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/canal/canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">Canal作为DaemonSet部署到每个节点，属于kube-system这个名称空间</span><br></pre></td></tr></table></figure><h4 id="配置策略"><a href="#配置策略" class="headerlink" title="配置策略"></a>配置策略</h4><p><img src="/2020/02/06/k8s-6-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/k8s-canal.png" alt></p><p>在Kubernetes系统中，报文的流入和流出的核心组件是Pod资源，它们也是网络策略功能的主要应用对象。NetworkPolicy对象通过podSelector选择 一组Pod资源作为控制对象。NetworkPolicy是定义在一组Pod资源之上用于管理入站(ingress)流量，或出站(egress)流量的一组规则，有可以是出入站规则一起生效，规则的生效模式通常由spec.policyTypes进行定义。</p><p>默认情况下，Pod对象的流量控制是为空的，报文可以自由出入。在附加网络策略之后，Pod对象会因为NetworkPolicy而被隔离，一旦名称空间中有任何NetworkPolicy对象匹配了某特定的Pod对象，则该Pod将拒绝NetworkPolicy规则中不允许的所有连接请求，但是那些未被匹配到的Pod对象依旧可以接受所有流量。</p><p>就特定的Pod集合来说，入站和出站流量默认是放行状态，除非有规则可以进行匹配。还有一点需要注意的是，在networkpolicy.spec.policyTypes中指定了生效的规则类型，但是在networkpolicy.spec字段中嵌套定义了没有任何规则的Ingress或Egress时，则表示拒绝入站或出站的一切流量。即默认的ingress和egress规则都是拒绝一切。</p><h4 id="资源定义"><a href="#资源定义" class="headerlink" title="资源定义"></a>资源定义</h4><p>networkpolicy自身就是k8s集群的资源对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spec属性</span></span><br><span class="line">egress &lt;[]Object&gt;<span class="comment">#定义出站规则</span></span><br><span class="line">ports &lt;[]Object&gt;<span class="comment">#定义目标端口</span></span><br><span class="line">port &lt;string&gt;<span class="comment">#端口</span></span><br><span class="line">protocol &lt;string&gt;<span class="comment">#协议</span></span><br><span class="line">to &lt;[]Object&gt;<span class="comment">#定义目标地址</span></span><br><span class="line">ipBlock &lt;Object&gt;<span class="comment">#目标为ip地址范围或主机的pod</span></span><br><span class="line">namespaceSelector<span class="comment">#目标为名称空间内所有pod</span></span><br><span class="line">podSelector &lt;Object&gt;<span class="comment">#目标为一组pod</span></span><br><span class="line"></span><br><span class="line">ingress &lt;[]Object&gt;<span class="comment">#定义入站规则，与egress相似</span></span><br><span class="line">from &lt;[]Object&gt;</span><br><span class="line">ports &lt;[]Object&gt;</span><br><span class="line">podSelector &lt;Object&gt;<span class="comment">#定义管理的pod</span></span><br><span class="line">policyTypes &lt;[]string&gt;<span class="comment">#定义选择的策略类型</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>设置两个名称空间，一个为dev，一个为prod。下面进行不同名称空间访问的控制</p><p>创建名称空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace dev</span><br><span class="line">kubectl create namespace prod</span><br></pre></td></tr></table></figure><p>定义networkpolicy规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">deny-all-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">policyTypes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#应用于dev名称空间</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">ingress-def.yaml</span> <span class="string">-n</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">podSelector为空表示选择所有名称空间中的pod</span></span><br><span class="line"><span class="string">policyTypes选择了ingress而没定义ingress表示使用ingress默认规则，即拒绝所有请求</span></span><br><span class="line"><span class="string">如果明确定义ingress但内容为空，则表示允许全部，如下所示</span></span><br><span class="line"><span class="attr">ingree:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>在dev名称空间下创建pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">pod-a.yaml</span> <span class="string">-n</span> <span class="string">dev</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">pod-a.yaml</span> <span class="string">-n</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">上述创建好后可以使用master访问prod名称空间的prod，但无法访问dev名称空间的pod</span></span><br></pre></td></tr></table></figure><p>修改dev名称空间下的ingress规则，允许外部访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将pod1打标签，用于被ingress的podSelector控制</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">label</span> <span class="string">pods</span> <span class="string">pod1</span> <span class="string">app=nginx</span> <span class="string">-n</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">allow-nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">podSelector:</span></span><br><span class="line"><span class="attr">matchLabels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">ingress:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">from:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ipBlock:</span></span><br><span class="line">  <span class="attr">cidr:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10.244</span><span class="number">.1</span><span class="number">.2</span><span class="string">/32</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">上述ingress规则表示允许10.244.0.0/16网段的主机且标签app为nginx访问，但不允许10.244.1.2/32访问，对外开放端口为tcp/80，tcp/443</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;h4 id=&quot;通信方式&quot;&gt;&lt;a href=&quot;#通信方式&quot; class=&quot;headerlink&quot; title=&quot;通信方式&quot;&gt;&lt;/a&gt;通信方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;容器间通信：同一个pod内的多个容器间的通信，使用lo接口&lt;/li&gt;
&lt;li&gt;pod间通信：overlay叠加网络实现。直达，不要经过NAT转换&lt;/li&gt;
&lt;li&gt;pod与service通信：由iptables规则或者lvs规则实现。直达，不要经过NAT转换&lt;/li&gt;
&lt;li&gt;service与集群外部通信：配置nodePort或者ingress&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="VxLAN" scheme="http://yoursite.com/tags/VxLAN/"/>
    
      <category term="flannel" scheme="http://yoursite.com/tags/flannel/"/>
    
      <category term="canal" scheme="http://yoursite.com/tags/canal/"/>
    
  </entry>
  
  <entry>
    <title>k8s(5)-认证</title>
    <link href="http://yoursite.com/2020/02/05/k8s-5-%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2020/02/05/k8s-5-%E8%AE%A4%E8%AF%81/</id>
    <published>2020-02-05T03:35:24.000Z</published>
    <updated>2020-02-05T03:39:49.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>在与APIServer交互时需要做认证、权限检查、准入控制来确保集群资源安全。与APIServer交互的对象有两种，一种是工作在集群外部的用户使用kubectl来访问APIServer对外端口，另一种是集群内部pod节点通过service访问。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该service就是集群内pod节点访问APIServer的service</span></span><br><span class="line">kubectl get service kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看详细信息，可以看到master的地址是该service的Endpoints地址</span></span><br><span class="line">kubectl describe service kubernetes</span><br></pre></td></tr></table></figure><p>每个pod或多或少都需要和APIServer进行通信，因此在其创建时都会默认设置一个存储卷，该卷是一个token信息，它以存储卷的形式挂载到pod的容器内，使得该容器能够使用该token来与APIServer通信时进行认证。</p><h4 id="资源请求"><a href="#资源请求" class="headerlink" title="资源请求"></a>资源请求</h4><p>在整个k8s集群的资源请求中，kubectl命令对资源的操作实际是对http的访问路径，可以通过本地代理kubectl访问集群来实现http的资源请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#资源请求格式</span></span><br><span class="line">/apis/&lt;GROUP&gt;/&lt;VERSION&gt;/namespaces/&lt;NAMESPACE_NAME&gt;/&lt;KIND&gt;[/OBJECT_ID]</span><br><span class="line"></span><br><span class="line"><span class="comment">#代理，使用curl命令访问本地8080端口实现对集群资源的访问</span></span><br><span class="line">kubectl proxy --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问路径</span></span><br><span class="line">http://ip:port/apis/apps/namespaces/default/deployments/nginx-deploy</span><br><span class="line">apis整个资源的访问入口</span><br><span class="line">apps是apis的一个组</span><br><span class="line">因此，之前使用kubectl命令对各种资源的操作实际就是对资源路径的操作</span><br></pre></td></tr></table></figure><h4 id="请求动作"><a href="#请求动作" class="headerlink" title="请求动作"></a>请求动作</h4><p>http请求需要转换为对API对象的请求来进行访问</p><p>http：get、post、put、delete</p><p>API request：get、list、create、update、patch、watch、proxy、redirect、delete、deletecollection</p><h4 id="访问用户"><a href="#访问用户" class="headerlink" title="访问用户"></a>访问用户</h4><p>整个k8s集群中访问APIServer的用户有两类，一类为Useraccount，另一类为Serviceaccount，区别如下：</p><ul><li>User account是为人设计的，而service account则是为Pod中的进程调用Kubernetes API而设计；</li><li>User account是跨namespace的，而service account则是仅局限它所在的namespace；</li><li>每个namespace都会自动创建一个default service account；</li><li>Token controller检测service account的创建，并为它们创建secret</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>APIServer是整个访问请求进入的网关接口，请求过程中认证用于实现身份识别，授权用于实现权限检查，准入控制用于补充权限检查功能，一般在创建、修改、删除、代理等情况下做补充。</p><h3 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h3><p>它是一个k8s对象资源。当集群内pod节点与APIServer交互时，需要pod提供认证信息，该信息定义在pod上的serviceaccount字段中。serviceaccount是仅局限它所在的namespace中有意义的，且每个namespace都会自动创建一个default service account，当创建 pod 的时候，如果没有指定一个 service account，系统会自动在与该pod 相同的 namespace 下为其指派一个default service account。而pod和APIserver之间进行通信的账号，称为serviceAccountName。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看默认sa，其名称为default</span></span><br><span class="line">kubectl get sa</span><br></pre></td></tr></table></figure><p>默认的service account 仅仅只能获取当前Pod自身的相关属性，无法观察到其他名称空间Pod的相关属性信息。如果想要扩展Pod，假设有一个Pod需要用于管理其他Pod或者是其他资源对象，是无法通过自身的名称空间的serviceaccount进行获取其他Pod的相关属性信息的，此时就需要进行手动创建一个serviceaccount，并在创建Pod时进行定义。</p><p>自定义serviceaccount</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create serviceacount admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">创建后会在sa里新建一个admin名称的sa；在secret中也会创建一个admin名称的token做认证使用</span><br></pre></td></tr></table></figure><p>创建pod并设置其serviceAccountName</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-sa-demo</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">serviceAccountName:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">serviceAccountName用于与已创建的sa绑定</span></span><br></pre></td></tr></table></figure><h3 id="认证配置文件"><a href="#认证配置文件" class="headerlink" title="认证配置文件"></a>认证配置文件</h3><p>各个APIServer客户端与APIServer通信时不仅可以使用上述的Serviceaccount来进行认证，还可以使用配置文件进行认证</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看配置文件</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="string">view</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#详细信息</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">DATA+OMITTED</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://192.168.163.132:6443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">kubernetes</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">kubernetes-admin</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-admin@kubernetes</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">kubernetes-admin@kubernetes</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-admin</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">REDACTED</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">REDACTED</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">clusters表示集群列表，可以定义多个集群从而控制多个集群</span></span><br><span class="line"><span class="string">users表示用户列表</span></span><br><span class="line"><span class="string">contexts表示上下文列表，用于指明用哪个user访问哪个cluster</span></span><br><span class="line"><span class="string">current-context：表示当前使用哪个user访问哪个cluster</span></span><br></pre></td></tr></table></figure><p>在/etc/kubernetes/pki文件中都是整个k8s集群的ca证书和密钥，其中有ca.crt证书用于签署哪些用户可以连入APIServer中。下面演示自建账户并使用APIServer的ca签署流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成私钥</span></span><br><span class="line">(<span class="built_in">umask</span> 077;openssl genrsa -out dqy.key 2048)</span><br><span class="line"><span class="comment">#生成证书，且由ca.crt签署</span></span><br><span class="line"><span class="comment">#生成证书申请请求</span></span><br><span class="line">openssl req -new -key dqy.key -out dqy.csr -subj <span class="string">"/CN=dqy"</span></span><br><span class="line"><span class="comment">#用ca.crt签署</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> dqy.csr -CA ./ca.crt -CAkey ./ca.key -CAcreateserial -out dqy.crt -days 365</span><br><span class="line"><span class="comment">#查看证书内容</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> dqy.crt -text -noout</span><br><span class="line"><span class="comment">#创建集群用户</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials dqy --client-certificate=./dqy.crt --client-key=./dqy.key --embed-certs=<span class="literal">true</span></span><br><span class="line"><span class="comment">#设置上下文</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context dqy@kubernetes --cluster=kubernetes --user=dqy</span><br><span class="line"><span class="comment">#设置当前上下文</span></span><br><span class="line">kubectl config use-context dqy@kubernetes</span><br><span class="line"><span class="comment">#新增集群，使用新增集群的ca证书来进行认证</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster e2e --server=<span class="string">"https://192.168.163.132:6443"</span> --certificate-authority=~/.kube/e2e/kubernetes.ca.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">CN的值就是你的需要访问APIServer的用户账号名</span><br><span class="line">CAcreateserial表示自建序列号</span><br><span class="line">text表示以文本格式不适用base64编码</span><br><span class="line">certificate-authority指明需要的集群ca</span><br><span class="line">上述创建的用户没有管理员权限，可以使用RBAC进行授权</span><br></pre></td></tr></table></figure><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>Role-based AC，即基于角色的访问控制。让一个用户(user)扮演一个角色(Role)，这个用户就拥有了该角色的权限，并且后续的权限授予都只针对角色而不是用户来进行。主要用于为上文中创建出用户的权限进行授予。</p><p><img src="/2020/02/05/k8s-5-%E8%AE%A4%E8%AF%81/k8s-RBAC.png" alt></p><p>在集群中的所有操作都是在某个对象上施加的某种行为，一个对象上许可的行为组合起来就叫做许可权限，可以在role上授予该role具有某些许可权限。首先定义role，role中需要定义operations和object。之后使用rolebinding将role绑定到user(user account、service account)上实现名称空间级别的授权。</p><p><img src="/2020/02/05/k8s-5-%E8%AE%A4%E8%AF%81/k8s-rolebind.png" alt></p><p>在k8s中有两类资源，一类是名称空间级资源，一类是集群级资源。</p><p>在名称空间A中定义一个角色role，将User1和role进行rolebinding绑定，这样user1就获得了role上定义的在该<strong>名称空间内</strong>的资源的访问权限。</p><p>在集群定义角色clusterRole，通过clusterRoleBinding将其和User1进行绑定，那么它就拥有<strong>整个集群内</strong>的资源的访问权限。</p><p><strong>注意</strong>，绑定可以跨界。换句话说，可以将user1通过RoleBinding绑定到ClusterRole中，注意虽然此时ClusterRole定义的是整个集群上的权限，但是由于使用NamespaceA中的RoleBinding进行绑定，那么此时User1只拥有该名称空间中的访问权限。(用谁绑定就拥有哪个级别的权限)。该操作适用于为每个名称空间设置一个管理员，如果使用rolebinding绑定role和user，那么需要定义多个role；而此处可以定义一个ClusterRole再使用对应名称空间的RoleBinding来绑定，也可以达到同样的效果。</p><p>上文提到的role、clusterRole、roleBinding、clusterRoleBinding都是k8s资源</p><h4 id="定义role"><a href="#定义role" class="headerlink" title="定义role"></a>定义role</h4><p>创建role</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#干跑模式，可以查看yaml格式</span></span><br><span class="line">kubectl create role pods-reader --verb=get,list,watch --resource=pods --dry-run -o yaml</span><br><span class="line"><span class="comment">#查看创建的role</span></span><br><span class="line">kubectl get role</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">verb：指明资源请求动作</span><br><span class="line">resource：指明资源对象</span><br><span class="line">resource names：具体资源的名称</span><br></pre></td></tr></table></figure><p>创建roleBinding并绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#干跑模式，可以查看yaml格式</span></span><br><span class="line">kubectl create rolebinding dqy-read-pods --role=pods-reader --user=dqy --dry-run -o yaml</span><br><span class="line"><span class="comment">#查看绑定信息</span></span><br><span class="line">kubectl describe rolebinding dqy-read-pods</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">role：指明role</span><br><span class="line">user：要绑定的用户</span><br></pre></td></tr></table></figure><h4 id="定义clusterrole"><a href="#定义clusterrole" class="headerlink" title="定义clusterrole"></a>定义clusterrole</h4><p>创建clusterRole</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrole cluster-read --verb=get,list,watch --resource=pods -o yaml</span><br></pre></td></tr></table></figure><p>创建clusterRoleBinding并绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#干跑一下看看</span></span><br><span class="line">kubectl create clusterrolebinding dqy-read-all-pods --clusterrole=cluster-read --user=dqy --dry-run -o yaml</span><br></pre></td></tr></table></figure><h4 id="跨界绑定"><a href="#跨界绑定" class="headerlink" title="跨界绑定"></a>跨界绑定</h4><p>使用roleBinding绑定clusterRole，将clusterRole降级为普通role</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#干跑看一下</span></span><br><span class="line">kubectl create rolebinding dqy-read-pods --clusterrole=cluster-read --user=dqy --dry-run -o yaml</span><br></pre></td></tr></table></figure><h3 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h3><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc3/aio/deploy/recommended.yaml</span><br><span class="line"><span class="comment">#会创建如下资源</span></span><br><span class="line">namespace/kubernetes-dashboard created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">secret/kubernetes-dashboard-csrf created</span><br><span class="line">secret/kubernetes-dashboard-key-holder created</span><br><span class="line">configmap/kubernetes-dashboard-settings created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/dashboard-metrics-scraper created</span><br><span class="line">deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br><span class="line"><span class="comment">#将service/kubernetes-dashboard改为nodeport进行集群外访问</span></span><br><span class="line">kubectl patch svc kubernetes-dashboard -n kubernetes-dashboard -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>部署成功并且暴露service端口后既有如下页面：</p><p><img src="/2020/02/05/k8s-5-%E8%AE%A4%E8%AF%81/k8s-dashboard.png" alt></p><p>认证方式有两种，一种是token认证，一种是Kubeconfig认证</p><h5 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h5><p>dashboard安装在自建的名称空间kubernetes-dashboard中，如果想要dashboard的pod能够管理整个集群，就需要创建serviceaccount并将其绑定到clusterrole上，其中serviceaccount需要的token认证文件就是这里需要填入的token信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将dashboard自带的serviceaccount和clusterrole进行绑定</span></span><br><span class="line">kubectl create clusterrolebinding dash-role-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取该sa的token信息</span></span><br><span class="line">kubectl describe sa -n kubernetes-dashboard kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">#从token信息中提取出token</span></span><br><span class="line">kubectl describe secret kubernetes-dashboard-token-wh87j -n kubernetes-dashboard</span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Ik9FeEZPa0pTcnF6Yl9tMzVkQUZRS3lISTdVZjhvTGNGZ0lDdjJtQjRSQzAifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi13aDg3aiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjA1MDg4YjFhLTExMGEtNGFkNS04ZmQwLWZiYWFhNWM1NmM3OSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.7joqmYOT3AQKtJs8sQVx8mlYcb5Vy4R8NhZDSYGXzOA259DpIvbHeBZBJBi_SBnVsQ_XNZTinC33j8zSwlb5jdlTKBGLoWTdWxbaFgH3GjSXigSS5yq4h-7A-aVj_bjmycejnWDfzOG-vpqlXtmLabUWYCUa2Bihw_TnxTaWqNnNqqVHQ7Gaq8O84fe61W0gMUAWoZ2iQol2raohoEEzMURQceozSa_CaBxZd2X2gztWnBrqsmsG3PorVR-E7wt1bqYkW8OnTXat-T9FNChp3iDP70k-Le1CD7MzvyPE4L2U7MN_vHndRTbw9a9tFHbboO2Rx6qoJokA0hE7BbjdZA</span><br></pre></td></tr></table></figure><h5 id="Kubeconfig认证"><a href="#Kubeconfig认证" class="headerlink" title="Kubeconfig认证"></a>Kubeconfig认证</h5><p>kubeconfig配置文件也可以使用token来认证，将其添加到kubeconfig文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建serviceaccount并绑定role或者clusterrole，和上面一样，此处略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加集群</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --server=<span class="string">"https://192.168.163.132:6443"</span> --embed-certs=<span class="literal">true</span> --kubeconfig=/root/def-ns-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加token</span></span><br><span class="line">KUBE_ADMIN_TOKEN=`kubectl get secret kubernetes-dashboard-token-wh87j -n kubernetes-dashboard -o jsonpath=&#123;.data.token&#125; | base64 -d`</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials def-ns-admin --token=<span class="variable">$KUBE_ADMIN_TOKEN</span> --kubeconfig=/root/def-ns-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加上下文</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context def-ns-admin@kubernetes --cluster=kubernetes --user=def-ns-admin --kubeconfig=/root/def-ns-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置当前上下文</span></span><br><span class="line">kubectl config use-context def-ns-admin@kubernetes --kubeconfig=/root/def-ns-admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看完整配置文件</span></span><br><span class="line">kubectl config view --kubeconfig=/root/def-ns-admin.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;在与APIServer交互时需要做认证、权限检查、准入控制来确保集群资源安全。与APIServer交互的对象有两种，一种是工作在集群外部的用户使用kubectl来访问APIServer对外端口，另一种是集群内部pod节点通过service访问。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="认证" scheme="http://yoursite.com/tags/%E8%AE%A4%E8%AF%81/"/>
    
      <category term="dashboard" scheme="http://yoursite.com/tags/dashboard/"/>
    
  </entry>
  
  <entry>
    <title>k8s(4)-存储卷</title>
    <link href="http://yoursite.com/2020/02/03/k8s-4-%E5%AD%98%E5%82%A8%E5%8D%B7/"/>
    <id>http://yoursite.com/2020/02/03/k8s-4-%E5%AD%98%E5%82%A8%E5%8D%B7/</id>
    <published>2020-02-03T04:18:18.000Z</published>
    <updated>2020-02-09T11:25:23.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>在docker中就引入了存储卷的概念，它在docker内和物理机做映射使得即使docker容器挂掉数据也保存在其他地方，下次启动docker时数据依然存在。但是在k8s集群体系中，pod作为最小的调度单位(因此存储卷概念是建立在pod之上)，如果pod挂掉还是要被调度器进行调度，那么就有可能调度到其他的node节点上，这样使得docker存储卷的处理方案行不通(因为docker挂掉不会被调度，一直在一个主机上)。上述情况只是pod挂掉就可能会导致pod调度到其他node，那么如果node挂掉情况会更加严重。</p><p>鉴于上述需求，k8s提出了脱离节点存在的存储概念。在此之前，考虑一个问题，为什么pod本身具有存储卷和网络名称空间？这取决于pod基础容器pause，这个容器是执行k8s初始化时拉取的一个容量很小的容器，它不启动，可以理解为它是pod的根，所有pod的网络名称空间等资源分配实际上是分配给pause镜像，在pod中运行的主容器是共享pause的网络名称空间，同理容器挂载存储卷也是挂载pause的存储卷而已。</p><a id="more"></a><p><img src="/2020/02/03/k8s-4-%E5%AD%98%E5%82%A8%E5%8D%B7/k8s-pvc.png" alt></p><p>k8s作为一个集群需要管理多个主机，各个主机的存储系统接口可能不一样，面对这么多的差异性提出了PVC和PV的概念。PVC全称为PersistentVolumeClaim，即持久卷申请，是对多个存储接口的抽象申请。PV全称为PersistentVolume，是分配的真实的存储管理空间。PVC的申请就是对PV进行操作。这里仍然存在一个问题：PV大小如何指定？即如何根据具体需求定制PV大小，虽然可以管理员定义，但是考虑云计算环境的不同用户的不同需求使用管理员手动创建显然不合实际，因此引入StorageClass概念，又叫存储类，它是对PV的抽象。当用户通过PVC申请存储空间时，通过StorageClass分配指定的PV给用户。</p><p>pv和pvc是kubernetes抽象出来的一种存储资源，定义方法与pod等类似。</p><h4 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h4><p>PersistentVolume（PV）是集群中已由管理员配置的一段网络存储。 集群中的资源就像一个节点是一个集群资源。 PV是诸如卷之类的卷插件，但是具有独立于使用PV的任何单个pod的生命周期。</p><h4 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h4><p>PersistentVolumeClaim（PVC）是用户存储的请求。PVC的使用逻辑：在pod中定义一个存储卷（该存储卷类型为PVC），定义的时候直接指定大小，pvc必须与对应的pv建立关系，pvc会根据定义去pv申请，而pv是由存储空间创建出来的。</p><h4 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h4><p>存储类，是对多个存储设备的封装(设备必须支持Restful格式的请求)，也是一个标准k8s的资源。定义存储类后，pvc申请对象不是pv而是存储类，由存储类动态创建出pv来满足申请。主要使用在多个应用场景下，不同的应用对存储性能要求的不同，因此将不同性能的存储设备分组对外提供可以很好的解决这个问题。</p><h4 id="configMap"><a href="#configMap" class="headerlink" title="configMap"></a>configMap</h4><p>它是一个k8s资源，作用相当于配置中心的作用。它可以通过挂载到pod上的某个容器内作为该容器进程的配置文件；也可以类似docker的entrypoint脚本一样对容器内的环境变量进行注入从而修改配置文件。总之，configMap实现的就是同一配置多个pod配置文件的功能。</p><h4 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h4><p>它是一个类似configMap的k8s资源，功能实现和configMap一样，不过他是configMap的加密版。configMap采用明文传输，而secret采用base64编码传输(也比较容易反解)。一般密钥使用secret来定义，其它仍然使用configMap。</p><p>常见的secret类型有三种：docker-registry、tls、generic。</p><ul><li>docker-registry：用于创建docker私有仓库的认证</li><li>tls：用于证书私钥等</li><li>generic：其他如mysql认证等</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h4><p>只在节点本地使用，一旦pod被删除该存储卷也被删除，通常用于做临时目录、缓存(将物理机的内存空间作为存储空间)等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>    <span class="comment">#在容器内定义挂载存储名称和挂载路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data/</span>    <span class="comment">#在容器内定义挂载存储名称和挂载路径</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['/bin/sh','-c','while</span> <span class="literal">true</span><span class="string">;do</span> <span class="string">echo</span> <span class="string">$(date)</span> <span class="string">&gt;&gt;</span> <span class="string">/data/index.html;sleep</span> <span class="number">2</span><span class="string">;done']</span></span><br><span class="line">  <span class="attr">volumes:</span>  <span class="comment">#定义存储卷</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span>    <span class="comment">#定义存储卷名称  </span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span>  <span class="comment">#定义存储卷类型</span></span><br></pre></td></tr></table></figure><h4 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h4><p>与docker存储卷一样，在物理机找一个目录作为pod的挂载目录，且该目录不能是pod名称空间中的目录，可以实现pod删除时存储卷仍然存在。该存储为node节点级存储，若node挂掉或者pod被调度到其他node上也会丢失数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-vol-hostpath</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/data/pod/volume1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">type类型可以参考https://kubernetes.io/docs/concepts/storage/volumes#hostpath</span></span><br><span class="line"><span class="string">DirectoryOrCreate：如果目录不存在就创建(物理主机被挂载的目录)</span></span><br><span class="line"><span class="string">FileOrCreate：如果文件不存在就就创建(物理主机被挂载的文件)</span></span><br></pre></td></tr></table></figure><h4 id="网络存储"><a href="#网络存储" class="headerlink" title="网络存储"></a>网络存储</h4><p>主要解决hostPath存储遇到node节点不同时数据丢失的问题，此处以NFS为例，NFS主机IP为192.168.163.137</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在NFS主机安装nfs，其他主机也要安装否则无法挂载</span></span><br><span class="line">yum install -y nfs-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nfs和rpcbind服务，rpcbind必须在nfs之前启动</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建共享目录</span></span><br><span class="line">mkdir /data/volumes -pv</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑/etc/exports文件，或者编辑/etc/exports.d/下的文件</span></span><br><span class="line">/data/volumes 192.168.163.0/24(rw,no_root_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在node1/2主机(192.168.163.135)上挂载，需要提前在/etc/hosts做域名解析</span></span><br><span class="line">mount -t nfs node3:/data/volumes /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出export</span></span><br><span class="line">exportfs -arv</span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure><p>编写nfs.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pod-vol-nfs</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.dqy.io</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="定义PVC-PV"><a href="#定义PVC-PV" class="headerlink" title="定义PVC/PV"></a>定义PVC/PV</h4><p>在网络存储基础上构建PV。</p><p>配置nfs存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在nfs上创建多个目录</span></span><br><span class="line">mkdir /data/volumes/v&#123;1,2,3,4,5&#125;</span><br><span class="line"><span class="comment">#导出</span></span><br><span class="line">exportfs -arv</span><br><span class="line">shoumount -e</span><br></pre></td></tr></table></figure><p>定义pv</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pv-demo.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pv001</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pv001</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes/v1</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.day.io</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line">    <span class="attr">capacity:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pv002</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pv002</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes/v2</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.day.io</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line">    <span class="attr">capacity:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pv003</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pv003</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes/v3</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.day.io</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line">    <span class="attr">capacity:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">3Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pv004</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pv004</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes/v4</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.day.io</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line">    <span class="attr">capacity:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">4Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pv005</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pv005</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/volumes/v5</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">node3.day.io</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line">    <span class="attr">capacity:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">pv属于集群级资源，被名称空间共享，不需要指明名称空间</span></span><br><span class="line"><span class="string">pvc属于名称空间级资源，需要指明名称空间</span></span><br><span class="line"><span class="string">更多accessModes见文档https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes</span></span><br></pre></td></tr></table></figure><p>定义PVC和pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">accessModes:</span> <span class="string">["ReadWriteMany"]</span></span><br><span class="line"><span class="attr">resources:</span> </span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">3Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-vol-pvc</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span><span class="comment">#在容器内定义挂载存储名称和挂载路径</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">persistentVolumeClaim:</span><span class="comment">#绑定哪个pvc</span></span><br><span class="line">  <span class="attr">claimName:</span> <span class="string">mypvc</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">pvc属于名称空间级资源，需要指明名称空间，其名称空间和pod一致</span></span><br><span class="line"><span class="string">pvc定义的accessModes必须是pv的子集，否则无法分配到pv</span></span><br><span class="line"><span class="string">resources定义资源数</span></span><br></pre></td></tr></table></figure><h4 id="定义configMap"><a href="#定义configMap" class="headerlink" title="定义configMap"></a>定义configMap</h4><p>创建configMap资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接在命令行给出键值对</span></span><br><span class="line">kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=nginx.dqy.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#以文件方式创建www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">server_name nginx.dqy.com;</span><br><span class="line">listen 80;</span><br><span class="line">root /data/web/html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#将使用文件名作为键，内容作为值</span></span><br><span class="line">kubectl create configmap nginx-www --from-file=./www.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看定义的configMap</span></span><br><span class="line">kubectl get configmap -o yaml</span><br></pre></td></tr></table></figure><p>以环境变量方式注入nginx容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-cm-1</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NGINX_SERVER_PORT</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">nginx_port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NGINX_SERVER_NAME</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">server_name</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">configMapKeyRef中name即为存在的已定义的configMap的名称，key即为其内的键名称</span></span><br><span class="line"><span class="string">当镜像运行时即使改变configmap的值镜像内的环境变量也不会改变，因此只在镜像启动时有效</span></span><br></pre></td></tr></table></figure><p>以存储卷方式挂载configmap</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pod-cm-2</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginxconf</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/etc/nginx/config.d/</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginxconf</span></span><br><span class="line">  <span class="attr">configMap:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">在volumes中定义挂载类型为configMap，name指明已创建的configMap资源</span></span><br><span class="line"><span class="string">修改configMap的值后容器内的值也会改变，需要等待一个随机时间(同步需要时间)，可以理解为链接文件</span></span><br></pre></td></tr></table></figure><h4 id="定义StorageClass"><a href="#定义StorageClass" class="headerlink" title="定义StorageClass"></a>定义StorageClass</h4><p>StorageClass的定义主要包括名称、后端存储的提供者(Provisioner)和后端存储的相关参数配置。StorageClass一旦被创建出来，将无法修改。如需修改，则只能删除原StorageClass的定义重建。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建nfs-client的自动配置程序，根据已经创建好的nfs服务器进行自动创建PV</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/external_storage/nfs-client-provisioner:latest</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">fuseim.pri/ifs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.163</span><span class="number">.137</span>           <span class="comment">#nfs server 地址</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/data/k8s-volume</span>     <span class="comment">#nfs共享目录</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.163</span><span class="number">.137</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/k8s-volume</span></span><br></pre></td></tr></table></figure><p>定义serviceaccount</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["persistentvolumes"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["persistentvolumeclaims"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">["storage.k8s.io"]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["storageclasses"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["events"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["list",</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["endpoints"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["create",</span> <span class="string">"delete"</span><span class="string">,</span> <span class="string">"get"</span><span class="string">,</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><p>创建storageclass</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">fuseim.pri/ifs</span> <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br></pre></td></tr></table></figure><p>创建pvc</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-claim</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">"managed-nfs-storage"</span>    <span class="comment">#storageclass 名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span>              <span class="comment">#访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1024Mi</span>        <span class="comment">#请求数据大小</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#成功后可以看到自动创建了一个pv给pvc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;h4 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h4&gt;&lt;p&gt;在docker中就引入了存储卷的概念，它在docker内和物理机做映射使得即使docker容器挂掉数据也保存在其他地方，下次启动docker时数据依然存在。但是在k8s集群体系中，pod作为最小的调度单位(因此存储卷概念是建立在pod之上)，如果pod挂掉还是要被调度器进行调度，那么就有可能调度到其他的node节点上，这样使得docker存储卷的处理方案行不通(因为docker挂掉不会被调度，一直在一个主机上)。上述情况只是pod挂掉就可能会导致pod调度到其他node，那么如果node挂掉情况会更加严重。&lt;/p&gt;
&lt;p&gt;鉴于上述需求，k8s提出了脱离节点存在的存储概念。在此之前，考虑一个问题，为什么pod本身具有存储卷和网络名称空间？这取决于pod基础容器pause，这个容器是执行k8s初始化时拉取的一个容量很小的容器，它不启动，可以理解为它是pod的根，所有pod的网络名称空间等资源分配实际上是分配给pause镜像，在pod中运行的主容器是共享pause的网络名称空间，同理容器挂载存储卷也是挂载pause的存储卷而已。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="存储卷" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8%E5%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>nfs各种问题解决</title>
    <link href="http://yoursite.com/2020/02/02/nfs%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2020/02/02/nfs%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2020-02-02T10:25:38.000Z</published>
    <updated>2020-02-02T10:29:36.940Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://www.xuebuyuan.com/2158147.html" target="_blank" rel="noopener">https://www.xuebuyuan.com/2158147.html</a></p><p>在配置kubenetes存储卷时遇到nfs配置问题，在网上找到如下解决方案</p><a id="more"></a><h3 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h3><p>mount: 192.168.81.32:/opt failed, reason given by server: Permission denied</p><p>查看配置文件exports,是否为允许挂载的客户。</p><h3 id="error-No-route-to-host"><a href="#error-No-route-to-host" class="headerlink" title="error = No route to host"></a>error = No route to host</h3><p>mount: RPC: Unable to receive; errno = No route to host</p><p>首先看是否在同一网段</p><p>再者输入：</p><p>[root@localhost etc]# service iptables status</p><p>看防火墙是否开启，有则将其关闭</p><p>[root@localhost etc]# service iptables stop</p><p> 注意：但是这样子有时候其实还是有一些问题, 因此我们干脆直接将防火墙关闭掉, 同时关闭selinux</p><h3 id="error-Connection-refused"><a href="#error-Connection-refused" class="headerlink" title="error = Connection refused"></a>error = Connection refused</h3><p>mount: RPC: Unable to receive; errno = Connection refused</p><p>① 首先看nfs服务是否开启，</p><p>② 其次看rpcbind是否开启，</p><p>如果rpcbind没有运行，那在重新开启rpcbind后，要再restart nfs服务，</p><p>因为重启rpcbind已对nfs的一些配置造成影响，需要restart.</p><p>没错，看到这时候，你已经找到问题了，</p><h3 id="not-responding-still-trying"><a href="#not-responding-still-trying" class="headerlink" title="not responding,still trying.."></a>not responding,still trying..</h3><p>有时候传输大文件会出错,</p><p>NFS: server 192.168.81.32 not responding,still trying..</p><p>这个可能是NFS有问题,与RING或buffer的大小有关,</p><p> 问题的原因分析：</p><p>1、NFS 的默认传输协议是 UDP，而PC机与嵌入式系统通过UPD交互时就会出现严重的网卡丢包现象；</p><p>2、server机和目标机网卡传输速率冲突，使得目标机需要大量时间复制大量数据包，其实如果目标机的网卡速率够大，则不用分那么多包，也不会冲突。</p><p>问题的解决方案：</p><p>方法一：</p><p>在客户端改用TCP协议，使用下面的命令，在mount命令中加上参数tcp</p><p>mount -o tcp ,nolock 192.168.14.223:/nfs_root /mnt</p><p>也可这样干：</p><p>跟踪了fs/nfs/nfsroot.c的代码，发现在nfs作为根文件系统时，参数可以直接写在“nfsroot=”后面，每个参数用逗号隔开，如：</p><p>nfsroot=192.168.10.1:/rootfs,proto=tcp,nfsvers=3,nolock</p><p>这样就可以指定nfs使用tcp协议</p><p>方法二：</p><p>指定传输速率（限定传输时一次读写的数据大小）</p><p>#mount -t nfs -o intr,nolock,rsize=1024,wsize=1024 192.168.14.223:/nfs_root /mnt</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载：&lt;a href=&quot;https://www.xuebuyuan.com/2158147.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.xuebuyuan.com/2158147.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在配置kubenetes存储卷时遇到nfs配置问题，在网上找到如下解决方案&lt;/p&gt;
    
    </summary>
    
    
      <category term="疑难杂症" scheme="http://yoursite.com/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="nfs" scheme="http://yoursite.com/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>k8s(3)-ingress详解</title>
    <link href="http://yoursite.com/2020/02/01/k8s-3-ingress%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/02/01/k8s-3-ingress%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-02-01T09:40:41.000Z</published>
    <updated>2020-02-02T10:27:17.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当nginx实现七层负载均衡时通过upstream反向代理多个后端主机。但在k8s集群中，使用nginx反代时如果后端新增加pod组就需要通过修改nginx配置文件来新增upstream，但在k8s种修改nginx不方便，不能直接修改配置文件，由此引入ingress。ingress包括如下组件：</p><a id="more"></a><ul><li>ingress对象：使用yaml格式定义不同的nginx配置文件。</li><li>ingress controller：用于管理ingress对象，当ingress对象变化时自动读取并生成对应的nginx配置并重新加载nginx服务。</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="/2020/02/01/k8s-3-ingress%E8%AF%A6%E8%A7%A3/k8s-ingress.png" alt></p><p>用户请求经由外部负载均衡器调度到集群内部的service然后访问IngressController，它根据ingress定义的规则从而访问后端的pod。注意后端的pod也是根据ingress定义来分组，它通过一个Service来分组，该Service只用于标记哪些pod属于同一组，不起到调度作用。</p><p>其实，IngressController可以不定义于某个Service后，可以采用共享主机网络名称空间的方式(定义hostnetwork)，定义成DaemonSet运行于指定几个主机上(用污点实现)，这样也可以实现七层负载均衡调度。</p><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><p>安装ingress-controller</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建名称空间</span></span><br><span class="line">kubectl create namespace ingress-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署ingressController</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.28.0/deploy/static/mandatory.yaml</span><br></pre></td></tr></table></figure><p>配置ingress-nginx</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">service-nodeport.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看开放端口,80和443端口都有相应的映射</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">service</span> <span class="string">ingress-nginx</span> <span class="string">-n</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">此处需要使用nodeport来暴露端口，或者将ingress-controller配置为DaemonSet，并共享物理主机网络配置也可以实现类似功能</span></span><br><span class="line"><span class="string">注意名称空间是ingress-nginx</span></span><br><span class="line"><span class="string">targetPort是容器端口</span></span><br><span class="line"><span class="string">port是service端口</span></span><br></pre></td></tr></table></figure><p>定义service，该service负责标记两个后端web服务器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处直接expose暴露</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">expose</span> <span class="string">deployment</span> <span class="string">nginx-deploy</span> <span class="string">--name=nginx</span> <span class="string">--port=80</span> <span class="string">--target-port=80</span> <span class="string">--protocol=TCP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">这里可以使用上面这种直接暴露的方法，也可以在pod控制器的yaml中同时定义一个service，如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">            <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">            <span class="attr">labels:</span></span><br><span class="line">                <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">                <span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">            <span class="attr">containers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">              <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">              <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">              <span class="attr">ports:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">                <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>定义ingress文件规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">ingress</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">annotations:</span> </span><br><span class="line"><span class="attr">kubenetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.dqy.com</span></span><br><span class="line">  <span class="attr">http:</span> </span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">path:</span></span><br><span class="line">    <span class="attr">backend:</span> </span><br><span class="line">      <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">该ingress的namespace必须与要发布的service(上面那个)处在同一namespace中</span></span><br><span class="line"><span class="string">annotations的作用是表示此处使用nginx作为反代，必须要设置</span></span><br><span class="line"><span class="string">rules下的host指定为域名时必须能解析到之前定义的NodePort上，即ingress-nginx上</span></span><br><span class="line"><span class="string">backend用来定义后端相关信息，serviceName就是代理后端2个web主机的service的名称</span></span><br><span class="line"><span class="string">path默认不写代表/</span></span><br></pre></td></tr></table></figure><p>至此，整个nginx七层代理就搭好了，不出意外的话在物理主机上可以使用nginx.dqy.com来进行访问，注意要指定Nodeport暴露的端口号，以及定义好hosts文件进行域名解析。另外此处定义虚拟主机的host为nginx.dqy.com就必须使用该域名来访问，不能使用其ip地址访问。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>上述只能实现http访问，这里拓展一下https的实现。</p><p>为了方便就本地自签证书，先生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out tls.key 2048</span><br></pre></td></tr></table></figure><p>生成自签证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key tls.key -out tls.crt -subj /C=CN/ST=Huaian/L=Huaian/O=Linux/CN=nginx.dqy.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">CN一定要设置为要访问的域名</span><br></pre></td></tr></table></figure><p>将crt证书转换成secret对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls nginx-ingress-secret --cert=tls.crt --key=tls.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line">nginx-ingress-secret是一个名称可以随意</span><br><span class="line">指明证书和密钥</span><br></pre></td></tr></table></figure><p>编写ingress-tls.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-tls</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">annotations:</span> </span><br><span class="line">        <span class="attr">kubenetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">tls:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nginx.dqy.com</span></span><br><span class="line">  <span class="attr">secretName:</span> <span class="string">nginx-ingress-secret</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.dqy.com</span></span><br><span class="line">      <span class="attr">http:</span> </span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span></span><br><span class="line">          <span class="attr">backend:</span> </span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">ingress-tls.yaml</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">定义tls字段时host主机可以有多个</span></span><br><span class="line"><span class="string">secretName就是创建的secret</span></span><br></pre></td></tr></table></figure><p>至此就可以使用https端口访问了，注意要在地址前手动添加https协议。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;当nginx实现七层负载均衡时通过upstream反向代理多个后端主机。但在k8s集群中，使用nginx反代时如果后端新增加pod组就需要通过修改nginx配置文件来新增upstream，但在k8s种修改nginx不方便，不能直接修改配置文件，由此引入ingress。ingress包括如下组件：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="ingress" scheme="http://yoursite.com/tags/ingress/"/>
    
  </entry>
  
  <entry>
    <title>k8s(2)-pod和service</title>
    <link href="http://yoursite.com/2020/02/01/k8s-2-pod%E5%92%8Cservice/"/>
    <id>http://yoursite.com/2020/02/01/k8s-2-pod%E5%92%8Cservice/</id>
    <published>2020-02-01T09:37:24.000Z</published>
    <updated>2020-02-17T03:19:22.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h3><p>kubernetes使用REST格式的API将各种操作对象当作资源来管理。常见资源对象如下：</p><ul><li><p>workload：工作负载型资源对象，主要运行应用程序对外提供服务；如pod、deployment、statefileset等</p></li><li><p>服务发现和负载均衡有关：service、ingress等</p></li><li><p>配置与存储相关：volume、CSI第三方存储卷、configmap、secret等</p></li><li><p>集群级资源：名称空间、node、role、cluster role等</p></li><li><p>元数据型资源：HPA、podtemplate、limitrange</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pod资源清单查看，以yaml格式查看指定pod的资源配置文件</span></span><br><span class="line">kubectl get pod nginx-xxxx -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">apiVersion：api群组和版本，一般为group/version，group省略则为core组；使用如下命令可以获取</span><br><span class="line">kubectl api-version</span><br><span class="line">kind：资源类别，就是上文指定的资源类别</span><br><span class="line">metadata：元数据</span><br><span class="line">name：pod名称</span><br><span class="line">namespace：名称空间</span><br><span class="line">labels：标签</span><br><span class="line">annotations：资源注解</span><br><span class="line">spec：规格，定义对象满足哪些特性，是用户定义的目标状态；容器、容忍度等</span><br><span class="line">stats：当前资源的当前状态，当前状态与目标状态不同时，当前状态需要向期望状态转变</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个资源如何定义，可以逐级查看</span></span><br><span class="line">kubectl explain pod.metadata</span><br></pre></td></tr></table></figure></li></ul><p>资源清单文件实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="comment">#containers内容为列表，因此需要使用- name这种格式来定义；可以多次定义</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">imagePullPolocy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="comment">#替换busybox容器默认启动执行命令</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/bin/sh"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"date &gt;&gt; /usr/share/nginx/html/index.html"</span></span><br></pre></td></tr></table></figure><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>自主创建的Pod：通过手动指定yaml文件进行创建的pod，它不受pod控制器的管理，即使容器失效后也不会自动重启</p></li><li><p>控制器管理的Pod：使用run指令创建的pod，它受到控制器管理，可以根据指定条件维持pod内容器数量</p></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>首先需要初始化容器进行初始化，可以理解为docker中的ENTRYPOINT脚本执行效果。在初始化结束后存在类似awk的begin和end的post start和pre stop。</p><p>另外，在主容器进程执行时会有两个健康探测一直执行，探测方式主要有ExecAction(自定义命令)、TCPSocketAction(向套接字发请求)、HTTPGetAction(向http发送get请求)。常见的pod状态如下：</p><p>Pending：挂起，请求pod后调度没有完成，如标签不符合</p><p>Running：运行态</p><p>Failed：失败态</p><p>Succeeded：成功态</p><p>Unknown：未知态，可能是kubelet自身出问题</p><h4 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h4><p>首先，创建请求提交给API server，之后API server将其保存在etcd数据库中，之后请求schedule进行调度并将其调度结果保存到etcd的pod状态中；对于node节点来说，node节点上的kubelet会收到API server变动事件，然后该kubelet会得到创建的pod的资源清单，根据清单在当前node上进行pod创建。如果创建失败，其结果会反馈给API server并保存在etcd中</p><h4 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h4><p>先发送terminal信号，使得内部容器执行stop命令(给时间保存数据)；达到pod设定缓冲时间后再执行kill信号杀死pod。</p><h4 id="资源定义"><a href="#资源定义" class="headerlink" title="资源定义"></a>资源定义</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spec</span></span><br><span class="line"><span class="string">containers</span> <span class="string">&lt;[]object&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">name</span> <span class="string">&lt;string&gt;</span><span class="comment">#pod名称</span></span><br><span class="line">    <span class="string">image</span> <span class="string">&lt;string&gt;</span><span class="comment">#镜像名称</span></span><br><span class="line">    <span class="string">imagePullPolicy</span> <span class="string">&lt;string&gt;</span><span class="comment">#拖取镜像方式，有三种方式</span></span><br><span class="line">    <span class="string">Always</span><span class="comment">#总是向仓库拖取，即使本地存在</span></span><br><span class="line">    <span class="string">Never</span><span class="comment">#从不向仓库拖取</span></span><br><span class="line">    <span class="string">IfNotPresent</span><span class="comment">#如果本地不存在就下载</span></span><br><span class="line">    <span class="string">ports</span> <span class="string">&lt;[]object&gt;</span><span class="comment">#定义暴露端口，但是这里不指定pod也会将容器内的服务监听端口暴露，这里主要是信息式的显示，方便查看</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name</span> <span class="string">&lt;string&gt;</span><span class="comment">#端口名称，如http等</span></span><br><span class="line">      <span class="string">containerPort</span> <span class="string">&lt;string&gt;</span><span class="comment">#容器端口，如80等</span></span><br><span class="line">    <span class="string">command</span> <span class="string">&lt;[]string&gt;</span><span class="comment">#用于替换docker中的cmd和entrypoint</span></span><br><span class="line">    <span class="string">args</span> <span class="string">&lt;[]string&gt;</span><span class="comment">#用于替换docker中的cmd(cmd做参数时)，此时当作command参数   </span></span><br><span class="line">    <span class="string">livenessProbe</span><span class="comment">#容器存活状态检测，在post start后检测</span></span><br><span class="line">      <span class="string">exec</span><span class="comment">#command &lt;[]string&gt;，通过命令来直接探测</span></span><br><span class="line">      <span class="string">httpGet</span><span class="comment">#http探测，需要指明port和path；port也可以是上面ports暴露的名称，path是相对路径，相对于容器内服务定义的doc_root路径</span></span><br><span class="line">      <span class="string">tcpSocket</span><span class="comment">#tcp探测</span></span><br><span class="line">      <span class="string">failureThreshold</span><span class="comment">#探测失败次数，默认3次</span></span><br><span class="line">      <span class="string">periodSeconds</span><span class="comment">#每次间隔时间，默认10秒</span></span><br><span class="line">      <span class="string">timeoutSeconds</span><span class="comment">#超时时间，默认1秒</span></span><br><span class="line">      <span class="string">initialDelaySeconds</span><span class="comment">#容器启动后多久开始探测</span></span><br><span class="line">    <span class="string">readinessProbe</span><span class="comment">#服务就绪状态检测，在post start后检测</span></span><br><span class="line">    <span class="string">lifecycle</span><span class="comment">#生命周期</span></span><br><span class="line">      <span class="string">poststart</span><span class="comment">#类似于awk的begin，与检测逻辑相似，都包含三种方式；其执行在command后</span></span><br><span class="line">      <span class="string">prestop</span><span class="comment">#类似于awk的end，与检测逻辑相似，都包含三种方式；其执行在command后</span></span><br><span class="line"><span class="string">nodeSelector</span> <span class="string">&lt;map[string]string&gt;</span><span class="comment">#节点标签选择器，可以根据label限定Pod运行的节点</span></span><br><span class="line">  <span class="string">label=value</span></span><br><span class="line"><span class="string">nodeName</span><span class="comment">#直接运行pod于指定节点上，不通过nodeSelector选择</span></span><br><span class="line"><span class="string">restartPolicy</span><span class="comment">#重启策略，Always，OnFailure，Never，默认Always</span></span><br></pre></td></tr></table></figure><h4 id="健康检测实例"><a href="#健康检测实例" class="headerlink" title="健康检测实例"></a>健康检测实例</h4><p>ReadinessProbe，使用httpGet做就绪性探测</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ikubernetes/myapp:v1</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>LivenessProbe，使用command做存活性探测</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-exec-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/bin/sh"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"touch /tmp/health; sleep 30; rm -f /tmp/health; sleep 3600;"</span></span><br><span class="line">    <span class="attr">livenessProbe:</span> </span><br><span class="line">      <span class="attr">exec:</span> </span><br><span class="line">        <span class="attr">command:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">"test"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-e"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"/tmp/healthy"</span></span><br></pre></td></tr></table></figure><h3 id="Pod控制器"><a href="#Pod控制器" class="headerlink" title="Pod控制器"></a>Pod控制器</h3><h4 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h4><p>主要由三个主要部件组成，用于管理无状态pod。</p><p>部件：用户期望的pod副本数、标签选择器、pod模板。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">selector:</span> </span><br><span class="line"><span class="attr">matchLabels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line"><span class="attr">templates:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line"><span class="attr">environment:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ikubernetes/myapp:v1</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">spec中需要定义三个字段：replicas、selector、templates</span></span><br><span class="line"><span class="string">matchLabels用于匹配pod的labels字段，因此在templates中的labels字段中必须包含matchlabels的字段</span></span><br><span class="line"><span class="string">templates中定义的pod名称并没有意义，控制器会自动为各个pod添加自身名称后加随机字符串</span></span><br><span class="line"><span class="string">修改可以使用patch或edit编辑</span></span><br></pre></td></tr></table></figure><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p>工作在ReplicaSet之上，不直接控制pod而是控制ReplicaSet，一般都使用Deployment作为pod控制器。另外，在使用Deployment进行版本更新时，它会创建一个新的RepicaSet然后在旧的RepicaSet上删除一个pod，在新的RepicaSet上新建一个pod，从而实现动态更新。当然，如果考虑到删除一个pod时会不会导致业务瓶颈导致服务中断，Deployment还支持临时允许多添加或减少pod，即可以暂时超过RepicaSet设置的replicas数，从而实现先创建一个新的，再删除旧的，这样更稳定。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">myapp-deploy</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">matchLabels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">canary</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ikubernetes/myapp:v1</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">Deployment会自动创建ReplicaSet进行管理</span></span><br><span class="line"><span class="string">修改可以使用patch或edit编辑</span></span><br></pre></td></tr></table></figure><h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><p>用于确保指定的node节点只运行一个pod副本，通常用来实现系统级后台任务，且pod必须是无状态的。它也支持滚动更新。可以用于工作在指定pod上做七层负载均衡调度(打污点)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">myapp-daemon</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">matchLabels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">release:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ikubernetes/filebeat:v1</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_HOST</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">redis.default.cluster.svc.cluster.local</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">定义env一般是设置服务工作，手动指定filebeat将日志传给redis，从而实现pod之间的通信</span></span><br><span class="line"><span class="string">由于一个node上运行一个DaemonSet，因此可以使用spec字段的hostNetwork共享该pod和node的网络地址空间，这样就不用service暴露ip端口也可以直接通过node的IP进行访问</span></span><br></pre></td></tr></table></figure><h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>用于执行一次性pod，如果正常执行结束则不会被重启，如果未结束时被异常终止那么会重启该pod。</p><h4 id="Cronjob"><a href="#Cronjob" class="headerlink" title="Cronjob"></a>Cronjob</h4><p>周期性job</p><h4 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h4><p>用于管理有状态的pod，且每一个pod都被单独管理。如redis、mysql等。该控制器主要管理有以下特性的控制程序：</p><ul><li>稳定且唯一的网络标识符</li><li>稳定且持久的存储</li><li>有序平滑的部署扩展和终止删除</li><li>有序的滚动更新</li></ul><p>它需要三个组件：</p><p>headless service：用于确保pod删除后再重建它的名称等信息必须和原来一样，因为pod名称是唯一标识符。因此使用headless service，它确保解析直达后端pod而不是代理的service。</p><p>statefulSet：pod管理器</p><p>volumeClaimTemplate：有状态的pod不能使用同一个存储卷，因此不能使用deployment中template定义pod来定义。这里使用volumeClaimTemplate实现动态创建pvc，并且绑定各自的pv，从而实现各自挂载各自的存储卷(分布式存储)</p><h5 id="资源定义-1"><a href="#资源定义-1" class="headerlink" title="资源定义"></a>资源定义</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">meatadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">matchLabels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">sepc:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginxdata</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">volumeClaimTemplates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">nginxdata</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> <span class="string">["ReadWriteOnce"]</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">"gluster-dynamic"</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">删除pod是有顺序依次删除，且不会删除对应的pvc，可以保证数据不丢失；删除后重新绑定仍然是之前对应的pvc</span></span><br><span class="line"><span class="string">每个pod名称都需要被解析，这里解析需要额外指明service_name，如：pod_name.service_name.ns_name.svc.cluster.local</span></span><br></pre></td></tr></table></figure><h5 id="修改命令"><a href="#修改命令" class="headerlink" title="修改命令"></a>修改命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扩容，顺序增序</span></span><br><span class="line">kubectl scale sts nginx --replicas=5</span><br><span class="line"><span class="comment">#镜像升级</span></span><br><span class="line">这里升级支持定义updateStrategy升级策略，其rollingUpdate属性下有一个属性为partition，它指明更新边界。</span><br><span class="line">我们知道statefulSet创建的pod有编号，从0-n，如果partition为n，表示编号大于等于n的都会更新，可以模拟出灰度更新的效果</span><br><span class="line">kubectl <span class="built_in">set</span> image sts/nginx nginx=nginx:v2</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>用于解决pod更新时地址等资源改变的问题而提出的新概念，是对多个pod的封装，pod客户端访问其他pod时是通过service访问，其本质是iptables规则或者是ipvs规则。这些规则由node节点上的kube-proxy组件实现，它一直使用watch方法监视apiserver，service资源有变动时对应kube-proxy会将其定义为规则。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="userspace"><a href="#userspace" class="headerlink" title="userspace"></a>userspace</h5><p><img src="/2020/02/01/k8s-2-pod%E5%92%8Cservice/k8s-userspace.png" alt></p><p>请求由ClientPod发给ServiceIP，ServiceIP将其转发给本地的kube-proxy，再由kube-proxy经由ServiceIP发送给目的地的kube-proxy，最后发送给对应的ServerPod。这种模式的通信kube-proxy是工作在用户空间的进程，这种通信方式效率很低(内核和用户空间的切换)。</p><h5 id="iptables-ipvs"><a href="#iptables-ipvs" class="headerlink" title="iptables/ipvs"></a>iptables/ipvs</h5><p><img src="/2020/02/01/k8s-2-pod%E5%92%8Cservice/k8s-iptables.png" alt></p><p>请求经过ServiceIP后不再转发到本地kube-proxy，而是直接由ServiceIP的规则转发，大大减少了时间开销。根据转发的规则是iptables还是ipvs来划分。</p><p>默认使用iptables规则，如果要使用ipvs规则则需要在初始化之前在/etc/sysconfig/kubelete文件中设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBE_PROXY_MODE=ipvs</span><br></pre></td></tr></table></figure><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>ClusterIP：默认类型，分配一个集群内地址给service，由于是私网地址因此只用于集群内通信</p><p>NodePort：用于集群外部访问集群内部pod，并需要定义nodeport字段的端口，该模式工作于ClusterIP之上，客户端请求先经由NodeIP:NODEPORT到ClusterIP:PORT最后到pod。</p><p>LoadBalance：工作在LAAS创建负载均衡时使用</p><p>ExternalName：集群内部节点访问外部服务时定义的service，该服务必须要被DNS解析</p><h4 id="定义清单"><a href="#定义清单" class="headerlink" title="定义清单"></a>定义清单</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">role:</span> <span class="string">logstor</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="string">端口有三种，port是service端口；targetPort是pod端口；nodePort是使用NodePort类型service时对外通信的端口</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;资源清单&quot;&gt;&lt;a href=&quot;#资源清单&quot; class=&quot;headerlink&quot; title=&quot;资源清单&quot;&gt;&lt;/a&gt;资源清单&lt;/h3&gt;&lt;p&gt;kubernetes使用REST格式的API将各种操作对象当作资源来管理。常见资源对象如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;workload：工作负载型资源对象，主要运行应用程序对外提供服务；如pod、deployment、statefileset等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务发现和负载均衡有关：service、ingress等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置与存储相关：volume、CSI第三方存储卷、configmap、secret等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;集群级资源：名称空间、node、role、cluster role等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元数据型资源：HPA、podtemplate、limitrange&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
      <category term="pod" scheme="http://yoursite.com/tags/pod/"/>
    
  </entry>
  
</feed>
